import os
import logging
import asyncio
from contextlib import suppress

from fastapi import FastAPI, Request, Response
from fastapi.responses import JSONResponse

from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.redis import RedisStorage, DefaultKeyBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import Message, Update
from aiogram.fsm.state import StatesGroup, State

import redis.asyncio as redis
from aiogram.client.default import DefaultBotProperties


# ----------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ----------------------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
REDIS_URL = os.getenv("REDIS_URL")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "fxbank-secret")
BANK_PASSWORD = os.getenv("BANK_PASSWORD", "letmein")  # –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–æ–ª–∏ –±–∞–Ω–∫–∞
HOST = "0.0.0.0"
PORT = int(os.getenv("PORT", 10000))

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
logger = logging.getLogger("FXBankBot")

# ----------------------------------------
# FSM
# ----------------------------------------
class DealFSM(StatesGroup):
    client_name = State()
    operation_type = State()
    currency_from = State()
    currency_to = State()
    conversion_mode = State()
    amount = State()
    rate = State()
    confirm = State()


# ----------------------------------------
# Init bot
# ----------------------------------------
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

async def get_storage():
    if REDIS_URL:
        try:
            redis_client = redis.from_url(REDIS_URL)
            await redis_client.ping()
            logger.info("Connected to Redis, using RedisStorage.")
            return RedisStorage(redis=redis_client, key_builder=DefaultKeyBuilder())
        except Exception as e:
            logger.warning(f"Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e} ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ MemoryStorage")
    return MemoryStorage()

storage = None
dp = Dispatcher()
router = Router()
dp.include_router(router)

# ----------------------------------------
# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫ –∏ —Ä–æ–ª–µ–π
# ----------------------------------------
ORDERS = {}   # {order_id: dict}
ORDER_COUNTER = 0
BANK_USERS = set()  # id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é "–±–∞–Ω–∫"

def new_order(data: dict):
    global ORDER_COUNTER
    ORDER_COUNTER += 1
    ORDERS[ORDER_COUNTER] = {"id": ORDER_COUNTER, "status": "new", **data}
    return ORDER_COUNTER, ORDERS[ORDER_COUNTER]


# ----------------------------------------
# Handlers: –ö–ª–∏–µ–Ω—Ç
# ----------------------------------------
@router.message(CommandStart())
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(DealFSM.client_name)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø FXBankBot.\n\n"
        "–ù–∞—á–Ω—ë–º –∑–∞—è–≤–∫—É. –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞</b>."
    )


@router.message(DealFSM.client_name)
async def client_name_entered(message: Message, state: FSMContext):
    await state.update_data(client_name=message.text)
    await state.set_state(DealFSM.operation_type)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:\n"
        "1Ô∏è‚É£ –ü–æ–∫—É–ø–∫–∞ –≤–∞–ª—é—Ç—ã –∑–∞ UAH\n"
        "2Ô∏è‚É£ –ü—Ä–æ–¥–∞–∂–∞ –≤–∞–ª—é—Ç—ã –∑–∞ UAH\n"
        "3Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Å–∏—è (–≤–∞–ª—é—Ç–∞ ‚Üí –≤–∞–ª—é—Ç–∞)"
    )


@router.message(DealFSM.operation_type)
async def choose_operation(message: Message, state: FSMContext):
    choice = message.text.strip().lower()
    if choice.startswith("1") or "–ø–æ–∫—É–ø" in choice:
        await state.update_data(operation="buy")
        await state.set_state(DealFSM.currency_to)
        await message.answer("–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É —Ö–æ—Ç–∏—Ç–µ <b>–∫—É–ø–∏—Ç—å</b>?")
    elif choice.startswith("2") or "–ø—Ä–æ–¥" in choice:
        await state.update_data(operation="sell")
        await state.set_state(DealFSM.currency_from)
        await message.answer("–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É —Ö–æ—Ç–∏—Ç–µ <b>–ø—Ä–æ–¥–∞—Ç—å</b>?")
    elif choice.startswith("3") or "–∫–æ–Ω–≤–µ—Ä—Å" in choice:
        await state.update_data(operation="convert")
        await state.set_state(DealFSM.currency_from)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é <b>–ø—Ä–æ–¥–∞—ë—Ç–µ</b>")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")


@router.message(DealFSM.currency_from)
async def currency_from_entered(message: Message, state: FSMContext):
    data = await state.get_data()
    op = data.get("operation")
    await state.update_data(currency_from=message.text.upper())

    if op == "sell":
        await state.set_state(DealFSM.amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ <b>–ø—Ä–æ–¥–∞—Ç—å</b>.")
    elif op == "convert":
        await state.set_state(DealFSM.currency_to)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é <b>—Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å</b>.")


@router.message(DealFSM.currency_to)
async def currency_to_entered(message: Message, state: FSMContext):
    data = await state.get_data()
    op = data.get("operation")
    await state.update_data(currency_to=message.text.upper())

    if op == "buy":
        await state.set_state(DealFSM.amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ <b>–∫—É–ø–∏—Ç—å</b>.")
    elif op == "convert":
        await state.set_state(DealFSM.conversion_mode)
        await message.answer("–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å:\n1Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞—ë—Ç–µ\n2Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞–µ—Ç–µ")


@router.message(DealFSM.conversion_mode)
async def conversion_mode_entered(message: Message, state: FSMContext):
    choice = message.text.strip()
    if choice.startswith("1"):
        await state.update_data(conversion_mode="sell")
        await state.set_state(DealFSM.amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ <b>–ø—Ä–æ–¥–∞—Ç—å</b>.")
    elif choice.startswith("2"):
        await state.update_data(conversion_mode="buy")
        await state.set_state(DealFSM.amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ <b>–∫—É–ø–∏—Ç—å</b>.")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ 1 –∏–ª–∏ 2.")


@router.message(DealFSM.amount)
async def amount_entered(message: Message, state: FSMContext):
    await state.update_data(amount=message.text)
    await state.set_state(DealFSM.rate)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")


@router.message(DealFSM.rate)
async def rate_entered(message: Message, state: FSMContext):
    await state.update_data(rate=message.text)
    data = await state.get_data()
    order_id, order = new_order({
        "client_id": message.from_user.id,
        **data
    })
    await state.clear()

    text = (
        f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞:\n"
        f"–ö–ª–∏–µ–Ω—Ç: {order['client_name']}\n"
        f"–û–ø–µ—Ä–∞—Ü–∏—è: {order['operation']}\n"
        f"–° {order.get('currency_from')} –Ω–∞ {order.get('currency_to')}\n"
        f"–°—É–º–º–∞: {order['amount']}\n"
        f"–ö—É—Ä—Å: {order['rate']}\n"
        f"–°—Ç–∞—Ç—É—Å: {order['status']}"
    )
    await message.answer(text)

    # —É–≤–µ–¥–æ–º–∏–º –±–∞–Ω–∫
    for uid in BANK_USERS:
        try:
            await bot.send_message(uid, f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order_id}\n{text}")
        except:
            pass


# ----------------------------------------
# Handlers: –ë–∞–Ω–∫
# ----------------------------------------
@router.message(Command("bank"))
async def bank_login(message: Message):
    parts = message.text.strip().split()
    if len(parts) == 2 and parts[1] == BANK_PASSWORD:
        BANK_USERS.add(message.from_user.id)
        await message.answer("üè¶ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –±–∞–Ω–∫.")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")


@router.message(Command("orders"))
async def list_orders(message: Message):
    if message.from_user.id not in BANK_USERS:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

    if not ORDERS:
        return await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫.")

    text = "üìã –ó–∞—è–≤–∫–∏:\n"
    for oid, order in ORDERS.items():
        text += f"#{oid}: {order['operation']} {order.get('currency_from')}->{order.get('currency_to')} | {order['amount']} @ {order['rate']} | {order['status']}\n"
    await message.answer(text)


@router.message(Command("accept"))
async def accept_order(message: Message):
    if message.from_user.id not in BANK_USERS:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

    parts = message.text.strip().split()
    if len(parts) != 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /accept <id>")

    oid = int(parts[1])
    if oid not in ORDERS:
        return await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞—è–≤–∫–∏.")

    ORDERS[oid]["status"] = "accepted"
    await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ #{oid} –ø—Ä–∏–Ω—è—Ç–∞.")

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    cid = ORDERS[oid]["client_id"]
    with suppress(Exception):
        await bot.send_message(cid, f"üè¶ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{oid} –ø—Ä–∏–Ω—è—Ç–∞ –±–∞–Ω–∫–æ–º.")


@router.message(Command("reject"))
async def reject_order(message: Message):
    if message.from_user.id not in BANK_USERS:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

    parts = message.text.strip().split(maxsplit=2)
    if len(parts) < 3:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reject <id> <–Ω–æ–≤—ã–π_–∫—É—Ä—Å>")

    oid = int(parts[1])
    new_rate = parts[2]
    if oid not in ORDERS:
        return await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞—è–≤–∫–∏.")

    ORDERS[oid]["status"] = f"rejected (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω –∫—É—Ä—Å {new_rate})"
    await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{oid} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –∫—É—Ä—Å {new_rate}.")

    cid = ORDERS[oid]["client_id"]
    with suppress(Exception):
        await bot.send_message(cid, f"üè¶ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{oid} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ù–æ–≤—ã–π –∫—É—Ä—Å: {new_rate}")


@router.message(Command("confirm"))
async def confirm_order(message: Message):
    if message.from_user.id not in BANK_USERS:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

    parts = message.text.strip().split()
    if len(parts) != 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /confirm <id>")

    oid = int(parts[1])
    if oid not in ORDERS:
        return await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞—è–≤–∫–∏.")

    ORDERS[oid]["status"] = "confirmed"
    await message.answer(f"üìå –ó–∞—è–≤–∫–∞ #{oid} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (–æ—Ä–¥–µ—Ä).")

    cid = ORDERS[oid]["client_id"]
    with suppress(Exception):
        await bot.send_message(cid, f"üè¶ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{oid} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞.")


# ----------------------------------------
# /rate, /status, /restart
# ----------------------------------------
@router.message(Command("rate"))
async def cmd_rate(message: Message):
    text = (
        "üí± –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã (–∑–∞–≥–ª—É—à–∫–∞):\n"
        "USD/UAH = 41.25\n"
        "EUR/UAH = 45.10\n"
        "PLN/UAH = 10.60\n"
        "EUR/USD = 1.0920\n"
        "PLN/USD = 0.2580\n"
    )
    await message.answer(text)


@router.message(Command("status"))
async def cmd_status(message: Message):
    text = f"üîé Mode: webhook\nStorage: {'RedisStorage' if isinstance(storage, RedisStorage) else 'MemoryStorage'}"
    if isinstance(storage, RedisStorage):
        try:
            pong = await storage.redis.ping()
            text += f"\nRedis ping: {'ok' if pong else 'fail'}"
        except Exception as e:
            text += f"\nRedis error: {e}"
    await message.answer(text)


@router.message(Command("restart"))
async def cmd_restart(message: Message, state: FSMContext):
    await state.clear()
    with suppress(Exception):
        await bot.delete_webhook(drop_pending_updates=True)
    full_url = f"{WEBHOOK_URL}/webhook/{WEBHOOK_SECRET}"
    await bot.set_webhook(url=full_url, secret_token=WEBHOOK_SECRET, drop_pending_updates=True)
    await message.answer("‚ôªÔ∏è –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")


# ----------------------------------------
# FastAPI
# ----------------------------------------
app = FastAPI()

@app.on_event("startup")
async def on_startup():
    global storage, dp
    storage = await get_storage()
    dp = Dispatcher(storage=storage)
    dp.include_router(router)

    full_url = f"{WEBHOOK_URL}/webhook/{WEBHOOK_SECRET}"
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(url=full_url, secret_token=WEBHOOK_SECRET, drop_pending_updates=True)
    logger.info("Bot started in webhook mode.")

@app.on_event("shutdown")
async def on_shutdown():
    with suppress(Exception):
        await bot.session.close()
    logger.info("Bot stopped.")

@app.get("/")
async def healthcheck():
    return {"status": "ok", "mode": "webhook"}

@app.post("/webhook/{token}")
async def telegram_webhook(token: str, request: Request):
    if token != WEBHOOK_SECRET:
        return Response(status_code=403)
    update = Update.model_validate(await request.json(), context={"bot": bot})
    await dp.feed_update(bot, update)
    return Response(status_code=200)
