import os
import logging
from contextlib import suppress
from decimal import Decimal
from typing import Optional, Dict, List

from fastapi import FastAPI, Request, Response, HTTPException
from pydantic import BaseModel

from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import Message, Update
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.redis import RedisStorage, DefaultKeyBuilder
from aiogram.fsm.storage.memory import MemoryStorage

import redis.asyncio as aioredis


# -------------------------
# ENV & Logging
# -------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is required")

WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # e.g. https://fxbankbot.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "fxbank-secret")
REDIS_URL = os.getenv("REDIS_URL")      # rediss://default:pass@host:6379
BANK_PASSWORD = os.getenv("BANK_PASSWORD", "letmein")

HOST = "0.0.0.0"
PORT = int(os.getenv("PORT", "10000"))

logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("FXBankBot")


# -------------------------
# FastAPI app (healthcheck + webhook)
# -------------------------
app = FastAPI(title="FXBankBot")
app.state.mode: Optional[str] = None

# -------------------------
# Aiogram globals (init in startup)
# -------------------------
bot: Optional[Bot] = None
dp: Optional[Dispatcher] = None
router = Router()

# -------------------------
# Bank role (in-memory)
# -------------------------
BANK_USERS = set()  # telegram user_ids with bank role (sessional login)

# -------------------------
# FSM States
# -------------------------
class DealFSM(StatesGroup):
    client_name = State()
    operation_type = State()      # buy / sell / convert
    currency_from = State()       # for sell or convert
    currency_to = State()         # for buy or convert
    conversion_mode = State()     # for convert: "sell" or "buy"
    amount = State()              # numeric (string kept)
    rate = State()                # numeric (string kept)
    confirm = State()


# -------------------------
# Helpers
# -------------------------
def parse_decimal(txt: str) -> Decimal:
    s = txt.strip().replace(" ", "").replace(",", ".")
    return Decimal(s)

async def build_storage():
    if not REDIS_URL:
        log.info("REDIS_URL not set: MemoryStorage")
        return MemoryStorage()
    try:
        redis = aioredis.from_url(
            REDIS_URL,
            encoding="utf-8",
            decode_responses=True,
        )
        await redis.ping()
        log.info("Connected to Redis, using RedisStorage.")
        return RedisStorage(redis=redis, key_builder=DefaultKeyBuilder(with_bot_id=True, prefix="fxbank"))
    except Exception as e:
        log.warning(f"Redis unavailable: {e} ‚Äî fallback to MemoryStorage")
        return MemoryStorage()

def redis_conn() -> Optional[aioredis.Redis]:
    if isinstance(dp.storage, RedisStorage):
        return dp.storage.redis
    return None

def order_key(order_id: int) -> str:
    return f"order:{order_id}"

def orders_index_all() -> str:
    return "orders:all"

def orders_index_status(status: str) -> str:
    return f"orders:status:{status}"

ORDER_COUNTER_KEY = "order:counter"

async def order_next_id(r: aioredis.Redis) -> int:
    return int(await r.incr(ORDER_COUNTER_KEY))

async def order_create(payload: Dict) -> int:
    """Create order in Redis, index it, return id."""
    r = redis_conn()
    if not r:
        # Fallback in-memory minimal (edge case if no Redis): emulate counter in memory via aiogram storage not available -> return fake id
        # But normally we always have Redis for orders.
        raise RuntimeError("Redis is required for orders storage in this build.")
    oid = await order_next_id(r)
    payload = {
        "id": str(oid),
        "status": payload.get("status", "new"),
        "client_id": str(payload["client_id"]),
        "client_name": payload.get("client_name", ""),
        "operation": payload.get("operation", ""),
        "currency_from": payload.get("currency_from", "") or "",
        "currency_to": payload.get("currency_to", "") or "",
        "conversion_mode": payload.get("conversion_mode", "") or "",
        "amount": payload.get("amount", ""),
        "rate": payload.get("rate", ""),
        "proposed_rate": payload.get("proposed_rate", ""),
    }
    await r.hset(order_key(oid), mapping=payload)
    await r.sadd(orders_index_all(), oid)
    await r.sadd(orders_index_status(payload["status"]), oid)
    return oid

async def order_get(oid: int) -> Optional[Dict]:
    r = redis_conn()
    if not r:
        return None
    data = await r.hgetall(order_key(oid))
    return data or None

async def order_change_status(oid: int, new_status: str, extra: Dict = None) -> Optional[Dict]:
    r = redis_conn()
    if not r:
        return None
    k = order_key(oid)
    exists = await r.exists(k)
    if not exists:
        return None
    old_status = await r.hget(k, "status")
    pipe = r.pipeline()
    pipe.hset(k, "status", new_status)
    if extra:
        pipe.hset(k, mapping=extra)
    # reindex
    pipe.srem(orders_index_status(old_status or "new"), oid)
    pipe.sadd(orders_index_status(new_status), oid)
    await pipe.execute()
    return await r.hgetall(k)

async def orders_list(status: Optional[str] = None, limit: int = 50) -> List[Dict]:
    r = redis_conn()
    if not r:
        return []
    ids: List[str]
    if status and status != "all":
        ids = list(await r.smembers(orders_index_status(status)))
    else:
        ids = list(await r.smembers(orders_index_all()))
    # sort by numeric id asc
    try:
        ids_sorted = sorted((int(x) for x in ids))
    except Exception:
        ids_sorted = ids
    result: List[Dict] = []
    for oid in ids_sorted[:limit]:
        data = await r.hgetall(order_key(int(oid)))
        if data:
            result.append(data)
    return result


# -------------------------
# Handlers ‚Äî client side
# -------------------------
@router.message(CommandStart())
@router.message(Command("start"))
@router.message(StateFilter("*"), F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(DealFSM.client_name)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø FXBankBot.\n\n"
        "–ù–∞—á–Ω—ë–º –∑–∞—è–≤–∫—É. –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞</b>.",
        parse_mode=ParseMode.HTML,
    )

@router.message(DealFSM.client_name, F.text)
async def h_client_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        return await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
    await state.update_data(client_name=name)
    await state.set_state(DealFSM.operation_type)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–º–æ–∂–Ω–æ —Ü–∏—Ñ—Ä–æ–π):\n"
        "1Ô∏è‚É£ –ü–æ–∫—É–ø–∫–∞ –≤–∞–ª—é—Ç—ã –∑–∞ UAH\n"
        "2Ô∏è‚É£ –ü—Ä–æ–¥–∞–∂–∞ –≤–∞–ª—é—Ç—ã –∑–∞ UAH\n"
        "3Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Å–∏—è (–≤–∞–ª—é—Ç–∞ ‚Üí –≤–∞–ª—é—Ç–∞)"
    )

@router.message(DealFSM.operation_type, F.text)
async def h_operation(message: Message, state: FSMContext):
    choice = message.text.strip().lower()
    if choice.startswith("1") or "–ø–æ–∫—É–ø" in choice:
        await state.update_data(operation="buy")
        await state.set_state(DealFSM.currency_to)
        return await message.answer("–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É —Ö–æ—Ç–∏—Ç–µ <b>–∫—É–ø–∏—Ç—å</b>? (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD, EUR)", parse_mode=ParseMode.HTML)
    if choice.startswith("2") or "–ø—Ä–æ–¥" in choice:
        await state.update_data(operation="sell")
        await state.set_state(DealFSM.currency_from)
        return await message.answer("–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É —Ö–æ—Ç–∏—Ç–µ <b>–ø—Ä–æ–¥–∞—Ç—å</b>? (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD, EUR)", parse_mode=ParseMode.HTML)
    if choice.startswith("3") or "–∫–æ–Ω–≤–µ—Ä—Å" in choice:
        await state.update_data(operation="convert")
        await state.set_state(DealFSM.currency_from)
        return await message.answer("–ö–æ–Ω–≤–µ—Ä—Å–∏—è: —É–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é <b>–ø—Ä–æ–¥–∞—ë—Ç–µ</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: EUR)", parse_mode=ParseMode.HTML)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ 1 (–ü–æ–∫—É–ø–∫–∞), 2 (–ü—Ä–æ–¥–∞–∂–∞) –∏–ª–∏ 3 (–ö–æ–Ω–≤–µ—Ä—Å–∏—è).")

# --- SELL / CONVERT from ---
@router.message(DealFSM.currency_from, F.text)
async def h_currency_from(message: Message, state: FSMContext):
    cur = message.text.strip().upper()
    if len(cur) not in (3, 4):
        return await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã. –ü—Ä–∏–º–µ—Ä: USD, EUR.")
    await state.update_data(currency_from=cur)
    data = await state.get_data()
    op = data.get("operation")
    if op == "sell":
        await state.set_state(DealFSM.amount)
        return await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {cur}, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ <b>–ø—Ä–æ–¥–∞—Ç—å</b>.", parse_mode=ParseMode.HTML)
    if op == "convert":
        await state.set_state(DealFSM.currency_to)
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é <b>—Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD).", parse_mode=ParseMode.HTML)

# --- BUY / CONVERT target ---
@router.message(DealFSM.currency_to, F.text)
async def h_currency_to(message: Message, state: FSMContext):
    cur = message.text.strip().upper()
    if len(cur) not in (3, 4):
        return await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã. –ü—Ä–∏–º–µ—Ä: USD, EUR.")
    await state.update_data(currency_to=cur)
    data = await state.get_data()
    op = data.get("operation")
    if op == "buy":
        await state.set_state(DealFSM.amount)
        return await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {cur}, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ <b>–∫—É–ø–∏—Ç—å</b>.", parse_mode=ParseMode.HTML)
    if op == "convert":
        await state.set_state(DealFSM.conversion_mode)
        sell_cur = data.get("currency_from")
        buy_cur = cur
        return await message.answer(
            "–ö–∞–∫ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏?\n"
            f"1Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ <b>–ø—Ä–æ–¥–∞—ë—Ç–µ</b> {sell_cur}\n"
            f"2Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ <b>–ø–æ–∫—É–ø–∞–µ—Ç–µ</b> {buy_cur}",
            parse_mode=ParseMode.HTML,
        )

@router.message(DealFSM.conversion_mode, F.text)
async def h_conv_mode(message: Message, state: FSMContext):
    t = message.text.strip()
    if t.startswith("1"):
        await state.update_data(conversion_mode="sell")
        await state.set_state(DealFSM.amount)
        data = await state.get_data()
        return await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {data.get('currency_from')} –¥–ª—è <b>–ø—Ä–æ–¥–∞–∂–∏</b>.", parse_mode=ParseMode.HTML)
    if t.startswith("2"):
        await state.update_data(conversion_mode="buy")
        await state.set_state(DealFSM.amount)
        data = await state.get_data()
        return await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {data.get('currency_to')} –¥–ª—è <b>–ø–æ–∫—É–ø–∫–∏</b>.", parse_mode=ParseMode.HTML)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ 1 (—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞—ë—Ç–µ) –∏–ª–∏ 2 (—Å–∫–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞–µ—Ç–µ).")

@router.message(DealFSM.amount, F.text)
async def h_amount(message: Message, state: FSMContext):
    # –ø—Ä–æ—Å—Ç–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —á–∏—Å–ª–æ, —Ö—Ä–∞–Ω–∏–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    try:
        parse_decimal(message.text)
    except Exception:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 1000000 –∏–ª–∏ 1 000 000,00.")
    await state.update_data(amount=message.text.strip())
    await state.set_state(DealFSM.rate)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–∫—É—Ä—Å</b> –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.", parse_mode=ParseMode.HTML)

@router.message(DealFSM.rate, F.text)
async def h_rate(message: Message, state: FSMContext):
    try:
        parse_decimal(message.text)
    except Exception:
        return await message.answer("–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: 41.25")
    await state.update_data(rate=message.text.strip())
    data = await state.get_data()

    payload = {
        "client_id": message.from_user.id,
        "client_name": data.get("client_name"),
        "operation": data.get("operation"),
        "currency_from": data.get("currency_from") or "",
        "currency_to": data.get("currency_to") or "",
        "conversion_mode": data.get("conversion_mode") or "",
        "amount": data.get("amount"),
        "rate": data.get("rate"),
        "status": "new",
    }
    oid = await order_create(payload)
    order = await order_get(oid)
    await state.clear()

    # Human-readable summary
    op = order["operation"]
    if op == "buy":
        summary = (
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{oid}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {order['client_name']}\n"
            f"–û–ø–µ—Ä–∞—Ü–∏—è: –ü–æ–∫—É–ø–∫–∞\n"
            f"–ö—É–ø–∏—Ç—å: {order['amount']} {order['currency_to']}\n"
            f"–ö—É—Ä—Å: {order['rate']}\n"
            f"–°—Ç–∞—Ç—É—Å: {order['status']}"
        )
    elif op == "sell":
        summary = (
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{oid}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {order['client_name']}\n"
            f"–û–ø–µ—Ä–∞—Ü–∏—è: –ü—Ä–æ–¥–∞–∂–∞\n"
            f"–ü—Ä–æ–¥–∞—Ç—å: {order['amount']} {order['currency_from']}\n"
            f"–ö—É—Ä—Å: {order['rate']}\n"
            f"–°—Ç–∞—Ç—É—Å: {order['status']}"
        )
    else:
        mode = "–ü—Ä–æ–¥–∞—é" if (order.get("conversion_mode") or "") == "sell" else "–ü–æ–∫—É–ø–∞—é"
        cur = order["currency_from"] if mode == "–ü—Ä–æ–¥–∞—é" else order["currency_to"]
        summary = (
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{oid}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {order['client_name']}\n"
            f"–û–ø–µ—Ä–∞—Ü–∏—è: –ö–æ–Ω–≤–µ—Ä—Å–∏—è {order['currency_from']}‚Üí{order['currency_to']}\n"
            f"{mode}: {order['amount']} {cur}\n"
            f"–ö—É—Ä—Å: {order['rate']}\n"
            f"–°—Ç–∞—Ç—É—Å: {order['status']}"
        )

    await message.answer(summary)

    # notify bank users
    for uid in list(BANK_USERS):
        with suppress(Exception):
            await bot.send_message(uid, f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{oid}\n\n{summary}")


# -------------------------
# Rates stub
# -------------------------
@router.message(Command("rate"))
async def cmd_rate(message: Message):
    # –ó–∞–≥–ª—É—à–∫–∞ ‚Äî –ø–æ–∑–∂–µ –ø–æ–¥–∫–ª—é—á–∏–º –≤–Ω–µ—à–Ω–∏–π API + –º–∞—Ä–∂—É –±–∞–Ω–∫–∞
    text = (
        "üí± –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã (–∑–∞–≥–ª—É—à–∫–∞):\n"
        "USD/UAH = 41.25\n"
        "EUR/UAH = 45.10\n"
        "PLN/UAH = 10.60\n"
        "EUR/USD = 1.0920\n"
        "PLN/USD = 0.2580\n"
    )
    await message.answer(text)


# -------------------------
# Bank role
# -------------------------
@router.message(Command("bank"))
async def bank_login(message: Message):
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) == 2 and parts[1] == BANK_PASSWORD:
        BANK_USERS.add(message.from_user.id)
        return await message.answer("üè¶ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –±–∞–Ω–∫.")
    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /bank <–ø–∞—Ä–æ–ª—å>")

def _render_order_line(o: Dict) -> str:
    op = o.get("operation")
    if op == "buy":
        desc = f"–ü–æ–∫—É–ø–∫–∞ {o.get('amount')} {o.get('currency_to')}"
    elif op == "sell":
        desc = f"–ü—Ä–æ–¥–∞–∂–∞ {o.get('amount')} {o.get('currency_from')}"
    else:
        cm = o.get("conversion_mode")
        if cm == "sell":
            desc = f"–ö–æ–Ω–≤–µ—Ä—Å–∏—è {o.get('currency_from')}‚Üí{o.get('currency_to')} | –ø—Ä–æ–¥–∞—ë—Ç {o.get('amount')} {o.get('currency_from')}"
        else:
            desc = f"–ö–æ–Ω–≤–µ—Ä—Å–∏—è {o.get('currency_from')}‚Üí{o.get('currency_to')} | –ø–æ–∫—É–ø–∞–µ—Ç {o.get('amount')} {o.get('currency_to')}"
    rate = o.get("rate", "")
    status = o.get("status", "")
    pid = o.get("id")
    return f"#{pid}: {desc} @ {rate} | {status}"

@router.message(Command("orders"))
async def bank_orders(message: Message):
    if message.from_user.id not in BANK_USERS:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    # parse optional status
    parts = message.text.strip().split(maxsplit=1)
    status = None
    if len(parts) == 2:
        st = parts[1].strip().lower()
        if st in {"all", "new", "accepted", "rejected", "confirmed"}:
            status = st
        else:
            return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /orders [all|new|accepted|rejected|confirmed]")
    else:
        status = "new"
    lst = await orders_list(status=None if status == "all" else status)
    if not lst:
        return await message.answer("–ó–∞—è–≤–æ–∫ –Ω–µ—Ç.")
    lines = ["üìã –ó–∞—è–≤–∫–∏:"]
    for o in lst:
        lines.append(_render_order_line(o))
    await message.answer("\n".join(lines))

@router.message(Command("accept"))
async def bank_accept(message: Message):
    if message.from_user.id not in BANK_USERS:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /accept <id>")
    oid = int(parts[1])
    o = await order_get(oid)
    if not o:
        return await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞—è–≤–∫–∏.")
    o = await order_change_status(oid, "accepted")
    await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ #{oid} –ø—Ä–∏–Ω—è—Ç–∞.")
    with suppress(Exception):
        await bot.send_message(int(o["client_id"]), f"üè¶ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{oid} –ø—Ä–∏–Ω—è—Ç–∞ –±–∞–Ω–∫–æ–º.")

@router.message(Command("reject")))
async def bank_reject(message: Message):
    if message.from_user.id not in BANK_USERS:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    parts = message.text.strip().split(maxsplit=2)
    if len(parts) < 3 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reject <id> <–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π_–∫—É—Ä—Å>")
    oid = int(parts[1])
    new_rate = parts[2].strip()
    o = await order_get(oid)
    if not o:
        return await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞—è–≤–∫–∏.")
    o = await order_change_status(oid, "rejected", {"proposed_rate": new_rate})
    await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{oid} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω –∫—É—Ä—Å {new_rate}.")
    with suppress(Exception):
        await bot.send_message(int(o["client_id"]), f"üè¶ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{oid} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ù–æ–≤—ã–π –∫—É—Ä—Å: {new_rate}")

@router.message(Command("confirm")))
async def bank_confirm(message: Message):
    if message.from_user.id not in BANK_USERS:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /confirm <id>")
    oid = int(parts[1])
    o = await order_get(oid)
    if not o:
        return await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞—è–≤–∫–∏.")
    o = await order_change_status(oid, "confirmed")
    await message.answer(f"üìå –ó–∞—è–≤–∫–∞ #{oid} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞.")
    with suppress(Exception):
        await bot.send_message(int(o["client_id"]), f"üè¶ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{oid} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞.")


# -------------------------
# Service utils
# -------------------------
@router.message(Command("status"))
async def cmd_status(message: Message):
    storage_type = type(dp.storage).__name__ if dp else "unknown"
    text = f"üîé Mode: <b>{app.state.mode}</b>\nStorage: <b>{storage_type}</b>"
    if isinstance(dp.storage, RedisStorage):
        try:
            pong = await dp.storage.redis.ping()
            text += f"\nRedis ping: <b>{'ok' if pong else 'fail'}</b>"
        except Exception as e:
            text += f"\nRedis error: <code>{e!r}</code>"
    await message.answer(text, parse_mode=ParseMode.HTML)

@router.message(Command("restart"))
async def cmd_restart(message: Message, state: FSMContext):
    await state.clear()
    with suppress(Exception):
        await bot.delete_webhook(drop_pending_updates=True)
    full = f"{WEBHOOK_URL.rstrip('/')}/webhook/{WEBHOOK_SECRET}"
    await bot.set_webhook(url=full, secret_token=WEBHOOK_SECRET, drop_pending_updates=True)
    await message.answer("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# -------------------------
# FastAPI endpoints
# -------------------------
class Health(BaseModel):
    status: str = "ok"
    mode: Optional[str] = None

@app.get("/", response_model=Health)
async def health():
    return Health(status="ok", mode=app.state.mode)

@app.post("/webhook/{token}")
async def webhook(token: str, request: Request):
    if token != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="Invalid webhook token in path")
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç Telegram
    secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="Invalid secret token header")
    data = await request.json()
    upd = Update.model_validate(data, context={"bot": bot})
    await dp.feed_update(bot, upd)
    return Response(status_code=200)

# -------------------------
# FastAPI lifecycle
# -------------------------
@app.on_event("startup")
async def on_startup():
    global bot, dp
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    storage = await build_storage()
    dp = Dispatcher(storage=storage)
    dp.include_router(router)  # –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –û–î–ò–ù –†–ê–ó –∑–¥–µ—Å—å

    # —Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫
    full = f"{WEBHOOK_URL.rstrip('/')}/webhook/{WEBHOOK_SECRET}"
    with suppress(Exception):
        await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(
        url=full,
        secret_token=WEBHOOK_SECRET,
        drop_pending_updates=True,
    )
    app.state.mode = "webhook"
    log.info(f"Webhook set to {full}")

@app.on_event("shutdown")
async def on_shutdown():
    with suppress(Exception):
        await bot.session.close()
    log.info("Shutdown complete.")
