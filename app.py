import asyncio
import json
import logging
import os
import sys
from contextlib import suppress
from datetime import datetime, timezone
from typing import Optional, Dict, Any, List, Tuple

from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse, PlainTextResponse

from aiogram import Bot, Dispatcher, F, Router
from aiogram.exceptions import TelegramBadRequest, TelegramRetryAfter
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.redis import RedisStorage, DefaultKeyBuilder
from aiogram.types import (
    Update,
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand,
    BotCommandScopeDefault,
)
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.markdown import hbold, hcode

# -------- Redis (async) ----------
try:
    from redis.asyncio import Redis
except Exception:  # pragma: no cover
    from aioredis import from_url as Redis  # type: ignore

# -----------------------------
# Logging setup (robust)
# -----------------------------
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=LOG_LEVEL,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    stream=sys.stdout,
)
logger = logging.getLogger("fxbank_bot")

# -----------------------------
# Environment & constants
# -----------------------------
BOT_TOKEN = (os.getenv("BOT_TOKEN") or "").strip()
if not BOT_TOKEN:
    logger.error("BOT_TOKEN is not set! Please add it to Render Environment.")

REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")
WEBHOOK_BASE_URL = (os.getenv("WEBHOOK_URL") or os.getenv("RENDER_EXTERNAL_URL") or "").rstrip("/")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "fxbank-secret")
STRICT_HEADER = os.getenv("STRICT_HEADER", "false").lower() == "true"
ASYNC_UPDATES = os.getenv("ASYNC_UPDATES", "true").lower() == "true"
ENABLE_WATCHDOG = os.getenv("ENABLE_WATCHDOG", "false").lower() == "true"
WATCHDOG_INTERVAL = int(os.getenv("WEBHOOK_WATCHDOG_INTERVAL", "120"))

BANK_PASSWORD = os.getenv("BANK_PASSWORD", "12345")

WEBHOOK_PATH = "/webhook/secret"  # —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
HEALTHCHECK_PATH = "/"

# –í–∞–ª—é—Ç—ã
CCY = ("USD", "EUR", "PLN", "UAH")
TRADE_CCY = ("USD", "EUR", "PLN")  # –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤ UAH

# ---- –ö–ª—é—á–∏ Redis ----
ROLE_KEY = "role:{user_id}"                    # "client" | "bank"
ORDER_KEY = "order:{user_id}:{order_id}"       # JSON order
USER_ORDERS_SET = "orders_by_user:{user_id}"   # set(order_id)
PENDING_ORDERS_SET = "orders:pending"          # set(order_id)
RATES_HASH_PAIRS = "rates_pairs"               # hash pair -> rate (—Ä—É—á–Ω—ã–µ –∫—É—Ä—Å—ã –±–∞–Ω–∫–∞)

# ---- –ó–∞–≥–ª—É—à–∫–∞ –∫—É—Ä—Å–∞ (–≤ –±—É–¥—É—â–µ–º ‚Äî Bloomberg/LSEG) ----
# –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä: USDUAH, EURUAH, PLNUAH, EURUSD, EURPLN, USDPLN
STUB_RATES: Dict[str, float] = {
    "USD/UAH": 41.25,
    "EUR/UAH": 45.10,
    "PLN/UAH": 10.60,
    "EUR/USD": 1.0920,
    "USD/PLN": 3.8760,   # –∏–∑ –∏–Ω–≤–µ—Ä—Å–∏–∏ PLN/USD=0.2580
    "EUR/PLN": 4.2326,   # EUR/USD * USD/PLN
}

# -----------------------------
# FastAPI & Aiogram init
# -----------------------------
app = FastAPI(title="FX Bank Bot", version="1.2.0")

# Redis connection (Upstash rediss:// ok)
try:
    redis: Redis = Redis.from_url(REDIS_URL, encoding="utf-8", decode_responses=True)  # type: ignore
except Exception as e:
    logger.exception("Redis.from_url failed: %s", e)
    raise

storage = RedisStorage(redis=redis, key_builder=DefaultKeyBuilder(prefix="fsm"))
bot = Bot(
    BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
) if BOT_TOKEN else None
dp = Dispatcher(storage=storage)

# Routers
common_router = Router(name="common")
client_router = Router(name="client")
bank_router = Router(name="bank")
dp.include_router(common_router)
dp.include_router(client_router)
dp.include_router(bank_router)

# -----------------------------
# FSM States
# -----------------------------
class ClientTradeSG(StatesGroup):
    # –ü–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞ –≤–∞–ª—é—Ç—ã –ø—Ä–æ—Ç–∏–≤ UAH
    enter_amount = State()
    choose_currency = State()
    enter_rate = State()
    confirm = State()


class ClientConvertSG(StatesGroup):
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç–∞->–≤–∞–ª—é—Ç–∞
    choose_from = State()
    choose_to = State()
    choose_amount_mode = State()  # sell_amount/buy_amount
    enter_amount = State()
    enter_rate = State()
    confirm = State()


class BankSetPairRateSG(StatesGroup):
    choose_pair_group = State()
    choose_pair = State()
    enter_rate = State()
    confirm = State()


# -----------------------------
# Utilities
# -----------------------------
def now_iso() -> str:
    return datetime.now(timezone.utc).isoformat()


def fmt_amount(ccy: str, amt: float) -> str:
    try:
        q = 2
        return f"{amt:.{q}f} {ccy}"
    except Exception:
        return f"{amt} {ccy}"


def pair(base: str, quote: str) -> str:
    return f"{base}/{quote}"


def inverse_pair(p: str) -> str:
    b, q = p.split("/")
    return f"{q}/{b}"


async def get_role(user_id: int) -> str:
    try:
        role = await redis.get(ROLE_KEY.format(user_id=user_id))
        return role or "client"
    except Exception as e:
        logger.error("get_role failed: %s", e)
        return "client"


async def set_role(user_id: int, role: str) -> None:
    try:
        await redis.set(ROLE_KEY.format(user_id=user_id), role)
    except Exception as e:
        logger.error("set_role failed: %s", e)


def make_role_keyboard() -> InlineKeyboardMarkup:
    kb = [
        [
            InlineKeyboardButton(text="üë§ –Ø –∫–ª–∏–µ–Ω—Ç", callback_data="role:client"),
            InlineKeyboardButton(text="üè¶ –Ø –±–∞–Ω–∫", callback_data="role:bank"),
        ],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="common:help")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


def make_client_menu() -> InlineKeyboardMarkup:
    kb = [
        [
            InlineKeyboardButton(text="üü¢ –ö—É–ø–∏—Ç—å (–∑–∞ UAH)", callback_data="client:buy"),
            InlineKeyboardButton(text="üîµ –ü—Ä–æ–¥–∞—Ç—å (–∑–∞ UAH)", callback_data="client:sell"),
        ],
        [
            InlineKeyboardButton(text="üîÅ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è", callback_data="client:convert"),
            InlineKeyboardButton(text="üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="client:orders"),
        ],
        [
            InlineKeyboardButton(text="üìä –ö—É—Ä—Å—ã", callback_data="common:rates"),
            InlineKeyboardButton(text="üîÅ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="role:choose"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


def make_bank_menu() -> InlineKeyboardMarkup:
    kb = [
        [
            InlineKeyboardButton(text="‚úèÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å –ø–∞—Ä—ã", callback_data="bank:set_pair_rate"),
            InlineKeyboardButton(text="üì• –ó–∞—è–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="bank:orders"),
        ],
        [
            InlineKeyboardButton(text="üìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã", callback_data="common:rates"),
            InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å pending", callback_data="bank:clear_orders"),
        ],
        [InlineKeyboardButton(text="üîÅ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="role:choose")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


def make_currency_keyboard(exclude: Optional[str] = None) -> InlineKeyboardMarkup:
    row = []
    for c in TRADE_CCY:
        if exclude and c == exclude:
            continue
        row.append(InlineKeyboardButton(text=c, callback_data=f"ccy:{c}"))
    return InlineKeyboardMarkup(inline_keyboard=[row, [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="common:back")]])


def make_amount_mode_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ —Å—É–º–º—É –ü–†–û–î–ê–ñ–ò", callback_data="conv:mode:sell"),
            ],
            [
                InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ —Å—É–º–º—É –ü–û–ö–£–ü–ö–ò", callback_data="conv:mode:buy"),
            ],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="common:back")],
        ]
    )


def make_confirm_keyboard(ok_cb: str, cancel_cb: str = "common:cancel") -> InlineKeyboardMarkup:
    kb = [[
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=ok_cb),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_cb),
    ]]
    return InlineKeyboardMarkup(inline_keyboard=kb)


def bank_pair_groups_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–∞—Ä—ã –∫ UAH", callback_data="bank:pairgrp:uah"),
                InlineKeyboardButton(text="–ö—Ä–æ—Å—Å-–ø–∞—Ä—ã", callback_data="bank:pairgrp:cross"),
            ],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="common:back")],
        ]
    )


def bank_pairs_keyboard(group: str) -> InlineKeyboardMarkup:
    if group == "uah":
        pairs = ["USD/UAH", "EUR/UAH", "PLN/UAH"]
    else:
        pairs = ["EUR/USD", "USD/PLN", "EUR/PLN"]
    rows = [[InlineKeyboardButton(text=p, callback_data=f"bank:pair:{p}") for p in pairs]]
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="bank:set_pair_rate")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


async def safe_answer(callback: CallbackQuery, text: Optional[str] = None, show_alert: bool = False) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback; –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º 'query is too old'."""
    try:
        await callback.answer(text, show_alert=show_alert)
    except TelegramBadRequest as e:
        msg = str(e)
        if "query is too old" in msg or "query ID is invalid" in msg:
            logger.debug("Ignoring old/invalid callback: %s", msg)
        else:
            logger.warning("callback.answer bad request: %s", msg)
    except Exception as e:
        logger.warning("callback.answer error: %s", e)


# -------- –†–∞–±–æ—Ç–∞ —Å –∫—É—Ä—Å–∞–º–∏ --------
async def get_manual_rate(p: str) -> Optional[float]:
    try:
        val = await redis.hget(RATES_HASH_PAIRS, p)  # type: ignore
        return float(val) if val is not None else None
    except Exception as e:
        logger.error("get_manual_rate failed: %s", e)
        return None


def stub_rate(p: str) -> Optional[float]:
    if p in STUB_RATES:
        return STUB_RATES[p]
    inv = inverse_pair(p)
    if inv in STUB_RATES and STUB_RATES[inv] != 0:
        return 1.0 / STUB_RATES[inv]
    # –ö—Ä–æ—Å—Å —á–µ—Ä–µ–∑ —è–∫–æ—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã
    base, quote = p.split("/")
    anchors = ["UAH", "USD", "EUR", "PLN"]
    for a in anchors:
        if a == base or a == quote:
            continue
        x = STUB_RATES.get(f"{base}/{a}")
        y = STUB_RATES.get(f"{quote}/{a}")
        if x and y:
            return x / y
        # –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –∏–Ω–≤–µ—Ä—Å–∏–∏
        xi = STUB_RATES.get(f"{a}/{base}")
        yi = STUB_RATES.get(f"{a}/{quote}")
        if xi and yi and xi != 0:
            return yi / xi
    return None


async def get_pair_rate(p: str) -> Tuple[Optional[float], str]:
    """
    –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞:
    1) —Ä—É—á–Ω–æ–π –∫—É—Ä—Å –±–∞–Ω–∫–∞ (Redis)
    2) –∑–∞–≥–ª—É—à–∫–∞ STUB_RATES
    3) None (–µ—Å–ª–∏ –≤—ã—á–∏—Å–ª–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å)
    """
    manual = await get_manual_rate(p)
    if manual is not None:
        return manual, "manual"
    s = stub_rate(p)
    if s is not None:
        return s, "stub"
    return None, "unknown"


async def set_commands() -> None:
    if not bot:
        return
    try:
        await bot.set_my_commands(
            commands=[
                BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ / –≤—ã–±–æ—Ä —Ä–æ–ª–∏"),
                BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
                BotCommand(command="menu", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
                BotCommand(command="role", description="–°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"),
                BotCommand(command="bank", description="–í—Ö–æ–¥ –±–∞–Ω–∫–∞: /bank –ø–∞—Ä–æ–ª—å"),
                BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"),
            ],
            scope=BotCommandScopeDefault(),
        )
        logger.info("Bot commands set.")
    except Exception as e:
        logger.error("set_my_commands failed: %s", e)


async def _desired_webhook_url() -> Optional[str]:
    if not WEBHOOK_BASE_URL:
        return None
    return f"{WEBHOOK_BASE_URL}{WEBHOOK_PATH}"


async def set_webhook(force: bool = False) -> None:
    """Idempotent setWebhook."""
    if not bot:
        logger.warning("Bot is None; skip set_webhook.")
        return
    desired = await _desired_webhook_url()
    if not desired:
        logger.warning("WEBHOOK_URL/RENDER_EXTERNAL_URL not set; skip webhook setup.")
        return

    try:
        info = await bot.get_webhook_info()
        current_url = (info.url or "").rstrip("/")
    except Exception as e:
        logger.warning("get_webhook_info failed: %s", e)
        current_url = ""

    if (current_url == desired.rstrip("/")) and not force:
        logger.info("Webhook already set to %s ‚Äî skip update.", desired)
        return

    try:
        used_updates: List[str] = dp.resolve_used_update_types()
        await bot.set_webhook(
            url=desired,
            secret_token=WEBHOOK_SECRET,
            drop_pending_updates=False,
            allowed_updates=used_updates,
        )
        logger.info("Webhook set to %s (allowed_updates=%s)", desired, used_updates)
    except TelegramRetryAfter as e:
        wait_s = int(getattr(e, "retry_after", 1) or 1)
        logger.warning("Rate limited on set_webhook, sleep %ss then retry once...", wait_s)
        await asyncio.sleep(wait_s)
        with suppress(Exception):
            used_updates = dp.resolve_used_update_types()
            await bot.set_webhook(
                url=desired,
                secret_token=WEBHOOK_SECRET,
                drop_pending_updates=False,
                allowed_updates=used_updates,
            )
            logger.info("Webhook set after retry to %s", desired)
    except TelegramBadRequest as e:
        logger.error("TelegramBadRequest on set_webhook: %s", e)
    except Exception as e:
        logger.exception("Failed to set webhook: %s", e)


async def watchdog_task():
    """Watchdog: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç/—á–∏–Ω–∏—Ç –≤–µ–±—Ö—É–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–µ."""
    if not ENABLE_WATCHDOG:
        return
    logger.info("Watchdog enabled (interval=%ss).", WATCHDOG_INTERVAL)
    while True:
        try:
            desired = await _desired_webhook_url()
            if not desired:
                await asyncio.sleep(WATCHDOG_INTERVAL)
                continue
            info = None
            with suppress(Exception):
                info = await bot.get_webhook_info()
            current = (info.url if info else "") or ""
            if current.rstrip("/") != desired.rstrip("/"):
                logger.warning("Watchdog: webhook mismatch (current=%s, desired=%s). Fixing...", current, desired)
                await set_webhook(force=True)
        except Exception as e:
            logger.warning("Watchdog error: %s", e)
        await asyncio.sleep(WATCHDOG_INTERVAL)

# -----------------------------
# Common handlers
# -----------------------------
@common_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.full_name)}!\n"
            f"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞–º –∏ –±–∞–Ω–∫–∞–º –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –∑–∞—è–≤–∫–∞–º–∏ –ø–æ –≤–∞–ª—é—Ç–Ω–æ–º—É —Ä—ã–Ω–∫—É.\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /bank –ø–∞—Ä–æ–ª—å ‚Äî –¥–ª—è –≤—Ö–æ–¥–∞ –±–∞–Ω–∫–∞.",
            reply_markup=make_role_keyboard(),
        )
    except Exception as e:
        logger.exception("cmd_start failed: %s", e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ /start.")


@common_router.message(Command("help"))
async def cmd_help(message: Message):
    try:
        txt = (
            "‚ÑπÔ∏è –ü–æ–º–æ—â—å\n\n"
            "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å\n"
            "/menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é\n"
            "/role ‚Äî —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å (–∫–ª–∏–µ–Ω—Ç/–±–∞–Ω–∫)\n"
            "/bank –ø–∞—Ä–æ–ª—å ‚Äî –≤—Ö–æ–¥ –¥–ª—è –±–∞–Ω–∫–∞\n"
            "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
            "–û–ø–µ—Ä–∞—Ü–∏–∏:\n"
            "‚Äî –ö—É–ø–∏—Ç—å/–ü—Ä–æ–¥–∞—Ç—å: –≤–∞–ª—é—Ç–∞ USD/EUR/PLN –ø—Ä–æ—Ç–∏–≤ UAH (–∫–ª–∏–µ–Ω—Ç –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É –∏ –°–í–û–ô –∫—É—Ä—Å).\n"
            "‚Äî –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: –≤–∞–ª—é—Ç–∞‚Üí–≤–∞–ª—é—Ç–∞ (–∫–ª–∏–µ–Ω—Ç –≤—ã–±–∏—Ä–∞–µ—Ç from/to, –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ –ò–õ–ò –ø—Ä–æ–¥–∞–∂–∏ –∏ –°–í–û–ô –∫—É—Ä—Å).\n\n"
            "–ö—É—Ä—Å—ã: –ø–∞—Ä–∞ BASE/QUOTE. –ò—Å—Ç–æ—á–Ω–∏–∫ ‚Äî —Ä—É—á–Ω–æ–π –∫—É—Ä—Å –±–∞–Ω–∫–∞ –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∞ (USDUAH, EURUAH, PLNUAH, EURUSD, EURPLN, USDPLN) —Å –∫—Ä–æ—Å—Å-—Ä–∞—Å—á—ë—Ç–æ–º."
        )
        await message.answer(txt)
    except Exception as e:
        logger.exception("cmd_help failed: %s", e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–º–æ—â–∏.")


@common_router.message(Command("menu"))
async def cmd_menu(message: Message):
    try:
        role = await get_role(message.from_user.id)
        if role == "bank":
            await message.answer("üè¶ –ú–µ–Ω—é –±–∞–Ω–∫–∞:", reply_markup=make_bank_menu())
        else:
            await message.answer("üë§ –ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=make_client_menu())
    except Exception as e:
        logger.exception("cmd_menu failed: %s", e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é.")


@common_router.message(Command("role"))
async def cmd_role(message: Message):
    try:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=make_role_keyboard())
    except Exception as e:
        logger.exception("cmd_role failed: %s", e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–∏.")


@common_router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    try:
        await state.clear()
        role = await get_role(message.from_user.id)
        kb = make_bank_menu() if role == "bank" else make_client_menu()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb)
    except Exception as e:
        logger.exception("cmd_cancel failed: %s", e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.")


@common_router.callback_query(F.data == "common:help")
async def cq_help(callback: CallbackQuery):
    try:
        await callback.message.edit_text(
            "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n"
            "‚Äî –ö–ª–∏–µ–Ω—Ç: —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É (–ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞/–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è) —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –°–í–û–ï–ì–û –∫—É—Ä—Å–∞ –ø–∞—Ä—ã.\n"
            "‚Äî –ë–∞–Ω–∫: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫—É—Ä—Å—ã –ø–∞—Ä –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∞–º–∏.\n"
            "–ö—É—Ä—Å—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –∫–∞–∫ BASE/QUOTE (–ø—Ä–∏–º–µ—Ä: USD/UAH=41.25).",
            reply_markup=make_role_keyboard(),
        )
        await safe_answer(callback)
    except Exception as e:
        logger.exception("cq_help failed: %s", e)


@common_router.callback_query(F.data == "role:choose")
async def cq_role_choose(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=make_role_keyboard())
        await safe_answer(callback)
    except Exception as e:
        logger.exception("cq_role_choose failed: %s", e)


@common_router.callback_query(F.data.startswith("role:"))
async def cq_role_set(callback: CallbackQuery):
    try:
        role = callback.data.split(":", 1)[1]
        if role not in ("client", "bank"):
            await safe_answer(callback, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å.", show_alert=True)
            return
        await set_role(callback.from_user.id, role if role == "client" else "bank")
        if role == "bank":
            await callback.message.edit_text(
                "–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: üè¶ –ë–∞–Ω–∫.\n"
                "–ï—Å–ª–∏ –µ—â—ë –Ω–µ –≤–≤–æ–¥–∏–ª–∏ –ø–∞—Ä–æ–ª—å, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /bank –ø–∞—Ä–æ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=make_bank_menu(),
            )
        else:
            await callback.message.edit_text("–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: üë§ –ö–ª–∏–µ–Ω—Ç.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=make_client_menu())
        await safe_answer(callback, "–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.exception("cq_role_set failed: %s", e)


@common_router.callback_query(F.data == "common:rates")
async def cq_show_rates(callback: CallbackQuery):
    try:
        # –°–æ–±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –ø–∞—Ä
        pairs = ["USD/UAH", "EUR/UAH", "PLN/UAH", "EUR/USD", "USD/PLN", "EUR/PLN"]
        lines = []
        for p in pairs:
            r, src = await get_pair_rate(p)
            if r:
                lines.append(f"{p}: {hcode(f'{r:.4f}')} ({src})")
            else:
                lines.append(f"{p}: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        await callback.message.edit_text(
            "–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –ø–∞—Ä:\n" + "\n".join(lines),
            reply_markup=(make_bank_menu() if await get_role(callback.from_user.id) == "bank" else make_client_menu()),
        )
        await safe_answer(callback)
    except Exception as e:
        logger.exception("cq_show_rates failed: %s", e)


# -----------------------------
# Commands: bank login
# -----------------------------
@common_router.message(Command("bank"))
async def cmd_bank(message: Message):
    try:
        parts = (message.text or "").strip().split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å: /bank –ø–∞—Ä–æ–ª—å")
            return
        if parts[1] == BANK_PASSWORD:
            await set_role(message.from_user.id, "bank")
            await message.answer("üè¶ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –±–∞–Ω–∫.", reply_markup=make_bank_menu())
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    except Exception as e:
        logger.exception("cmd_bank failed: %s", e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –±–∞–Ω–∫–∞.")
# ---------------------- FSM STATES ----------------------
class NewOrder(StatesGroup):
    choosing_type = State()
    entering_amount = State()
    entering_currency = State()
    entering_pair = State()  # —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    entering_rate = State()
    confirming = State()


# ---------------------- CLIENT: –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ----------------------
@router.message(F.text == "‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def new_order(message: Message, state: FSMContext):
    await state.set_state(NewOrder.choosing_type)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–∫—É–ø–∫–∞"), KeyboardButton(text="–ü—Ä–æ–¥–∞–∂–∞")],
            [KeyboardButton(text="–ö–æ–Ω–≤–µ—Ä—Å–∏—è")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=kb)


@router.message(NewOrder.choosing_type)
async def choose_type(message: Message, state: FSMContext):
    op = message.text.lower()
    if op not in ["–ø–æ–∫—É–ø–∫–∞", "–ø—Ä–æ–¥–∞–∂–∞", "–∫–æ–Ω–≤–µ—Ä—Å–∏—è"]:
        return await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
    await state.update_data(operation=op)
    await state.set_state(NewOrder.entering_amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=types.ReplyKeyboardRemove())


@router.message(NewOrder.entering_amount)
async def enter_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
    except ValueError:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    await state.update_data(amount=amount)

    data = await state.get_data()
    if data["operation"] == "–∫–æ–Ω–≤–µ—Ä—Å–∏—è":
        await state.set_state(NewOrder.entering_pair)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD/EUR):")
    else:
        await state.set_state(NewOrder.entering_currency)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD, EUR):")


@router.message(NewOrder.entering_currency)
async def enter_currency(message: Message, state: FSMContext):
    currency = message.text.upper()
    await state.update_data(currency=currency)
    await state.set_state(NewOrder.entering_rate)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å (–≤–∞—à –∂–µ–ª–∞–µ–º—ã–π):")


@router.message(NewOrder.entering_pair)
async def enter_pair(message: Message, state: FSMContext):
    pair = message.text.upper().replace(" ", "")
    if "/" not in pair:
        return await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: USD/EUR")
    await state.update_data(pair=pair)
    await state.set_state(NewOrder.entering_rate)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å (–≤–∞—à –∂–µ–ª–∞–µ–º—ã–π):")


@router.message(NewOrder.entering_rate)
async def enter_rate(message: Message, state: FSMContext):
    try:
        rate = float(message.text.replace(",", "."))
    except ValueError:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    await state.update_data(rate=rate)

    data = await state.get_data()
    if data["operation"] == "–∫–æ–Ω–≤–µ—Ä—Å–∏—è":
        base, quote = data["pair"].split("/")
        order = {
            "id": len(orders) + 1,
            "client": message.from_user.first_name,
            "operation": "–∫–æ–Ω–≤–µ—Ä—Å–∏—è",
            "amount": data["amount"],
            "pair": data["pair"],
            "rate": rate,
            "status": "new"
        }
        orders[order["id"]] = order
        await message.answer(
            f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞\n"
            f"üí± {order['pair']} | {order['amount']}\n"
            f"üìä –ö—É—Ä—Å –∫–ª–∏–µ–Ω—Ç–∞: {rate}",
            reply_markup=client_kb
        )
    else:
        order = {
            "id": len(orders) + 1,
            "client": message.from_user.first_name,
            "operation": data["operation"],
            "amount": data["amount"],
            "currency": data["currency"],
            "rate": rate,
            "status": "new"
        }
        orders[order["id"]] = order
        await message.answer(
            f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\n"
            f"üí± {order['operation']} {order['amount']} {order['currency']}\n"
            f"üìä –ö—É—Ä—Å –∫–ª–∏–µ–Ω—Ç–∞: {rate}",
            reply_markup=client_kb
        )

    await state.clear()

    # —É–≤–µ–¥–æ–º–∏–º –±–∞–Ω–∫
    for uid, role in user_roles.items():
        if role == "bank":
            try:
                await bot.send_message(
                    uid,
                    f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order['id']}",
                    reply_markup=bank_order_kb(order["id"])
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –±–∞–Ω–∫–∞: {e}")


# ---------------------- BANK: —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ ----------------------
@router.message(F.text == "üìã –í—Å–µ –∑–∞—è–≤–∫–∏")
async def bank_all_orders(message: Message):
    if user_roles.get(message.from_user.id) != "bank":
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    if not orders:
        return await message.answer("üì≠ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
    for order in orders.values():
        text = (
            f"üìå <b>–ó–∞—è–≤–∫–∞ #{order['id']}</b>\n"
            f"üë§ {order['client']}\n"
            f"üí± {order['operation']}\n"
        )
        if order["operation"] == "–∫–æ–Ω–≤–µ—Ä—Å–∏—è":
            text += f"üîÑ –ü–∞—Ä–∞: {order['pair']}, {order['amount']}\n"
        else:
            text += f"üíµ {order['amount']} {order['currency']}\n"
        text += f"üìä –ö—É—Ä—Å –∫–ª–∏–µ–Ω—Ç–∞: {order['rate']}\nüìç –°—Ç–∞—Ç—É—Å: {order['status']}"
        await message.answer(text, reply_markup=bank_order_kb(order["id"]))


# ---------------------- INLINE CALLBACKS ----------------------
@router.callback_query(F.data.startswith("accept:"))
async def cb_accept(call: CallbackQuery):
    oid = int(call.data.split(":")[1])
    order = orders.get(oid)
    if not order:
        return await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    order["status"] = "accepted"
    await call.message.edit_text(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ\n{order}")
    await call.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ")


@router.callback_query(F.data.startswith("reject:"))
async def cb_reject(call: CallbackQuery):
    oid = int(call.data.split(":")[1])
    order = orders.get(oid)
    if not order:
        return await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    order["status"] = "rejected"
    await call.message.edit_text(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ\n{order}")
    await call.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå")


# ---------------------- FastAPI + Webhook ----------------------
WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"


@app.on_event("startup")
async def on_startup():
    logger.info("Startup FXBankBot...")
    url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}{WEBHOOK_PATH}"
    try:
        await bot.set_webhook(url)
        logger.info(f"Webhook set {url}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")


@app.on_event("shutdown")
async def on_shutdown():
    with suppress(Exception):
        await bot.delete_webhook()
    logger.info("Shutdown complete.")


@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    update = await request.json()
    await dp.feed_webhook_update(bot, update)
    return {"ok": True}


@app.get("/")
async def root():
    return {"status": "ok", "service": "FXBankBot"}
