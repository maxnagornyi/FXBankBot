import os
import asyncio
import logging
from typing import Dict, Any

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.enums import ParseMode
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.filters import Command
import redis.asyncio as redis

# ---------------------- –õ–û–ì–ò ----------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
logger = logging.getLogger("fxbank_bot")

# ---------------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "fxbank-secret")
WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL", "https://fxbankbot.onrender.com") + WEBHOOK_PATH
PORT = int(os.getenv("PORT", "10000"))
HOST = "0.0.0.0"

# ---------------------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ----------------------
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
router = Router()

# FSM —á–µ—Ä–µ–∑ Redis
redis_conn = redis.from_url(REDIS_URL)
storage = RedisStorage(redis_conn)
dp = Dispatcher(storage=storage)
dp.include_router(router)

# ---------------------- –ö–õ–ê–í–ò–ê–¢–£–†–´ ----------------------
def main_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")],
            [KeyboardButton(text="üí± –ö—É—Ä—Å—ã")],
        ],
        resize_keyboard=True
    )

def role_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ö–ª–∏–µ–Ω—Ç", callback_data="role_client")],
        [InlineKeyboardButton(text="üè¶ –ë–∞–Ω–∫", callback_data="role_bank")]
    ])

def deal_type_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="deal_buy")],
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É", callback_data="deal_sell")],
        [InlineKeyboardButton(text="–ö–æ–Ω–≤–µ—Ä—Å–∏—è", callback_data="deal_convert")]
    ])

# ---------------------- FSM ----------------------
class ClientFSM(StatesGroup):
    entering_client_name = State()
    choosing_deal = State()
    entering_currency_from = State()
    entering_currency_to = State()
    entering_amount = State()

# ---------------------- –ö–£–†–°–´ (–∑–∞–≥–ª—É—à–∫–∞) ----------------------
def get_rates() -> Dict[str, float]:
    return {
        "USDUAH": 40.0,
        "EURUAH": 44.0,
        "PLNUAH": 10.0,
        "EURUSD": 1.08,
        "EURPLN": 4.3,
        "USDPLN": 4.0,
    }

def format_rates() -> str:
    rates = get_rates()
    return "\n".join([f"{pair}: {rate}" for pair, rate in rates.items()])

# ---------------------- –•–ï–ù–î–õ–ï–†–´ ----------------------
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FXBankBot!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=role_kb())
    except Exception as e:
        logger.error(f"cmd_start failed: {e}")

@router.message(Command("rate"))
@router.message(F.text == "üí± –ö—É—Ä—Å—ã")
async def cmd_rate(message: Message):
    try:
        await message.answer("–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:\n" + format_rates())
    except Exception as e:
        logger.error(f"cmd_rate failed: {e}")

@router.callback_query(F.data == "role_client")
async def cq_role_client(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ClientFSM.entering_client_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –§–ò–û:", reply_markup=ReplyKeyboardRemove())
    await callback.answer()

@router.callback_query(F.data == "role_bank")
async def cq_role_bank(callback: CallbackQuery):
    await callback.message.answer("–†–æ–ª—å '–ë–∞–Ω–∫' –≤—ã–±—Ä–∞–Ω–∞.\n–ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å—ã –∏ –∑–∞—è–≤–∫–∏.", reply_markup=main_kb())
    await callback.answer()

@router.message(F.text == "‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def new_deal_entry(message: Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        if "client_name" not in user_data:
            await state.set_state(ClientFSM.entering_client_name)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –§–ò–û:")
            return
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:", reply_markup=deal_type_kb())
        await state.set_state(ClientFSM.choosing_deal)
    except Exception as e:
        logger.error(f"new_deal_entry failed: {e}")

@router.message(ClientFSM.entering_client_name)
async def process_client_name(message: Message, state: FSMContext):
    await state.update_data(client_name=message.text)
    await state.set_state(ClientFSM.choosing_deal)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {message.text}! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:", reply_markup=deal_type_kb())

@router.callback_query(ClientFSM.choosing_deal, F.data.in_(["deal_buy", "deal_sell", "deal_convert"]))
async def cq_choose_deal(callback: CallbackQuery, state: FSMContext):
    try:
        deal_type = callback.data
        await state.update_data(deal_type=deal_type)
        if deal_type == "deal_convert":
            await state.set_state(ClientFSM.entering_currency_from)
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD):")
        else:
            await state.set_state(ClientFSM.entering_currency_from)
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å–¥–µ–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD):")
        await callback.answer()
    except Exception as e:
        logger.error(f"cq_choose_deal failed: {e}")

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb())

@router.message()
async def fallback_handler(message: Message, state: FSMContext):
    cur_state = await state.get_state()
    if cur_state:
        await message.answer(f"–°–µ–π—á–∞—Å —è –∂–¥—É –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è <b>{cur_state}</b>.\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏, –Ω–∞–ø–∏—à–∏—Ç–µ /cancel.")
    else:
        await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start.")

# ---------------------- FASTAPI ----------------------
app = FastAPI()

@app.on_event("startup")
async def on_startup():
    logger.info("Starting up application...")
    try:
        await bot.set_webhook(WEBHOOK_URL, allowed_updates=["message", "callback_query"])
        logger.info(f"Webhook set to {WEBHOOK_URL}")
    except Exception as e:
        logger.error(f"Failed to set webhook: {e}")

@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    try:
        update = await request.json()
        await dp.feed_update(bot, update)
    except Exception as e:
        logger.error(f"webhook failed: {e}")
    return {"ok": True}

@app.get("/")
async def health():
    return {"status": "ok"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("app:app", host=HOST, port=PORT, reload=False)
