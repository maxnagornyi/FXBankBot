import os
import logging
import asyncio
from contextlib import suppress
from decimal import Decimal
from typing import Optional, Dict, List

from fastapi import FastAPI, Request, Response, HTTPException
from pydantic import BaseModel

from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import (
    Message, Update, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.redis import RedisStorage, DefaultKeyBuilder
from aiogram.fsm.storage.memory import MemoryStorage

import redis.asyncio as aioredis


# =========================
# ENV & Logging
# =========================
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is required")

WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # e.g. https://fxbankbot.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "fxbank-secret")
REDIS_URL = os.getenv("REDIS_URL")      # rediss://default:pass@host:6379
BANK_PASSWORD = os.getenv("BANK_PASSWORD", "letmein")

HOST = "0.0.0.0"
PORT = int(os.getenv("PORT", "10000"))

# Anti-silence toggles
ASYNC_UPDATES = os.getenv("ASYNC_UPDATES", "true").lower() == "true"
STRICT_HEADER = os.getenv("STRICT_HEADER", "false").lower() == "true"
ENABLE_WATCHDOG = os.getenv("ENABLE_WATCHDOG", "true").lower() == "true"
WEBHOOK_WATCHDOG_INTERVAL = int(os.getenv("WEBHOOK_WATCHDOG_INTERVAL", "60"))

WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"

logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("FXBankBot")


# =========================
# FastAPI app
# =========================
app = FastAPI(title="FXBankBot")
app.state.mode: Optional[str] = None
app.state.watchdog_task: Optional[asyncio.Task] = None

# =========================
# Aiogram globals
# =========================
bot: Optional[Bot] = None
dp: Optional[Dispatcher] = None
router = Router()

# =========================
# Bank role sessions
# =========================
BANK_USERS = set()  # telegram user_ids with bank role (in-memory sessions)

# =========================
# FSM States (client & bank)
# =========================
class DealFSM(StatesGroup):
    client_name = State()
    operation_type = State()      # buy / sell / convert
    currency_from = State()       # for sell or convert
    currency_to = State()         # for buy or convert
    conversion_mode = State()     # for convert: "sell" or "buy"
    amount = State()              # numeric string
    rate = State()                # numeric string

class BankFSM(StatesGroup):
    counter_order_id = State()    # waiting to input counter rate for this order
    waiting_counter_rate = State()


# =========================
# Helpers
# =========================
def parse_decimal(txt: str) -> Decimal:
    s = txt.strip().replace(" ", "").replace(",", ".")
    return Decimal(s)

async def build_storage():
    if not REDIS_URL:
        log.info("REDIS_URL not set: MemoryStorage")
        return MemoryStorage()
    try:
        redis = aioredis.from_url(
            REDIS_URL,
            encoding="utf-8",
            decode_responses=True,
        )
        await redis.ping()
        log.info("Connected to Redis, using RedisStorage.")
        return RedisStorage(redis=redis, key_builder=DefaultKeyBuilder(with_bot_id=True, prefix="fxbank"))
    except Exception as e:
        log.warning(f"Redis unavailable: {e} ‚Äî fallback to MemoryStorage")
        return MemoryStorage()

def redis_conn() -> Optional[aioredis.Redis]:
    if isinstance(dp.storage, RedisStorage):
        return dp.storage.redis
    return None


# =========================
# Orders storage (Redis + memory fallback)
# =========================
ORDER_COUNTER_KEY = "order:counter"

def order_key(order_id: int) -> str:
    return f"order:{order_id}"

def orders_index_all() -> str:
    return "orders:all"

def orders_index_status(status: str) -> str:
    return f"orders:status:{status}"

# In-memory fallback
_MEM_ORDERS: Dict[int, Dict] = {}
_MEM_COUNTER: int = 0

async def _mem_next_id() -> int:
    global _MEM_COUNTER
    _MEM_COUNTER += 1
    return _MEM_COUNTER

async def order_next_id(r: Optional[aioredis.Redis]) -> int:
    if r:
        return int(await r.incr(ORDER_COUNTER_KEY))
    return await _mem_next_id()

async def order_create(payload: Dict) -> int:
    r = redis_conn()
    oid = await order_next_id(r)
    data = {
        "id": str(oid),
        "status": payload.get("status", "new"),
        "client_id": str(payload["client_id"]),
        "client_name": payload.get("client_name", ""),
        "operation": payload.get("operation", ""),
        "currency_from": payload.get("currency_from", "") or "",
        "currency_to": payload.get("currency_to", "") or "",
        "conversion_mode": payload.get("conversion_mode", "") or "",
        "amount": payload.get("amount", ""),
        "rate": payload.get("rate", ""),
        "proposed_rate": payload.get("proposed_rate", ""),
    }
    if r:
        await r.hset(order_key(oid), mapping=data)
        await r.sadd(orders_index_all(), oid)
        await r.sadd(orders_index_status(data["status"]), oid)
    else:
        _MEM_ORDERS[oid] = data
    return oid

async def order_get(oid: int) -> Optional[Dict]:
    r = redis_conn()
    if r:
        data = await r.hgetall(order_key(oid))
        return data or None
    return _MEM_ORDERS.get(oid)

async def order_change_status(oid: int, new_status: str, extra: Dict = None) -> Optional[Dict]:
    r = redis_conn()
    if r:
        k = order_key(oid)
        exists = await r.exists(k)
        if not exists:
            return None
        old_status = await r.hget(k, "status")
        pipe = r.pipeline()
        pipe.hset(k, "status", new_status)
        if extra:
            pipe.hset(k, mapping=extra)
        pipe.srem(orders_index_status(old_status or "new"), oid)
        pipe.sadd(orders_index_status(new_status), oid)
        await pipe.execute()
        return await r.hgetall(k)
    # memory flow
    o = _MEM_ORDERS.get(oid)
    if not o:
        return None
    o["status"] = new_status
    if extra:
        o.update(extra)
    _MEM_ORDERS[oid] = o
    return o

async def orders_list(status: Optional[str] = None, limit: int = 50, client_id: Optional[int] = None) -> List[Dict]:
    r = redis_conn()
    if r:
        if status and status != "all":
            ids = list(await r.smembers(orders_index_status(status)))
        else:
            ids = list(await r.smembers(orders_index_all()))
        try:
            ids_sorted = sorted((int(x) for x in ids))
        except Exception:
            ids_sorted = ids
        result: List[Dict] = []
        for oid in ids_sorted[:limit]:
            data = await r.hgetall(order_key(int(oid)))
            if data:
                if client_id and str(client_id) != data.get("client_id"):
                    continue
                result.append(data)
        return result
    # memory flow
    items = list(_MEM_ORDERS.items())
    items.sort(key=lambda kv: int(kv[0]))
    rows: List[Dict] = []
    for oid, data in items:
        if status and status != "all" and data.get("status") != status:
            continue
        if client_id and str(client_id) != data.get("client_id"):
            continue
        rows.append(data)
        if len(rows) >= limit:
            break
    return rows


# =========================
# Keyboards
# =========================
client_main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí± –ö—É—Ä—Å—ã"), KeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")],
        [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")],
    ],
    resize_keyboard=True
)

client_order_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üíµ –ü—Ä–æ–¥–∞–∂–∞"), KeyboardButton(text="üí∏ –ü–æ–∫—É–ø–∫–∞")],
        [KeyboardButton(text="üîÑ –ö–æ–Ω–≤–µ—Ä—Å–∏—è")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True
)

bank_main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏"), KeyboardButton(text="üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—ã–µ"), KeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ")],
        [KeyboardButton(text="üìå –û—Ä–¥–µ—Ä—ã"), KeyboardButton(text="üí± –ö—É—Ä—Å—ã")],
    ],
    resize_keyboard=True
)

def bank_order_actions_kb(oid: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"bank:accept:{oid}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"bank:reject:{oid}"),
            ],
            [
                InlineKeyboardButton(text="üíπ –ö–æ–Ω—Ç—Ä-–∫—É—Ä—Å", callback_data=f"bank:counter:{oid}"),
                InlineKeyboardButton(text="üìå –û—Ñ–æ—Ä–º–∏—Ç—å –æ—Ä–¥–µ—Ä", callback_data=f"bank:order:{oid}"),
            ],
        ]
    )

def client_counter_choice_kb(oid: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∫—É—Ä—Å", callback_data=f"client:accept:{oid}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"client:reject:{oid}"),
            ]
        ]
    )


# =========================
# Handlers ‚Äî CLIENT (with FSM)
# =========================
@router.message(CommandStart())
@router.message(Command("start"))
@router.message(StateFilter("*"), F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(DealFSM.client_name)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø FXBankBot.\n\n"
        "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞</b>.",
        parse_mode=ParseMode.HTML,
        reply_markup=client_main_kb
    )

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
@router.message(Command("new"))
@router.message(F.text == "‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def start_new_order(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("client_name"):
        await state.set_state(DealFSM.client_name)
        return await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞</b> –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—è–≤–∫–∏.",
            parse_mode=ParseMode.HTML
        )
    await state.set_state(DealFSM.operation_type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=client_order_kb)

@router.message(DealFSM.client_name, F.text)
async def h_client_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        return await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
    await state.update_data(client_name=name)
    await state.set_state(DealFSM.operation_type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=client_order_kb)

# –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(StateFilter(None), F.text.in_(["üíµ –ü—Ä–æ–¥–∞–∂–∞", "üí∏ –ü–æ–∫—É–ø–∫–∞", "üîÑ –ö–æ–Ω–≤–µ—Ä—Å–∏—è"]))
@router.message(StateFilter("*"), F.text.in_(["üíµ –ü—Ä–æ–¥–∞–∂–∞", "üí∏ –ü–æ–∫—É–ø–∫–∞", "üîÑ –ö–æ–Ω–≤–µ—Ä—Å–∏—è"]))
async def op_choice_any_state(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("client_name"):
        await state.clear()
        await state.set_state(DealFSM.client_name)
        return await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞</b>.", parse_mode=ParseMode.HTML)

    await state.set_state(DealFSM.operation_type)
    t = message.text
    if t == "üíµ –ü—Ä–æ–¥–∞–∂–∞":
        await state.update_data(operation="sell")
        await state.set_state(DealFSM.currency_from)
        return await message.answer("–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É —Ö–æ—Ç–∏—Ç–µ <b>–ø—Ä–æ–¥–∞—Ç—å</b>? (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD, EUR)", parse_mode=ParseMode.HTML)
    if t == "üí∏ –ü–æ–∫—É–ø–∫–∞":
        await state.update_data(operation="buy")
        await state.set_state(DealFSM.currency_to)
        return await message.answer("–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É —Ö–æ—Ç–∏—Ç–µ <b>–∫—É–ø–∏—Ç—å</b>? (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD, EUR)", parse_mode=ParseMode.HTML)
    if t == "üîÑ –ö–æ–Ω–≤–µ—Ä—Å–∏—è":
        await state.update_data(operation="convert")
        await state.set_state(DealFSM.currency_from)
        return await message.answer("–ö–æ–Ω–≤–µ—Ä—Å–∏—è: —É–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é <b>–ø—Ä–æ–¥–∞—ë—Ç–µ</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: EUR)", parse_mode=ParseMode.HTML)

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=client_main_kb)

# --- SELL / CONVERT from ---
@router.message(DealFSM.currency_from, F.text)
async def h_currency_from(message: Message, state: FSMContext):
    cur = message.text.strip().upper()
    if len(cur) not in (3, 4):
        return await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã. –ü—Ä–∏–º–µ—Ä: USD, EUR.")
    await state.update_data(currency_from=cur)
    data = await state.get_data()
    op = data.get("operation")
    if op == "sell":
        await state.set_state(DealFSM.amount)
        return await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {cur}, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ <b>–ø—Ä–æ–¥–∞—Ç—å</b>.", parse_mode=ParseMode.HTML)
    if op == "convert":
        await state.set_state(DealFSM.currency_to)
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é <b>—Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD).", parse_mode=ParseMode.HTML)

# --- BUY / CONVERT target ---
@router.message(DealFSM.currency_to, F.text)
async def h_currency_to(message: Message, state: FSMContext):
    cur = message.text.strip().upper()
    if len(cur) not in (3, 4):
        return await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã. –ü—Ä–∏–º–µ—Ä: USD, EUR.")
    await state.update_data(currency_to=cur)
    data = await state.get_data()
    op = data.get("operation")
    if op == "buy":
        await state.set_state(DealFSM.amount)
        return await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {cur}, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ <b>–∫—É–ø–∏—Ç—å</b>.", parse_mode=ParseMode.HTML)
    if op == "convert":
        await state.set_state(DealFSM.conversion_mode)
        sell_cur = data.get("currency_from")
        buy_cur = cur
        return await message.answer(
            "–ö–∞–∫ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏?\n"
            f"1Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ <b>–ø—Ä–æ–¥–∞—ë—Ç–µ</b> {sell_cur}\n"
            f"2Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ <b>–ø–æ–∫—É–ø–∞–µ—Ç–µ</b> {buy_cur}",
            parse_mode=ParseMode.HTML,
        )

@router.message(DealFSM.conversion_mode, F.text)
async def h_conv_mode(message: Message, state: FSMContext):
    t = message.text.strip()
    if t.startswith("1"):
        await state.update_data(conversion_mode="sell")
        await state.set_state(DealFSM.amount)
        data = await state.get_data()
        return await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {data.get('currency_from')} –¥–ª—è <b>–ø—Ä–æ–¥–∞–∂–∏</b>.", parse_mode=ParseMode.HTML)
    if t.startswith("2"):
        await state.update_data(conversion_mode="buy")
        await state.set_state(DealFSM.amount)
        data = await state.get_data()
        return await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {data.get('currency_to')} –¥–ª—è <b>–ø–æ–∫—É–ø–∫–∏</b>.", parse_mode=ParseMode.HTML)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ 1 (—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞—ë—Ç–µ) –∏–ª–∏ 2 (—Å–∫–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞–µ—Ç–µ).")

@router.message(DealFSM.amount, F.text)
async def h_amount(message: Message, state: FSMContext):
    try:
        parse_decimal(message.text)
    except Exception:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 1000000 –∏–ª–∏ 1 000 000,00.")
    await state.update_data(amount=message.text.strip())
    await state.set_state(DealFSM.rate)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–∫—É—Ä—Å</b> –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.", parse_mode=ParseMode.HTML)

@router.message(DealFSM.rate, F.text)
async def h_rate(message: Message, state: FSMContext):
    try:
        parse_decimal(message.text)
    except Exception:
        return await message.answer("–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: 41.25")
    await state.update_data(rate=message.text.strip())
    data = await state.get_data()

    payload = {
        "client_id": message.from_user.id,
        "client_name": data.get("client_name"),
        "operation": data.get("operation"),
        "currency_from": data.get("currency_from") or "",
        "currency_to": data.get("currency_to") or "",
        "conversion_mode": data.get("conversion_mode") or "",
        "amount": data.get("amount"),
        "rate": data.get("rate"),
        "status": "new",
    }
    oid = await order_create(payload)
    order = await order_get(oid)
    await state.clear()

    # summary
    op = order["operation"]
    if op == "buy":
        summary = (
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{oid}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {order['client_name']}\n"
            f"–û–ø–µ—Ä–∞—Ü–∏—è: –ü–æ–∫—É–ø–∫–∞\n"
            f"–ö—É–ø–∏—Ç—å: {order['amount']} {order['currency_to']}\n"
            f"–ö—É—Ä—Å: {order['rate']}\n"
            f"–°—Ç–∞—Ç—É—Å: {order['status']}"
        )
    elif op == "sell":
        summary = (
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{oid}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {order['client_name']}\n"
            f"–û–ø–µ—Ä–∞—Ü–∏—è: –ü—Ä–æ–¥–∞–∂–∞\n"
            f"–ü—Ä–æ–¥–∞—Ç—å: {order['amount']} {order['currency_from']}\n"
            f"–ö—É—Ä—Å: {order['rate']}\n"
            f"–°—Ç–∞—Ç—É—Å: {order['status']}"
        )
    else:
        mode = "–ü—Ä–æ–¥–∞—é" if (order.get("conversion_mode") or "") == "sell" else "–ü–æ–∫—É–ø–∞—é"
        cur = order["currency_from"] if mode == "–ü—Ä–æ–¥–∞—é" else order["currency_to"]
        summary = (
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{oid}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {order['client_name']}\n"
            f"–û–ø–µ—Ä–∞—Ü–∏—è: –ö–æ–Ω–≤–µ—Ä—Å–∏—è {order['currency_from']}‚Üí{order['currency_to']}\n"
            f"{mode}: {order['amount']} {cur}\n"
            f"–ö—É—Ä—Å: {order['rate']}\n"
            f"–°—Ç–∞—Ç—É—Å: {order['status']}"
        )

    await message.answer(summary)

    # notify bank users (—Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π)
    for uid in list(BANK_USERS):
        with suppress(Exception):
            await bot.send_message(uid, f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{oid}\n\n{summary}", reply_markup=bank_order_actions_kb(oid))


# =========================
# Rates stub (common)
# =========================
@router.message(Command("rate"))
@router.message(F.text == "üí± –ö—É—Ä—Å—ã")
async def cmd_rate(message: Message):
    text = (
        "üí± –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã (–∑–∞–≥–ª—É—à–∫–∞):\n"
        "USD/UAH = 41.25\n"
        "EUR/UAH = 45.10\n"
        "PLN/UAH = 10.60\n"
        "EUR/USD = 1.0920\n"
        "PLN/USD = 0.2580\n"
    )
    await message.answer(text)


# =========================
# CLIENT ‚Äî "–ú–æ–∏ –∑–∞—è–≤–∫–∏"
# =========================
@router.message(F.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def client_my_orders(message: Message):
    lst = await orders_list(status="all", client_id=message.from_user.id)
    if not lst:
        return await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
    lines = ["üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:"]
    for o in lst:
        op = o.get("operation")
        if op == "buy":
            desc = f"–ü–æ–∫—É–ø–∫–∞ {o.get('amount')} {o.get('currency_to')}"
        elif op == "sell":
            desc = f"–ü—Ä–æ–¥–∞–∂–∞ {o.get('amount')} {o.get('currency_from')}"
        else:
            cm = o.get("conversion_mode")
            if cm == "sell":
                desc = f"–ö–æ–Ω–≤–µ—Ä—Å–∏—è {o.get('currency_from')}‚Üí{o.get('currency_to')} | –ø—Ä–æ–¥–∞—ë—Ç–µ {o.get('amount')} {o.get('currency_from')}"
            else:
                desc = f"–ö–æ–Ω–≤–µ—Ä—Å–∏—è {o.get('currency_from')}‚Üí{o.get('currency_to')} | –ø–æ–∫—É–ø–∞–µ—Ç–µ {o.get('amount')} {o.get('currency_to')}"
        pr = o.get("proposed_rate")
        pr_txt = f", –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –∫—É—Ä—Å: {pr}" if pr else ""
        lines.append(f"#{o.get('id')}: {desc} @ {o.get('rate')} | {o.get('status')}{pr_txt}")
    await message.answer("\n".join(lines))


# =========================
# Bank role ‚Äî login & lists
# =========================
@router.message(Command("bank"))
async def bank_login(message: Message):
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) == 2 and parts[1] == BANK_PASSWORD:
        BANK_USERS.add(message.from_user.id)
        return await message.answer(
            "üè¶ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –±–∞–Ω–∫.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π:\n"
            "‚Ä¢ /orders [all|new|accepted|rejected|confirmed]\n"
            "‚Ä¢ /view <id>\n‚Ä¢ /accept <id>\n‚Ä¢ /reject <id>\n‚Ä¢ /counter <id> [rate]\n‚Ä¢ /order <id>",
            reply_markup=bank_main_kb
        )
    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /bank <–ø–∞—Ä–æ–ª—å>")

def _render_order_line(o: Dict) -> str:
    op = o.get("operation")
    if op == "buy":
        desc = f"–ü–æ–∫—É–ø–∫–∞ {o.get('amount')} {o.get('currency_to')}"
    elif op == "sell":
        desc = f"–ü—Ä–æ–¥–∞–∂–∞ {o.get('amount')} {o.get('currency_from')}"
    else:
        cm = o.get("conversion_mode")
        if cm == "sell":
            desc = f"–ö–æ–Ω–≤–µ—Ä—Å–∏—è {o.get('currency_from')}‚Üí{o.get('currency_to')} | –ø—Ä–æ–¥–∞—ë—Ç {o.get('amount')} {o.get('currency_from')}"
        else:
            desc = f"–ö–æ–Ω–≤–µ—Ä—Å–∏—è {o.get('currency_from')}‚Üí{o.get('currency_to')} | –ø–æ–∫—É–ø–∞–µ—Ç {o.get('amount')} {o.get('currency_to')}"
    rate = o.get("rate", "")
    status = o.get("status", "")
    pid = o.get("id")
    pr = o.get("proposed_rate")
    pr_txt = f" | –ø—Ä–µ–¥–ª–æ–∂–µ–Ω {pr}" if pr else ""
    return f"#{pid}: {desc} @ {rate} | {status}{pr_txt}"

@router.message(Command("orders"))
@router.message(F.text.in_(["üìã –í—Å–µ –∑–∞—è–≤–∫–∏", "üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", "‚úÖ –ü—Ä–∏–Ω—è—Ç—ã–µ", "‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ", "üìå –û—Ä–¥–µ—Ä—ã"]))
async def bank_orders(message: Message):
    if message.from_user.id not in BANK_USERS:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    label_map = {
        "üìã –í—Å–µ –∑–∞—è–≤–∫–∏": "all",
        "üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏": "new",
        "‚úÖ –ü—Ä–∏–Ω—è—Ç—ã–µ": "accepted",
        "‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ": "rejected",
        "üìå –û—Ä–¥–µ—Ä—ã": "confirmed"
    }
    status = None
    if message.text in label_map:
        status = label_map[message.text]
    else:
        parts = message.text.strip().split(maxsplit=1)
        if len(parts) == 2:
            st = parts[1].strip().lower()
            if st in {"all", "new", "accepted", "rejected", "confirmed"}:
                status = st
            else:
                return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /orders [all|new|accepted|rejected|confirmed]")
        else:
            status = "new"

    lst = await orders_list(status=None if status == "all" else status)
    if not lst:
        return await message.answer("–ó–∞—è–≤–æ–∫ –Ω–µ—Ç.")

    # –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥)
    kb_rows: List[List[InlineKeyboardButton]] = []
    row: List[InlineKeyboardButton] = []
    ids_text = []
    for o in lst:
        oid = int(o["id"])
        ids_text.append(str(oid))
        btn = InlineKeyboardButton(
            text=f"#{oid} | {o['status']}",
            callback_data=f"bank:view:{oid}"
        )
        row.append(btn)
        if len(row) == 2:
            kb_rows.append(row)
            row = []
    if row:
        kb_rows.append(row)
    kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)

    # –ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ inline –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —É –∫–ª–∏–µ–Ω—Ç–∞
    help_text = "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –Ω–∏–∂–µ.\n–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–∂–∏–º–∞—é—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/view ID</code>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /view " + (ids_text[0] if ids_text else "1")
    await message.answer(help_text, parse_mode=ParseMode.HTML, reply_markup=kb)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –µ—Å–ª–∏ –±–∞–Ω–∫–∏—Ä –Ω–∞–ø–∏—à–µ—Ç –≤—Ä—É—á–Ω—É—é "#1" –∏–ª–∏ "–û—Ç–∫—Ä—ã—Ç—å #1" ‚Äî –æ—Ç–∫—Ä–æ–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
@router.message(F.text.regexp(r"^(–û—Ç–∫—Ä—ã—Ç—å\s+)?#?\d+$"))
async def bank_open_by_text(message: Message):
    if message.from_user.id not in BANK_USERS:
        return
    txt = message.text.replace("–û—Ç–∫—Ä—ã—Ç—å", "").strip().lstrip("#").strip()
    if not txt.isdigit():
        return
    oid = int(txt)
    o = await order_get(oid)
    if not o:
        return await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await _send_order_card(message, o)

# –ü—Ä—è–º–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /view <id>
@router.message(Command("view"))
async def bank_view_cmd(message: Message):
    if message.from_user.id not in BANK_USERS:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) != 2 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /view <id>")
    oid = int(parts[1])
    o = await order_get(oid)
    if not o:
        return await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await _send_order_card(message, o)

async def _send_order_card(message_or_cb, o: Dict):
    oid = int(o["id"])
    op = o.get("operation")
    if op == "buy":
        desc = f"–ö—É–ø–∏—Ç—å: {o.get('amount')} {o.get('currency_to')}"
    elif op == "sell":
        desc = f"–ü—Ä–æ–¥–∞—Ç—å: {o.get('amount')} {o.get('currency_from')}"
    else:
        cm = o.get("conversion_mode")
        if cm == "sell":
            desc = f"–ö–æ–Ω–≤–µ—Ä—Å–∏—è {o.get('currency_from')}‚Üí{o.get('currency_to')} | –ø—Ä–æ–¥–∞—ë—Ç {o.get('amount')} {o.get('currency_from')}"
        else:
            desc = f"–ö–æ–Ω–≤–µ—Ä—Å–∏—è {o.get('currency_from')}‚Üí{o.get('currency_to')} | –ø–æ–∫—É–ø–∞–µ—Ç {o.get('amount')} {o.get('currency_to')}"
    pr = o.get("proposed_rate")
    pr_txt = f"\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –∫—É—Ä—Å: {pr}" if pr else ""
    text = (
        f"–ó–∞—è–≤–∫–∞ #{oid}\n"
        f"–ö–ª–∏–µ–Ω—Ç: {o.get('client_name')}\n"
        f"–û–ø–µ—Ä–∞—Ü–∏—è: {op}\n"
        f"{desc}\n"
        f"–ö—É—Ä—Å –∫–ª–∏–µ–Ω—Ç–∞: {o.get('rate')}\n"
        f"–°—Ç–∞—Ç—É—Å: {o.get('status')}{pr_txt}"
    )
    # message_or_cb –º–æ–∂–µ—Ç –±—ã—Ç—å Message –∏–ª–∏ CallbackQuery.message
    if isinstance(message_or_cb, Message):
        await message_or_cb.answer(text, reply_markup=bank_order_actions_kb(oid))
    elif isinstance(message_or_cb, CallbackQuery):
        await message_or_cb.message.edit_text(text)
        await message_or_cb.message.edit_reply_markup(reply_markup=bank_order_actions_kb(oid))
        await message_or_cb.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî callback
@router.callback_query(F.data.startswith("bank:view:"))
async def bank_view_order(cb: CallbackQuery):
    if cb.from_user.id not in BANK_USERS:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    oid = int(cb.data.split(":")[2])
    o = await order_get(oid)
    if not o:
        return await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    await _send_order_card(cb, o)

# –î–µ–π—Å—Ç–≤–∏—è –±–∞–Ω–∫–∞: –ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å/–∫–æ–Ω—Ç—Ä/–æ—Ä–¥–µ—Ä ‚Äî —á–µ—Ä–µ–∑ callback
@router.callback_query(F.data.startswith("bank:accept:"))
async def bank_accept_cb(cb: CallbackQuery):
    if cb.from_user.id not in BANK_USERS:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    oid = int(cb.data.split(":")[2])
    o = await order_get(oid)
    if not o:
        return await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    o = await order_change_status(oid, "accepted", {"proposed_rate": ""})
    await cb.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")
    with suppress(Exception):
        await bot.send_message(int(o["client_id"]), f"üè¶ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{oid} –ø—Ä–∏–Ω—è—Ç–∞ –±–∞–Ω–∫–æ–º.")
    return await bank_view_order(cb)

@router.callback_query(F.data.startswith("bank:reject:"))
async def bank_reject_cb(cb: CallbackQuery):
    if cb.from_user.id not in BANK_USERS:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    oid = int(cb.data.split(":")[2])
    o = await order_get(oid)
    if not o:
        return await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    o = await order_change_status(oid, "rejected", {"proposed_rate": ""})
    await cb.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    with suppress(Exception):
        await bot.send_message(int(o["client_id"]), f"üè¶ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{oid} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–∞–Ω–∫–æ–º.")
    return await bank_view_order(cb)

@router.callback_query(F.data.startswith("bank:order:"))
async def bank_order_cb(cb: CallbackQuery):
    if cb.from_user.id not in BANK_USERS:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    oid = int(cb.data.split(":")[2])
    o = await order_get(oid)
    if not o:
        return await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    o = await order_change_status(oid, "confirmed")
    await cb.answer("–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –æ—Ä–¥–µ—Ä")
    with suppress(Exception):
        await bot.send_message(int(o["client_id"]), f"üè¶ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{oid} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞.")
    return await bank_view_order(cb)

# –ö–æ–Ω—Ç—Ä-–∫—É—Ä—Å ‚Äî –∑–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ (callback ‚Üí –∂–¥—ë–º –≤–≤–æ–¥)
@router.callback_query(F.data.startswith("bank:counter:"))
async def bank_counter_cb(cb: CallbackQuery, state: FSMContext):
    if cb.from_user.id not in BANK_USERS:
        return await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    oid = int(cb.data.split(":")[2])
    o = await order_get(oid)
    if not o:
        return await cb.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    await state.set_state(BankFSM.waiting_counter_rate)
    await state.update_data(counter_order_id=oid)
    await cb.answer()
    await cb.message.reply(f"üíπ –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç—Ä-–∫—É—Ä—Å –¥–ª—è –∑–∞—è–≤–∫–∏ #{oid} (—á–∏—Å–ª–æ).")

@router.message(BankFSM.waiting_counter_rate, F.text)
async def bank_counter_rate_input(message: Message, state: FSMContext):
    if message.from_user.id not in BANK_USERS:
        await state.clear()
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    data = await state.get_data()
    oid = int(data.get("counter_order_id", 0))
    if not oid:
        await state.clear()
        return await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä-–∫—É—Ä—Å–∞.")
    try:
        rate = parse_decimal(message.text)
    except Exception:
        return await message.answer("–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: 40.25")
    o = await order_get(oid)
    if not o:
        await state.clear()
        return await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    o = await order_change_status(oid, "rejected", {"proposed_rate": str(rate)})
    await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç—Ä-–∫—É—Ä—Å {rate} –ø–æ –∑–∞—è–≤–∫–µ #{oid}. –°—Ç–∞—Ç—É—Å: rejected")
    with suppress(Exception):
        await bot.send_message(
            int(o["client_id"]),
            f"üè¶ –ë–∞–Ω–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–æ–≤—ã–π –∫—É—Ä—Å –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ #{oid}: <b>{rate}</b>",
            parse_mode=ParseMode.HTML,
            reply_markup=client_counter_choice_kb(oid)
        )
    await state.clear()

# ====== –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–∞–Ω–∫–∞ (fallback, –µ—Å–ª–∏ inline –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç) ======
@router.message(Command("accept"))
async def bank_accept_cmd(message: Message):
    if message.from_user.id not in BANK_USERS:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /accept <id>")
    oid = int(parts[1])
    o = await order_get(oid)
    if not o:
        return await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞—è–≤–∫–∏.")
    await order_change_status(oid, "accepted", {"proposed_rate": ""})
    await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ #{oid} –ø—Ä–∏–Ω—è—Ç–∞.")
    with suppress(Exception):
        await bot.send_message(int(o["client_id"]), f"üè¶ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{oid} –ø—Ä–∏–Ω—è—Ç–∞ –±–∞–Ω–∫–æ–º.")

@router.message(Command("reject"))
async def bank_reject_cmd(message: Message):
    if message.from_user.id not in BANK_USERS:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reject <id>")
    oid = int(parts[1])
    o = await order_get(oid)
    if not o:
        return await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞—è–≤–∫–∏.")
    await order_change_status(oid, "rejected", {"proposed_rate": ""})
    await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{oid} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

@router.message(Command("counter"))
async def bank_counter_cmd(message: Message, state: FSMContext):
    if message.from_user.id not in BANK_USERS:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    parts = message.text.strip().split()
    if len(parts) < 2 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /counter <id> [rate]")
    oid = int(parts[1])
    rate_str = parts[2] if len(parts) >= 3 else None
    o = await order_get(oid)
    if not o:
        return await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞—è–≤–∫–∏.")
    if rate_str is None:
        await state.set_state(BankFSM.waiting_counter_rate)
        await state.update_data(counter_order_id=oid)
        return await message.answer(f"üíπ –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç—Ä-–∫—É—Ä—Å –¥–ª—è –∑–∞—è–≤–∫–∏ #{oid} (—á–∏—Å–ª–æ).")
    else:
        try:
            rate = parse_decimal(rate_str)
        except Exception:
            return await message.answer("–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /counter 1 40.25")
        await order_change_status(oid, "rejected", {"proposed_rate": str(rate)})
        await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç—Ä-–∫—É—Ä—Å {rate} –ø–æ –∑–∞—è–≤–∫–µ #{oid}. –°—Ç–∞—Ç—É—Å: rejected")
        with suppress(Exception):
            await bot.send_message(
                int(o["client_id"]),
                f"üè¶ –ë–∞–Ω–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–æ–≤—ã–π –∫—É—Ä—Å –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ #{oid}: <b>{rate}</b>",
                parse_mode=ParseMode.HTML,
                reply_markup=client_counter_choice_kb(oid)
            )

@router.message(Command("order"))
async def bank_order_cmd(message: Message):
    if message.from_user.id not in BANK_USERS:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /order <id>")
    oid = int(parts[1])
    o = await order_get(oid)
    if not o:
        return await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∑–∞—è–≤–∫–∏.")
    await order_change_status(oid, "confirmed")
    await message.answer(f"üìå –ó–∞—è–≤–∫–∞ #{oid} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –æ—Ä–¥–µ—Ä.")
    with suppress(Exception):
        await bot.send_message(int(o["client_id"]), f"üè¶ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{oid} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞.")

# –ö–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–Ω—Ç—Ä-–∫—É—Ä—Å
@router.callback_query(F.data.startswith("client:accept:"))
async def client_accept_counter(cb: CallbackQuery):
    oid = int(cb.data.split(":")[2])
    o = await order_get(oid)
    if not o or str(cb.from_user.id) != str(o.get("client_id")):
        return await cb.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
    new_rate = o.get("proposed_rate") or o.get("rate")
    await order_change_status(oid, "accepted", {"rate": new_rate, "proposed_rate": ""})
    await cb.answer("–ö—É—Ä—Å –ø—Ä–∏–Ω—è—Ç")
    await cb.message.edit_reply_markup(reply_markup=None)
    with suppress(Exception):
        for uid in list(BANK_USERS):
            await bot.send_message(uid, f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω—è–ª –∫–æ–Ω—Ç—Ä-–∫—É—Ä—Å –ø–æ –∑–∞—è–≤–∫–µ #{oid}. –ò—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å: {new_rate}")

@router.callback_query(F.data.startswith("client:reject:"))
async def client_reject_counter(cb: CallbackQuery):
    oid = int(cb.data.split(":")[2])
    o = await order_get(oid)
    if not o or str(cb.from_user.id) != str(o.get("client_id")):
        return await cb.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
    await order_change_status(oid, "rejected", {"proposed_rate": ""})
    await cb.answer("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
    await cb.message.edit_reply_markup(reply_markup=None)
    with suppress(Exception):
        for uid in list(BANK_USERS):
            await bot.send_message(uid, f"‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–∏–ª –∫–æ–Ω—Ç—Ä-–∫—É—Ä—Å –ø–æ –∑–∞—è–≤–∫–µ #{oid}.")


# =========================
# Service utils
# =========================
@router.message(Command("status"))
async def cmd_status(message: Message):
    storage_type = type(dp.storage).__name__ if dp else "unknown"
    text = f"üîé Mode: <b>{app.state.mode}</b>\nStorage: <b>{storage_type}</b>"
    if isinstance(dp.storage, RedisStorage):
        try:
            pong = await dp.storage.redis.ping()
            text += f"\nRedis ping: <b>{'ok' if pong else 'fail'}</b>"
        except Exception as e:
            text += f"\nRedis error: <code>{e!r}</code>"
    await message.answer(text, parse_mode=ParseMode.HTML)

@router.message(Command("restart"))
async def cmd_restart(message: Message, state: FSMContext):
    await state.clear()
    with suppress(Exception):
        await bot.delete_webhook(drop_pending_updates=True)
    full = f"{WEBHOOK_URL.rstrip('/')}{WEBHOOK_PATH}"
    await bot.set_webhook(url=full, secret_token=WEBHOOK_SECRET, drop_pending_updates=True)
    await message.answer("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

@router.message(Command("ping"))
async def cmd_ping(message: Message):
    await message.answer("pong")


# =========================
# FastAPI endpoints
# =========================
class Health(BaseModel):
    status: str = "ok"
    mode: Optional[str] = None

@app.get("/", response_model=Health)
async def health():
    return Health(status="ok", mode=app.state.mode)

@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ:
    # - –ø—Ä–∏ STRICT_HEADER=True ‚Äî —Å—Ç—Ä–æ–≥–æ
    # - –ø—Ä–∏ STRICT_HEADER=False ‚Äî –º—è–≥–∫–æ (–µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ —Å–æ–≤–ø–∞–ª ‚Äî 403; –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
    if STRICT_HEADER:
        secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
        if secret != WEBHOOK_SECRET:
            raise HTTPException(status_code=403, detail="Invalid secret token header")
    else:
        secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
        if secret and secret != WEBHOOK_SECRET:
            raise HTTPException(status_code=403, detail="Invalid secret token header")

    data = await request.json()
    try:
        upd = Update.model_validate(data, context={"bot": bot})
    except Exception as e:
        log.warning("Bad update payload: %r", e, exc_info=True)
        return Response(status_code=200)

    async def _process_update(update: Update):
        try:
            await dp.feed_update(bot, update)
        except Exception as e:
            log.error("Update processing failed: %r", e, exc_info=True)

    if ASYNC_UPDATES:
        asyncio.create_task(_process_update(upd))
        return Response(status_code=200)
    else:
        await _process_update(upd)
        return Response(status_code=200)


# =========================
# Webhook watchdog (—Ñ–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
# =========================
async def webhook_watchdog():
    await asyncio.sleep(5)
    target = f"{WEBHOOK_URL.rstrip('/')}{WEBHOOK_PATH}"
    while True:
        try:
            info = await bot.get_webhook_info()
            if not info.url or info.url != target:
                log.warning("Webhook mismatch (%s) -> resetting to %s", info.url, target)
                with suppress(Exception):
                    await bot.delete_webhook(drop_pending_updates=False)
                await bot.set_webhook(url=target, secret_token=WEBHOOK_SECRET, drop_pending_updates=False)
                log.info("Webhook re-set to %s", target)
        except Exception as e:
            log.warning("Watchdog check failed: %r", e)
        await asyncio.sleep(WEBHOOK_WATCHDOG_INTERVAL)


# =========================
# FastAPI lifecycle
# =========================
@app.on_event("startup")
async def on_startup():
    global bot, dp
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    storage = await build_storage()
    dp = Dispatcher(storage=storage)
    dp.include_router(router)  # –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –û–î–ò–ù –†–ê–ó

    # —Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫
    full = f"{WEBHOOK_URL.rstrip('/')}{WEBHOOK_PATH}"
    with suppress(Exception):
        await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(
        url=full,
        secret_token=WEBHOOK_SECRET,
        drop_pending_updates=True,
    )
    app.state.mode = "webhook"
    log.info(f"Webhook set to {full}")

    # –∑–∞–ø—É—Å–∫–∞–µ–º watchdog (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω)
    if ENABLE_WATCHDOG:
        app.state.watchdog_task = asyncio.create_task(webhook_watchdog())

@app.on_event("shutdown")
async def on_shutdown():
    if app.state.watchdog_task:
        app.state.watchdog_task.cancel()
    with suppress(Exception):
        await bot.session.close()
    log.info("Shutdown complete.")
