import os
import logging
from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.filters import Command
from fastapi import FastAPI, Request
import uvicorn

# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
logger = logging.getLogger("fxbank_bot")

# -------------------- –ù–ê–°–¢–†–û–ô–ö–ò --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "fxbank-secret")
WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://fxbankbot.onrender.com")
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")

WEBHOOK_URL = f"{WEBAPP_URL}{WEBHOOK_PATH}"

# -------------------- FSM --------------------
class ClientFSM(StatesGroup):
    client_name = State()
    operation = State()
    currency_from = State()
    currency_to = State()
    amount = State()
    rate = State()
    confirm = State()

# -------------------- –†–ï–°–£–†–°–´ --------------------
router = Router()
storage = RedisStorage.from_url(REDIS_URL)
bot = Bot(token=BOT_TOKEN, default=None)
dp = Dispatcher(storage=storage)
dp.include_router(router)

# –ó–∞–≥–ª—É—à–∫–∞ –∫—É—Ä—Å–æ–≤
RATES = {
    "USDUAH": 41.2,
    "EURUAH": 45.5,
    "PLNUAH": 10.1,
    "EURUSD": 1.1,
    "EURPLN": 4.3,
    "USDPLN": 3.9,
}

# -------------------- –•–≠–ù–î–õ–ï–†–´ --------------------
@router.message(Command("start"))
async def start_cmd(message: Message, state: FSMContext):
    await state.set_state(ClientFSM.client_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:")

@router.message(ClientFSM.client_name)
async def get_client_name(message: Message, state: FSMContext):
    await state.update_data(client_name=message.text)
    await state.set_state(ClientFSM.operation)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é: –ø–æ–∫—É–ø–∫–∞ / –ø—Ä–æ–¥–∞–∂–∞ / –∫–æ–Ω–≤–µ—Ä—Å–∏—è")

@router.message(ClientFSM.operation)
async def choose_operation(message: Message, state: FSMContext):
    op = message.text.lower()
    if op not in ["–ø–æ–∫—É–ø–∫–∞", "–ø—Ä–æ–¥–∞–∂–∞", "–∫–æ–Ω–≤–µ—Ä—Å–∏—è"]:
        await message.answer("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å: –ø–æ–∫—É–ø–∫–∞ / –ø—Ä–æ–¥–∞–∂–∞ / –∫–æ–Ω–≤–µ—Ä—Å–∏—è")
        return
    await state.update_data(operation=op)
    await state.set_state(ClientFSM.currency_from)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É –ø—Ä–æ–¥–∞–∂–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä USD):")

@router.message(ClientFSM.currency_from)
async def get_currency_from(message: Message, state: FSMContext):
    await state.update_data(currency_from=message.text.upper())
    data = await state.get_data()
    if data["operation"] == "–∫–æ–Ω–≤–µ—Ä—Å–∏—è":
        await state.set_state(ClientFSM.currency_to)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É –ø–æ–∫—É–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä EUR):")
    else:
        await state.set_state(ClientFSM.amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –≤–∞–ª—é—Ç–µ:")

@router.message(ClientFSM.currency_to)
async def get_currency_to(message: Message, state: FSMContext):
    await state.update_data(currency_to=message.text.upper())
    await state.set_state(ClientFSM.amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")

@router.message(ClientFSM.amount)
async def get_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    await state.update_data(amount=amount)
    await state.set_state(ClientFSM.rate)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å —Å–¥–µ–ª–∫–∏ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏):")

@router.message(ClientFSM.rate)
async def get_rate(message: Message, state: FSMContext):
    data = await state.get_data()
    rate = None
    if message.text.strip():
        try:
            rate = float(message.text.replace(",", "."))
        except ValueError:
            await message.answer("–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
    else:
        pair = f"{data['currency_from']}{data.get('currency_to','UAH')}"
        rate = RATES.get(pair, 1.0)
    await state.update_data(rate=rate)
    await state.set_state(ClientFSM.confirm)

    text = (
        f"–ö–ª–∏–µ–Ω—Ç: {data['client_name']}\n"
        f"–û–ø–µ—Ä–∞—Ü–∏—è: {data['operation']}\n"
        f"–í–∞–ª—é—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏: {data['currency_from']}\n"
        f"–í–∞–ª—é—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {data.get('currency_to','UAH')}\n"
        f"–°—É–º–º–∞: {data['amount']}\n"
        f"–ö—É—Ä—Å: {rate}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–¥–µ–ª–∫—É?"
    )
    await message.answer(text)

@router.message(ClientFSM.confirm)
async def confirm_deal(message: Message, state: FSMContext):
    if message.text.lower() not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")
        return
    if message.text.lower() == "–¥–∞":
        data = await state.get_data()
        await message.answer("‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        logger.info(f"–°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {data}")
    else:
        await message.answer("‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

@router.message(Command("rate"))
async def show_rates(message: Message):
    text = "üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n"
    for pair, rate in RATES.items():
        text += f"{pair}: {rate}\n"
    await message.answer(text)

# -------------------- FASTAPI --------------------
app = FastAPI()

@app.on_event("startup")
async def on_startup():
    logger.info("RedisStorage initialized.")
    await bot.set_webhook(WEBHOOK_URL, secret_token=WEBHOOK_SECRET)
    logger.info(f"Webhook set to {WEBHOOK_URL}")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    logger.info("Webhook —É–¥–∞–ª—ë–Ω")

@app.post(WEBHOOK_PATH)
async def webhook_handler(request: Request):
    update = await request.json()
    await dp.feed_webhook_update(bot, update, WEBHOOK_SECRET)
    return {"ok": True}

@app.get("/")
async def root():
    return {"status": "FXBankBot —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ"}

# -------------------- –ó–ê–ü–£–°–ö --------------------
if __name__ == "__main__":
    port = int(os.getenv("PORT", 10000))
    uvicorn.run("app:app", host="0.0.0.0", port=port)
