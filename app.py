import os
import logging
import asyncio
from typing import Dict, Optional

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
import redis.asyncio as redis

# ---------------------- CONFIG ----------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "fxbank-secret")
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")
BANK_PASSWORD = os.getenv("BANK_PASSWORD", "bank123")
HOST = "0.0.0.0"
PORT = int(os.getenv("PORT", "10000"))

# ---------------------- LOGGING ----------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
logger = logging.getLogger("FXBankBot")

# ---------------------- FASTAPI ----------------------
app = FastAPI()

# ---------------------- REDIS STORAGE ----------------------
redis_conn = redis.from_url(REDIS_URL)
storage = RedisStorage(redis=redis_conn)

# ---------------------- BOT / DISPATCHER ----------------------
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# ---------------------- ROLES ----------------------
user_roles: Dict[int, str] = {}  # user_id -> "client" / "bank"

# ---------------------- FSM ----------------------
class NewOrder(StatesGroup):
    choosing_type = State()
    entering_amount = State()
    entering_currency = State()
    entering_rate = State()
    confirming = State()

# ---------------------- DATA STRUCTURES ----------------------
class Order:
    counter = 0

    def __init__(self, client_id: int, client_name: str, operation: str, amount: float, currency: str, rate: float):
        Order.counter += 1
        self.id = Order.counter
        self.client_id = client_id
        self.client_name = client_name
        self.operation = operation  # buy, sell, convert
        self.amount = amount
        self.currency = currency
        self.rate = rate
        self.status = "new"

    def summary(self) -> str:
        return (
            f"üìå <b>–ó–∞—è–≤–∫–∞ #{self.id}</b>\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {self.client_name}\n"
            f"üí± –û–ø–µ—Ä–∞—Ü–∏—è: {self.operation}\n"
            f"üíµ –°—É–º–º–∞: {self.amount} {self.currency}\n"
            f"üìä –ö—É—Ä—Å –∫–ª–∏–µ–Ω—Ç–∞: {self.rate}\n"
            f"üìç –°—Ç–∞—Ç—É—Å: {self.status}"
        )

# ---------------------- STORAGE ----------------------
orders: Dict[int, Order] = {}
# ---------------------- KEYBOARDS ----------------------
client_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")],
        [KeyboardButton(text="üí± –ö—É—Ä—Å—ã")],
    ],
    resize_keyboard=True,
)

bank_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton(text="üí± –ö—É—Ä—Å—ã")],
    ],
    resize_keyboard=True,
)

def bank_order_kb(order_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{order_id}"),
        ],
        [
            InlineKeyboardButton(text="üìå –û—Ä–¥–µ—Ä", callback_data=f"order:{order_id}")
        ]
    ])

# ---------------------- HANDLERS ----------------------
@router.message(Command("start"))
async def cmd_start(message: Message):
    role = user_roles.get(message.from_user.id, "client")
    if role == "bank":
        await message.answer("üè¶ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –±–∞–Ω–∫.", reply_markup=bank_kb)
    else:
        user_roles[message.from_user.id] = "client"
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç.", reply_markup=client_kb)

@router.message(Command("ping"))
async def cmd_ping(message: Message):
    await message.answer("pong")

@router.message(Command("restart"))
async def cmd_restart(message: Message):
    url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook/{WEBHOOK_SECRET}"
    try:
        await bot.set_webhook(url)
        await message.answer("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")

@router.message(Command("rate"))
async def cmd_rate(message: Message):
    text = (
        "üí± –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã (–∑–∞–≥–ª—É—à–∫–∞):\n"
        "USD/UAH = 41.25\n"
        "EUR/UAH = 45.10\n"
        "PLN/UAH = 10.60\n"
        "EUR/USD = 1.0920\n"
        "PLN/USD = 0.2580"
    )
    await message.answer(text)

@router.message(Command("bank"))
async def cmd_bank(message: Message):
    parts = message.text.strip().split()
    if len(parts) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å: /bank <–ø–∞—Ä–æ–ª—å>")
        return
    if parts[1] == BANK_PASSWORD:
        user_roles[message.from_user.id] = "bank"
        await message.answer("üè¶ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –±–∞–Ω–∫.", reply_markup=bank_kb)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

# ---------------------- NEW ORDER ----------------------
@router.message(F.text == "‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def new_order(message: Message, state: FSMContext):
    await state.set_state(NewOrder.choosing_type)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–∫—É–ø–∫–∞"), KeyboardButton(text="–ü—Ä–æ–¥–∞–∂–∞")],
            [KeyboardButton(text="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=kb)

@router.message(NewOrder.choosing_type)
async def choose_type(message: Message, state: FSMContext):
    operation = message.text.lower()
    if operation not in ["–ø–æ–∫—É–ø–∫–∞", "–ø—Ä–æ–¥–∞–∂–∞", "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è"]:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(operation=operation)
    await state.set_state(NewOrder.entering_amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=types.ReplyKeyboardRemove())

@router.message(NewOrder.entering_amount)
async def enter_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(amount=amount)
    await state.set_state(NewOrder.entering_currency)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä USD, EUR):")

@router.message(NewOrder.entering_currency)
async def enter_currency(message: Message, state: FSMContext):
    currency = message.text.upper()
    await state.update_data(currency=currency)
    await state.set_state(NewOrder.entering_rate)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å:")

@router.message(NewOrder.entering_rate)
async def enter_rate(message: Message, state: FSMContext):
    try:
        rate = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(rate=rate)
    data = await state.get_data()
    order = Order(
        client_id=message.from_user.id,
        client_name=message.from_user.first_name,
        operation=data["operation"],
        amount=data["amount"],
        currency=data["currency"],
        rate=rate
    )
    orders[order.id] = order
    await state.clear()
    await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:\n{order.summary()}", reply_markup=client_kb)

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –±–∞–Ω–∫
    for uid, role in user_roles.items():
        if role == "bank":
            try:
                await bot.send_message(uid, f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n{order.summary()}", reply_markup=bank_order_kb(order.id))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –±–∞–Ω–∫–∞: {e}")
# ---------------------- BANK: —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ ----------------------
@router.message(F.text == "üìã –í—Å–µ –∑–∞—è–≤–∫–∏")
async def bank_all_orders(message: Message):
    if user_roles.get(message.from_user.id) != "bank":
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    if not orders:
        return await message.answer("üì≠ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
    for order in orders.values():
        await message.answer(order.summary(), reply_markup=bank_order_kb(order.id))


# ---------------------- INLINE CALLBACKS (–±–∞–Ω–∫) ----------------------
@router.callback_query(F.data.startswith("accept:"))
async def cb_accept(call: CallbackQuery):
    if user_roles.get(call.from_user.id) != "bank":
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    oid = int(call.data.split(":")[1])
    o = orders.get(oid)
    if not o:
        return await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    o.status = "accepted"
    await call.message.edit_text(o.summary())
    await call.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ")
    # —É–≤–µ–¥–æ–º–∏–º –∫–ª–∏–µ–Ω—Ç–∞
    with suppress(Exception):
        await bot.send_message(o.client_id, f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{o.id} –ø—Ä–∏–Ω—è—Ç–∞ –±–∞–Ω–∫–æ–º.")


@router.callback_query(F.data.startswith("reject:"))
async def cb_reject(call: CallbackQuery):
    if user_roles.get(call.from_user.id) != "bank":
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    oid = int(call.data.split(":")[1])
    o = orders.get(oid)
    if not o:
        return await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    o.status = "rejected"
    await call.message.edit_text(o.summary())
    await call.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå")
    with suppress(Exception):
        await bot.send_message(o.client_id, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{o.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–∞–Ω–∫–æ–º.")


@router.callback_query(F.data.startswith("order:"))
async def cb_order(call: CallbackQuery):
    if user_roles.get(call.from_user.id) != "bank":
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    oid = int(call.data.split(":")[1])
    o = orders.get(oid)
    if not o:
        return await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    o.status = "order"
    await call.message.edit_text(o.summary())
    await call.answer("–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ –æ—Ä–¥–µ—Ä üìå")
    with suppress(Exception):
        await bot.send_message(o.client_id, f"üìå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{o.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ –æ—Ä–¥–µ—Ä.")


# ---------------------- FastAPI + Webhook ----------------------
WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"

@app.on_event("startup")
async def on_startup():
    """
    –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è aiogram 3.7:
    - parse_mode –∑–∞–¥–∞—ë–º —á–µ—Ä–µ–∑ DefaultBotProperties
    - –ø–µ—Ä–µ–≤–µ—à–∏–≤–∞–µ–º router –Ω–∞ –Ω–æ–≤—ã–π Dispatcher
    - —Å—Ç–∞–≤–∏–º webhook
    """
    from aiogram.enums import ParseMode
    from aiogram.client.default import DefaultBotProperties
    global bot, dp

    # –ø–æ—Å—Ç—Ä–æ–∏–º storage –∏–∑ —É–∂–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ redis_conn (–µ—Å–ª–∏ –Ω–µ –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è ‚Äî aiogram —Å–∞–º –±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥–∞—Ö)
    try:
        await redis_conn.ping()
        storage = RedisStorage(redis=redis_conn)
        logging.info("Redis OK ‚Äî FSM –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ RedisStorage")
    except Exception as e:
        logging.warning(f"Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({e}) ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–∞–º—è—Ç—å")
        from aiogram.fsm.storage.memory import MemoryStorage
        storage = MemoryStorage()

    # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥ 3.7
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=storage)
    dp.include_router(router)

    # –≤—ã—á–∏—Å–ª–∏–º URL –≤–µ–±—Ö—É–∫–∞
    base = os.getenv("WEBHOOK_URL")
    if not base:
        host = os.getenv("RENDER_EXTERNAL_HOSTNAME")
        if host:
            base = f"https://{host}"
    if base:
        url = f"{base}{WEBHOOK_PATH}"
        await bot.set_webhook(url, secret_token=WEBHOOK_SECRET)
        logging.info(f"Webhook set to {url}")
    else:
        logging.warning("WEBHOOK_URL/RENDER_EXTERNAL_HOSTNAME –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –≤–µ–±—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


@app.on_event("shutdown")
async def on_shutdown():
    with suppress(Exception):
        await bot.delete_webhook()
    logging.info("Shutdown complete.")


@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    update = await request.json()
    await dp.feed_webhook_update(bot, update)
    return {"ok": True}


@app.get("/")
async def health():
    # Healthcheck –¥–ª—è Render
    return {"status": "ok", "service": "FXBankBot"}


# ---------------------- –ó–∞–ø—É—Å–∫ ----------------------
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("app:app", host=HOST, port=PORT, reload=False)
