import os
import asyncio
import logging
from typing import Dict, Optional
from contextlib import suppress

import redis.asyncio as redis
import aiohttp
from fastapi import FastAPI, Request

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest
from aiogram.dispatcher.middlewares.base import BaseMiddleware

# ===================== CONFIG =====================
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
BANK_PASSWORD = os.getenv("BANK_PASSWORD", "bank123").strip()
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0").strip()

WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "fxbank-secret").strip()
WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"

HOST = "0.0.0.0"
PORT = int(os.getenv("PORT", "10000"))

# URL —Å–µ—Ä–≤–∏—Å–∞
WEBHOOK_BASE = os.getenv("WEBHOOK_URL") or (
    f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}"
    if os.getenv("RENDER_EXTERNAL_HOSTNAME")
    else "https://fxbankbot.onrender.com"
)

# Watchdog –∏ self-ping
WATCHDOG_INTERVAL = int(os.getenv("WEBHOOK_WATCHDOG_INTERVAL", "60"))  # —Å–µ–∫
SELF_PING_ENABLE = os.getenv("SELF_PING_ENABLE", "false").lower() == "true"
SELF_PING_INTERVAL = int(os.getenv("SELF_PING_INTERVAL", "240"))  # —Å–µ–∫

# ===================== LOGGING =====================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | fxbank_bot | %(message)s",
)
logger = logging.getLogger("fxbank_bot")

# ===================== FASTAPI =====================
app = FastAPI(title="FXBankBot", version="2.0.1")

# ===================== REDIS (FSM) =====================
try:
    redis_conn = redis.from_url(REDIS_URL)
    storage = RedisStorage(redis_conn)
    logger.info("RedisStorage initialized.")
except Exception as e:
    logger.error(f"Redis init failed: {e}")
    raise

# ===================== AIROGRAM CORE =====================
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# ===================== MIDDLEWARE: –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ =====================
class UpdateLoggingMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        # –≠—Ç–æ middleware –Ω–∞ —É—Ä–æ–≤–Ω–µ Update
        try:
            # event —Ç—É—Ç ‚Äî aiogram.types.Update
            raw = ""
            with suppress(Exception):
                raw = event.model_dump_json()[:600]
            logger.info(f"RAW UPDATE: {raw}")
        except Exception as e:
            logger.warning(f"UpdateLoggingMiddleware error: {e}")
        return await handler(event, data)

class EventLoggingMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        # –≠—Ç–æ middleware –¥–ª—è message/callback —É—Ä–æ–≤–Ω–µ–π
        try:
            if isinstance(event, types.Message):
                state = None
                if "state" in data:
                    with suppress(Exception):
                        state = await data["state"].get_state()
                logger.info(
                    f"MSG from {event.from_user.id} @{event.from_user.username}: "
                    f"text={repr(event.text)} state={state}"
                )
            elif isinstance(event, types.CallbackQuery):
                logger.info(
                    f"CB from {event.from_user.id} @{event.from_user.username}: data={repr(event.data)}"
                )
        except Exception as e:
            logger.warning(f"EventLoggingMiddleware error: {e}")
        return await handler(event, data)

# –í–µ—à–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞ Update, –∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
dp.update.outer_middleware(UpdateLoggingMiddleware())
dp.message.outer_middleware(EventLoggingMiddleware())
dp.callback_query.outer_middleware(EventLoggingMiddleware())

# ===================== RUNTIME STORAGE =====================
user_roles: Dict[int, str] = {}  # user_id -> "client" | "bank"

class Order:
    counter = 0

    def __init__(
        self,
        client_id: int,
        client_telegram: str,
        client_name: str,
        operation: str,              # "–ø–æ–∫—É–ø–∫–∞" | "–ø—Ä–æ–¥–∞–∂–∞" | "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è"
        amount: float,
        currency_from: str,
        currency_to: Optional[str],  # UAH –¥–ª—è buy/sell; –≤–∞–ª—é—Ç–∞ –¥–ª—è convert
        rate: float,                 # –∫—É—Ä—Å –∫–ª–∏–µ–Ω—Ç–∞ BASE/QUOTE
        amount_side: Optional[str] = None,  # –¥–ª—è convert: "sell"|"buy"
    ):
        Order.counter += 1
        self.id = Order.counter
        self.client_id = client_id
        self.client_telegram = client_telegram
        self.client_name = client_name
        self.operation = operation
        self.amount = amount
        self.currency_from = currency_from
        self.currency_to = currency_to
        self.rate = rate
        self.amount_side = amount_side
        self.status = "new"          # new | accepted | rejected | order

    def summary(self) -> str:
        if self.operation == "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è":
            side_txt = (
                " (—Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏)"
                if self.amount_side == "sell"
                else (" (—Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏)" if self.amount_side == "buy" else "")
            )
            line = f"{self.amount} {self.currency_from} ‚Üí {self.currency_to}{side_txt}"
        else:
            line = f"{self.operation} {self.amount} {self.currency_from} (–ø—Ä–æ—Ç–∏–≤ UAH)"
        tg = f" (@{self.client_telegram})" if self.client_telegram else ""
        return (
            f"üìå <b>–ó–∞—è–≤–∫–∞ #{self.id}</b>\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {self.client_name}{tg}\n"
            f"üí± –û–ø–µ—Ä–∞—Ü–∏—è: {line}\n"
            f"üìä –ö—É—Ä—Å –∫–ª–∏–µ–Ω—Ç–∞ (BASE/QUOTE): {self.rate}\n"
            f"üìç –°—Ç–∞—Ç—É—Å: {self.status}"
        )

orders: Dict[int, Order] = {}

# ===================== KEYBOARDS =====================
def kb_main_client() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")],
            [KeyboardButton(text="üóÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏"), KeyboardButton(text="üí± –ö—É—Ä—Å—ã")],
        ],
        resize_keyboard=True,
    )

def kb_main_bank() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton(text="üí± –ö—É—Ä—Å—ã")],
        ],
        resize_keyboard=True,
    )

def ikb_role() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë§ –Ø –∫–ª–∏–µ–Ω—Ç", callback_data="role:client"),
            InlineKeyboardButton(text="üè¶ –Ø –±–∞–Ω–∫", callback_data="role:bank"),
        ]
    ])

def ikb_deal_type() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="deal:buy")],
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É", callback_data="deal:sell")],
        [InlineKeyboardButton(text="–ö–æ–Ω–≤–µ—Ä—Å–∏—è (–≤–∞–ª—é—Ç–∞‚Üí–≤–∞–ª—é—Ç–∞)", callback_data="deal:convert")],
    ])

def ikb_amount_side() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–≤–æ–∂—É —Å—É–º–º—É –ü–†–û–î–ê–ñ–ò (BASE)", callback_data="as:sell")],
        [InlineKeyboardButton(text="–í–≤–æ–∂—É —Å—É–º–º—É –ü–û–ö–£–ü–ö–ò (QUOTE)", callback_data="as:buy")],
    ])

def ikb_bank_order(order_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{order_id}"),
        ],
        [
            InlineKeyboardButton(text="üìå –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –æ—Ä–¥–µ—Ä", callback_data=f"order:{order_id}")
        ]
    ])

# ===================== RATES (STUB) =====================
def get_stub_rates() -> Dict[str, float]:
    # –ü–æ–∑–∂–µ –ø–æ–¥–∫–ª—é—á–∏–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (LSEG/Bloomberg)
    return {
        "USD/UAH": 41.25,
        "EUR/UAH": 45.10,
        "PLN/UAH": 10.60,
        "EUR/USD": 1.0920,
        "USD/PLN": 3.8760,
        "EUR/PLN": 4.2326,
    }

def format_rates_text() -> str:
    r = get_stub_rates()
    return "\n".join([f"{k} = {v}" for k, v in r.items()])

# ===================== HELPERS =====================
def user_role(uid: int) -> str:
    return user_roles.get(uid, "client")

async def safe_cb_answer(cb: CallbackQuery, text: Optional[str] = None, show_alert: bool = False):
    with suppress(Exception):
        await cb.answer(text, show_alert=show_alert)

# ===================== COMMANDS & COMMON =====================
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    try:
        await state.clear()
        user_roles[message.from_user.id] = user_roles.get(message.from_user.id, "client")
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FXBankBot!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=ikb_role())
    except Exception as e:
        logger.error(f"/start failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ /start")

@router.message(Command("menu"))
async def cmd_menu(message: Message):
    try:
        role = user_role(message.from_user.id)
        kb = kb_main_bank() if role == "bank" else kb_main_client()
        await message.answer("üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)
    except Exception as e:
        logger.error(f"/menu failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é.")

@router.message(Command("rate"))
@router.message(F.text == "üí± –ö—É—Ä—Å—ã")
async def cmd_rate(message: Message):
    try:
        await message.answer("üí± –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã (–∑–∞–≥–ª—É—à–∫–∞):\n" + format_rates_text())
    except Exception as e:
        logger.error(f"/rate failed: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã.")

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    try:
        cur = await state.get_state()
        await state.clear()
        role = user_role(message.from_user.id)
        kb = kb_main_bank() if role == "bank" else kb_main_client()
        if cur:
            await message.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)
        else:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)
    except Exception as e:
        logger.error(f"/cancel failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã.")

@router.message(Command("bank"))
async def cmd_bank(message: Message):
    try:
        parts = (message.text or "").strip().split(maxsplit=1)
        if len(parts) < 2:
            return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å: /bank <–ø–∞—Ä–æ–ª—å>")
        if parts[1] == BANK_PASSWORD:
            user_roles[message.from_user.id] = "bank"
            await message.answer("üè¶ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –±–∞–Ω–∫.", reply_markup=kb_main_bank())
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    except Exception as e:
        logger.error(f"/bank failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –±–∞–Ω–∫–∞.")

@router.callback_query(F.data.startswith("role:"))
async def cq_role(callback: CallbackQuery):
    try:
        _, role = callback.data.split(":")
        if role not in ("client", "bank"):
            return await safe_cb_answer(callback, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å", show_alert=True)
        user_roles[callback.from_user.id] = role
        if role == "bank":
            await callback.message.edit_text("–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: üè¶ –ë–∞–Ω–∫")
            await callback.message.answer("–ú–µ–Ω—é –±–∞–Ω–∫–∞:", reply_markup=kb_main_bank())
        else:
            await callback.message.edit_text("–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: üë§ –ö–ª–∏–µ–Ω—Ç")
            await callback.message.answer("–ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=kb_main_client())
        await safe_cb_answer(callback)
    except Exception as e:
        logger.error(f"cq_role failed: {e}")
        await safe_cb_answer(callback, "–û—à–∏–±–∫–∞", show_alert=True)

# ===================== CLIENT FSM =====================
class ClientFSM(StatesGroup):
    entering_client_name = State()
    choosing_deal = State()
    entering_currency_from = State()
    entering_currency_to = State()     # –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    choosing_amount_side = State()     # –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: sell/buy
    entering_amount = State()
    entering_rate = State()

@router.message(F.text == "‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def new_request(message: Message, state: FSMContext):
    try:
        await state.clear()
        await state.set_state(ClientFSM.entering_client_name)
        await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        logger.error(f"new_request failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")

@router.message(ClientFSM.entering_client_name)
async def fsm_client_name(message: Message, state: FSMContext):
    try:
        client_name = (message.text or "").strip()
        if not client_name:
            return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞.")
        await state.update_data(client_name=client_name)
        await state.set_state(ClientFSM.choosing_deal)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:", reply_markup=ikb_deal_type())
    except Exception as e:
        logger.error(f"fsm_client_name failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∏–º–µ–Ω–∏.")

@router.callback_query(F.data.startswith("deal:"))
async def cq_deal(callback: CallbackQuery, state: FSMContext):
    try:
        deal_type = callback.data.split(":")[1]
        if deal_type == "buy":
            await state.update_data(operation="–ø–æ–∫—É–ø–∫–∞", currency_to="UAH")
        elif deal_type == "sell":
            await state.update_data(operation="–ø—Ä–æ–¥–∞–∂–∞", currency_to="UAH")
        elif deal_type == "convert":
            await state.update_data(operation="–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è")
        else:
            return await safe_cb_answer(callback, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–¥–µ–ª–∫–∏", show_alert=True)

        await state.set_state(ClientFSM.entering_currency_from)
        if deal_type == "convert":
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ü–†–û–î–ê–¢–¨ (–ø—Ä–∏–º–µ—Ä: USD):")
        else:
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å–¥–µ–ª–∫–∏ (–ø—Ä–∏–º–µ—Ä: USD):")
        await safe_cb_answer(callback)
    except Exception as e:
        logger.error(f"cq_deal failed: {e}")
        await safe_cb_answer(callback, "‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)

@router.message(ClientFSM.entering_currency_from)
async def fsm_currency_from(message: Message, state: FSMContext):
    try:
        cfrom = (message.text or "").upper().strip()
        if not cfrom or len(cfrom) < 3:
            return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã, –ø—Ä–∏–º–µ—Ä: USD, EUR, UAH.")
        await state.update_data(currency_from=cfrom)
        data = await state.get_data()
        if data.get("operation") == "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è":
            await state.set_state(ClientFSM.entering_currency_to)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ü–û–õ–£–ß–ò–¢–¨ (–ø—Ä–∏–º–µ—Ä: EUR):")
        else:
            await state.update_data(currency_to="UAH")
            await state.set_state(ClientFSM.entering_amount)
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {cfrom}:")
    except Exception as e:
        logger.error(f"fsm_currency_from failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤–∞–ª—é—Ç—ã.")

@router.message(ClientFSM.entering_currency_to)
async def fsm_currency_to(message: Message, state: FSMContext):
    try:
        cto = (message.text or "").upper().strip()
        if not cto or len(cto) < 3:
            return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã, –ø—Ä–∏–º–µ—Ä: USD, EUR.")
        await state.update_data(currency_to=cto)
        await state.set_state(ClientFSM.choosing_amount_side)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫—É—é —Å—É–º–º—É –≤–≤–æ–¥–∏—Ç–µ:", reply_markup=ikb_amount_side())
    except Exception as e:
        logger.error(f"fsm_currency_to failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤—Ç–æ—Ä–æ–π –≤–∞–ª—é—Ç—ã.")

@router.callback_query(F.data.startswith("as:"))
async def cq_amount_side(callback: CallbackQuery, state: FSMContext):
    try:
        side = callback.data.split(":")[1]
        if side not in ("sell", "buy"):
            return await safe_cb_answer(callback, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
        await state.update_data(amount_side=side)
        await state.set_state(ClientFSM.entering_amount)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        await safe_cb_answer(callback)
    except Exception as e:
        logger.error(f"cq_amount_side failed: {e}")
        await safe_cb_answer(callback, "‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)

@router.message(ClientFSM.entering_amount)
async def fsm_amount(message: Message, state: FSMContext):
    try:
        try:
            amount = float((message.text or "").replace(",", "."))
        except ValueError:
            return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000.50")

        await state.update_data(amount=amount)
        await state.set_state(ClientFSM.entering_rate)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å (BASE/QUOTE).\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –ü–æ–∫—É–ø–∫–∞/–ü—Ä–æ–¥–∞–∂–∞ USD –ø—Ä–æ—Ç–∏–≤ UAH ‚Üí –∫—É—Ä—Å USD/UAH\n"
            "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è USD‚ÜíEUR ‚Üí –∫—É—Ä—Å USD/EUR\n\n"
            "–ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É."
        )
    except Exception as e:
        logger.error(f"fsm_amount failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—É–º–º—ã.")

@router.message(ClientFSM.entering_rate)
async def fsm_rate(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        txt = (message.text or "").strip()
        if txt:
            try:
                rate = float(txt.replace(",", "."))
            except ValueError:
                return await message.answer("‚ùå –ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä 41.25")
        else:
            base = data["currency_from"]
            quote = data.get("currency_to", "UAH")
            pair = f"{base}/{quote}"
            rate = get_stub_rates().get(pair, 1.0)

        await state.update_data(rate=rate)

        order = Order(
            client_id=message.from_user.id,
            client_telegram=message.from_user.username or "",
            client_name=data.get("client_name", "N/A"),
            operation=data["operation"],
            amount=data["amount"],
            currency_from=data["currency_from"],
            currency_to=data.get("currency_to"),
            rate=rate,
            amount_side=data.get("amount_side"),
        )
        orders[order.id] = order

        await state.clear()
        await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:\n\n" + order.summary(), reply_markup=kb_main_client())

        # –£–≤–µ–¥–æ–º–∏–º –±–∞–Ω–∫
        for uid, role in user_roles.items():
            if role == "bank":
                with suppress(Exception):
                    await bot.send_message(uid, "üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n" + order.summary(),
                                           reply_markup=ikb_bank_order(order.id))
    except Exception as e:
        logger.error(f"fsm_rate failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫—É—Ä—Å–∞.")

# ===================== CLIENT: /mytrades =====================
@router.message(Command("mytrades"))
@router.message(F.text == "üóÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def my_trades(message: Message):
    try:
        user_id = message.from_user.id
        user_orders = [o for o in orders.values() if o.client_id == user_id]
        if not user_orders:
            return await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.", reply_markup=kb_main_client())
        chunks = []
        for o in sorted(user_orders, key=lambda x: x.id, reverse=True):
            chunks.append(o.summary())
        text = "\n\n".join(chunks)
        await message.answer("üóÇ –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n" + text, reply_markup=kb_main_client())
    except Exception as e:
        logger.error(f"/mytrades failed: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∑–∞—è–≤–∫–∏.")

# ===================== BANK FLOW =====================
@router.message(F.text == "üìã –í—Å–µ –∑–∞—è–≤–∫–∏")
async def bank_orders(message: Message):
    try:
        if user_role(message.from_user.id) != "bank":
            return await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –±–∞–Ω–∫—É.")
        if not orders:
            return await message.answer("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫.")
        for order in orders.values():
            await message.answer(order.summary(), reply_markup=ikb_bank_order(order.id))
    except Exception as e:
        logger.error(f"bank_orders failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞—è–≤–æ–∫.")

@router.callback_query(F.data.startswith("accept:"))
async def cq_accept(callback: CallbackQuery):
    try:
        oid = int(callback.data.split(":")[1])
        order = orders.get(oid)
        if not order:
            return await safe_cb_answer(callback, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        order.status = "accepted"
        await callback.message.edit_text(order.summary())
        await safe_cb_answer(callback, "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")

        # —É–≤–µ–¥–æ–º–∏–º –∫–ª–∏–µ–Ω—Ç–∞
        with suppress(Exception):
            await bot.send_message(order.client_id, f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{oid} –ø—Ä–∏–Ω—è—Ç–∞ –±–∞–Ω–∫–æ–º.")
    except Exception as e:
        logger.error(f"cq_accept failed: {e}")
        await safe_cb_answer(callback, "‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("reject:"))
async def cq_reject(callback: CallbackQuery):
    try:
        oid = int(callback.data.split(":")[1])
        order = orders.get(oid)
        if not order:
            return await safe_cb_answer(callback, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        order.status = "rejected"
        await callback.message.edit_text(order.summary())
        await safe_cb_answer(callback, "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

        # —É–≤–µ–¥–æ–º–∏–º –∫–ª–∏–µ–Ω—Ç–∞
        with suppress(Exception):
            await bot.send_message(order.client_id, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{oid} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–∞–Ω–∫–æ–º.")
    except Exception as e:
        logger.error(f"cq_reject failed: {e}")
        await safe_cb_answer(callback, "‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("order:"))
async def cq_order(callback: CallbackQuery):
    try:
        oid = int(callback.data.split(":")[1])
        order = orders.get(oid)
        if not order:
            return await safe_cb_answer(callback, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        order.status = "order"
        await callback.message.edit_text(order.summary())
        await safe_cb_answer(callback, "üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ –æ—Ä–¥–µ—Ä")

        # —É–≤–µ–¥–æ–º–∏–º –∫–ª–∏–µ–Ω—Ç–∞
        with suppress(Exception):
            await bot.send_message(order.client_id, f"üìå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{oid} –ø—Ä–∏–Ω—è—Ç–∞ –±–∞–Ω–∫–æ–º –∫–∞–∫ –æ—Ä–¥–µ—Ä.")
    except Exception as e:
        logger.error(f"cq_order failed: {e}")
        await safe_cb_answer(callback, "‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)

# ===================== WEBHOOK MGMT + WATCHDOG + SELF-PING =====================
_watchdog_task: Optional[asyncio.Task] = None
_self_ping_task: Optional[asyncio.Task] = None

async def set_webhook_safely(url: str):
    """–°—Ç–∞–≤–∏—Ç –≤–µ–±—Ö—É–∫ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç Flood Control –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–æ–º."""
    try:
        # –í–ê–ñ–ù–û: –Ω–µ –¥—Ä–æ–ø–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∞–ø–¥–µ–π—Ç—ã
        with suppress(Exception):
            await bot.delete_webhook()

        await bot.set_webhook(
            url,
            secret_token=WEBHOOK_SECRET,
            allowed_updates=["message", "callback_query"],
        )
        logger.info(f"Webhook set to {url}")
    except TelegramRetryAfter as e:
        delay = max(int(e.retry_after), 1)
        logger.warning(f"Flood control on set_webhook. Retry after {delay}s")
        await asyncio.sleep(delay)
        await bot.set_webhook(
            url,
            secret_token=WEBHOOK_SECRET,
            allowed_updates=["message", "callback_query"],
        )
        logger.info(f"Webhook set to {url} (after retry)")
    except TelegramBadRequest as e:
        logger.error(f"BadRequest on set_webhook: {e}")
        raise
    except Exception as e:
        logger.error(f"Unexpected error on set_webhook: {e}")
        raise

async def webhook_watchdog():
    """–ö–∞–∂–¥—ã–µ WATCHDOG_INTERVAL —Å–µ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç URL –≤–µ–±—Ö—É–∫–∞, –ø—Ä–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–∏ ‚Äî –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç."""
    desired = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"
    while True:
        try:
            info = await bot.get_webhook_info()
            current = info.url or ""
            if current != desired:
                logger.warning(f"Watchdog: webhook mismatch (current='{current}', desired='{desired}'). Fixing...")
                with suppress(Exception):
                    await set_webhook_safely(desired)
            else:
                logger.info("Watchdog: webhook OK.")
        except Exception as e:
            logger.error(f"Watchdog error: {e}")
        await asyncio.sleep(WATCHDOG_INTERVAL)

async def self_ping_loop():
    """–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π self-ping, —á—Ç–æ–±—ã Render –Ω–µ —É—Å—ã–ø–ª—è–ª —Å–µ—Ä–≤–∏—Å (–ø–æ–ª–µ–∑–Ω–æ –Ω–∞ Free-–ø–ª–∞–Ω–µ)."""
    if not SELF_PING_ENABLE:
        return
    url = f"{WEBHOOK_BASE}/"
    session_timeout = aiohttp.ClientTimeout(total=10)
    async with aiohttp.ClientSession(timeout=session_timeout) as session:
        while True:
            try:
                async with session.get(url) as resp:
                    logger.info(f"Self-ping {url} -> {resp.status}")
            except Exception as e:
                logger.warning(f"Self-ping error: {e}")
            await asyncio.sleep(SELF_PING_INTERVAL)

# ===================== FASTAPI ROUTES =====================
@app.on_event("startup")
async def on_startup():
    try:
        # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram)
        with suppress(Exception):
            await bot.set_my_commands([
                types.BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ / –≤—ã–±–æ—Ä —Ä–æ–ª–∏"),
                types.BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
                types.BotCommand(command="rate", description="–ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã"),
                types.BotCommand(command="mytrades", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞—è–≤–∫–∏"),
                types.BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"),
                types.BotCommand(command="bank", description="–í—Ö–æ–¥ —Ä–æ–ª–∏ –±–∞–Ω–∫: /bank <–ø–∞—Ä–æ–ª—å>"),
            ])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
        with suppress(Exception):
            pong = await redis_conn.ping()
            if pong:
                logger.info("Redis connected OK.")

        # –í–µ–±—Ö—É–∫
        desired = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"
        await set_webhook_safely(desired)

        # –°—Ç–∞—Ä—Ç watchdog
        global _watchdog_task
        _watchdog_task = asyncio.create_task(webhook_watchdog())

        # –°—Ç–∞—Ä—Ç self-ping (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω)
        global _self_ping_task
        if SELF_PING_ENABLE:
            _self_ping_task = asyncio.create_task(self_ping_loop())

        logger.info(f"Startup complete. Watchdog enabled (interval={WATCHDOG_INTERVAL}s).")
    except Exception as e:
        logger.error(f"Startup failed: {e}")

@app.on_event("shutdown")
async def on_shutdown():
    with suppress(Exception):
        if _watchdog_task:
            _watchdog_task.cancel()
    with suppress(Exception):
        if _self_ping_task:
            _self_ping_task.cancel()
    with suppress(Exception):
        await redis_conn.close()
    with suppress(Exception):
        await bot.session.close()
    logger.info("Shutdown complete.")

@app.get("/")
async def index():
    return {
        "status": "ok",
        "bot": "FXBankBot",
        "webhook": f"{WEBHOOK_BASE}{WEBHOOK_PATH}",
        "self_ping": SELF_PING_ENABLE,
    }

@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    try:
        raw = await request.body()
        update = types.Update.model_validate_json(raw)
        # –í–ê–ñ–ù–û: —Å–µ–∫—Ä–µ—Ç –ø–µ—Ä–µ–¥–∞—ë–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º, –∏–Ω–∞—á–µ —Ç—Ä–µ—Ç–∏–π –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π ‚Äî timeout (int)
        await dp.feed_webhook_update(bot, update, secret_token=WEBHOOK_SECRET)
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return {"ok": False}
    return {"ok": True}

# ===================== ENTRY =====================
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("app:app", host=HOST, port=PORT, reload=False)
