import os
import logging
import asyncio
from typing import Dict, Optional
from contextlib import suppress

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
import redis.asyncio as redis

# ---------------------- CONFIG ----------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "fxbank-secret")
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")
BANK_PASSWORD = os.getenv("BANK_PASSWORD", "bank123")
HOST = "0.0.0.0"
PORT = int(os.getenv("PORT", "10000"))

# ---------------------- LOGGING ----------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
logger = logging.getLogger("fxbank_bot")

# ---------------------- FASTAPI ----------------------
app = FastAPI()

# ---------------------- REDIS STORAGE ----------------------
redis_conn = redis.from_url(REDIS_URL)
storage = RedisStorage(redis=redis_conn)

# ---------------------- BOT / DISPATCHER ----------------------
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# ---------------------- ROLES ----------------------
user_roles: Dict[int, str] = {}  # user_id -> "client" / "bank"

# ---------------------- FSM ----------------------
class NewOrder(StatesGroup):
    choosing_type = State()
    entering_amount = State()
    entering_currency_from = State()
    entering_currency_to = State()
    entering_rate = State()
    confirming = State()

# ---------------------- DATA STRUCTURES ----------------------
class Order:
    counter = 0

    def __init__(
        self,
        client_id: int,
        client_name: str,
        operation: str,
        amount: float,
        currency_from: str,
        currency_to: Optional[str],
        rate: float,
    ):
        Order.counter += 1
        self.id = Order.counter
        self.client_id = client_id
        self.client_name = client_name
        self.operation = operation  # buy, sell, convert
        self.amount = amount
        self.currency_from = currency_from
        self.currency_to = currency_to
        self.rate = rate
        self.status = "new"

    def summary(self) -> str:
        if self.operation == "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è":
            op_text = f"{self.amount} {self.currency_from} ‚Üí {self.currency_to}"
        else:
            op_text = f"{self.operation} {self.amount} {self.currency_from}"
        return (
            f"üìå <b>–ó–∞—è–≤–∫–∞ #{self.id}</b>\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {self.client_name}\n"
            f"üí± –û–ø–µ—Ä–∞—Ü–∏—è: {op_text}\n"
            f"üìä –ö—É—Ä—Å –∫–ª–∏–µ–Ω—Ç–∞: {self.rate}\n"
            f"üìç –°—Ç–∞—Ç—É—Å: {self.status}"
        )

# ---------------------- STORAGE ----------------------
orders: Dict[int, Order] = {}

# ---------------------- KEYBOARDS ----------------------
client_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")],
        [KeyboardButton(text="üí± –ö—É—Ä—Å—ã")],
    ],
    resize_keyboard=True,
)

bank_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏")],
        [KeyboardButton(text="üí± –ö—É—Ä—Å—ã")],
    ],
    resize_keyboard=True,
)

def bank_order_kb(order_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{order_id}"),
        ],
        [
            InlineKeyboardButton(text="üìå –û—Ä–¥–µ—Ä", callback_data=f"order:{order_id}")
        ]
    ])

# ---------------------- MOCK RATES ----------------------
def get_mock_rates() -> Dict[str, float]:
    return {
        "USD/UAH": 41.25,
        "EUR/UAH": 45.10,
        "PLN/UAH": 10.60,
        "EUR/USD": 1.0920,
        "PLN/USD": 0.2580,
        "EUR/PLN": 4.23,
    }

# ---------------------- HANDLERS ----------------------
@router.message(Command("start"))
async def cmd_start(message: Message):
    try:
        role = user_roles.get(message.from_user.id, "client")
        if role == "bank":
            await message.answer("üè¶ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –±–∞–Ω–∫.", reply_markup=bank_kb)
        else:
            user_roles[message.from_user.id] = "client"
            await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç.", reply_markup=client_kb)
    except Exception as e:
        logger.error(f"cmd_start failed: {e}")

@router.message(Command("rate"))
async def cmd_rate(message: Message):
    try:
        rates = get_mock_rates()
        text = "üí± –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:\n" + "\n".join([f"{k} = {v}" for k, v in rates.items()])
        await message.answer(text)
    except Exception as e:
        logger.error(f"cmd_rate failed: {e}")

@router.message(Command("bank"))
async def cmd_bank(message: Message):
    try:
        parts = message.text.strip().split()
        if len(parts) < 2:
            return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å: /bank <–ø–∞—Ä–æ–ª—å>")
        if parts[1] == BANK_PASSWORD:
            user_roles[message.from_user.id] = "bank"
            await message.answer("üè¶ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –±–∞–Ω–∫.", reply_markup=bank_kb)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    except Exception as e:
        logger.error(f"cmd_bank failed: {e}")

# ---------------------- NEW ORDER ----------------------
@router.message(F.text == "‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def new_order(message: Message, state: FSMContext):
    await state.set_state(NewOrder.choosing_type)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–∫—É–ø–∫–∞"), KeyboardButton(text="–ü—Ä–æ–¥–∞–∂–∞")],
            [KeyboardButton(text="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=kb)

@router.message(NewOrder.choosing_type)
async def choose_type(message: Message, state: FSMContext):
    operation = message.text.lower()
    if operation not in ["–ø–æ–∫—É–ø–∫–∞", "–ø—Ä–æ–¥–∞–∂–∞", "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è"]:
        return await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
    await state.update_data(operation=operation)
    await state.set_state(NewOrder.entering_amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=types.ReplyKeyboardRemove())

@router.message(NewOrder.entering_amount)
async def enter_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
    except ValueError:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    await state.update_data(amount=amount)
    await state.set_state(NewOrder.entering_currency_from)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä USD, EUR, UAH):")

@router.message(NewOrder.entering_currency_from)
async def enter_currency_from(message: Message, state: FSMContext):
    data = await state.get_data()
    operation = data["operation"]
    currency_from = message.text.upper()
    if operation == "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è":
        await state.update_data(currency_from=currency_from)
        await state.set_state(NewOrder.entering_currency_to)
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä USD, EUR):")
    else:
        await state.update_data(currency_from=currency_from, currency_to="UAH")
        await state.set_state(NewOrder.entering_rate)
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å:")

@router.message(NewOrder.entering_currency_to)
async def enter_currency_to(message: Message, state: FSMContext):
    currency_to = message.text.upper()
    await state.update_data(currency_to=currency_to)
    await state.set_state(NewOrder.entering_rate)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å:")

@router.message(NewOrder.entering_rate)
async def enter_rate(message: Message, state: FSMContext):
    try:
        rate = float(message.text.replace(",", "."))
    except ValueError:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    data = await state.get_data()
    order = Order(
        client_id=message.from_user.id,
        client_name=message.from_user.first_name,
        operation=data["operation"],
        amount=data["amount"],
        currency_from=data["currency_from"],
        currency_to=data.get("currency_to"),
        rate=rate,
    )
    orders[order.id] = order
    await state.clear()
    await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:\n{order.summary()}", reply_markup=client_kb)

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –±–∞–Ω–∫
    for uid, role in user_roles.items():
        if role == "bank":
            with suppress(Exception):
                await bot.send_message(uid, f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n{order.summary()}", reply_markup=bank_order_kb(order.id))

# ---------------------- BANK ----------------------
@router.message(F.text == "üìã –í—Å–µ –∑–∞—è–≤–∫–∏")
async def bank_all_orders(message: Message):
    if user_roles.get(message.from_user.id) != "bank":
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    if not orders:
        return await message.answer("üì≠ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
    for order in orders.values():
        await message.answer(order.summary(), reply_markup=bank_order_kb(order.id))

@router.callback_query(F.data.startswith("accept:"))
async def cb_accept(call: CallbackQuery):
    if user_roles.get(call.from_user.id) != "bank":
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    oid = int(call.data.split(":")[1])
    o = orders.get(oid)
    if not o:
        return await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    o.status = "accepted"
    await call.message.edit_text(o.summary())
    await call.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ")
    with suppress(Exception):
        await bot.send_message(o.client_id, f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{o.id} –ø—Ä–∏–Ω—è—Ç–∞ –±–∞–Ω–∫–æ–º.")

@router.callback_query(F.data.startswith("reject:"))
async def cb_reject(call: CallbackQuery):
    if user_roles.get(call.from_user.id) != "bank":
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    oid = int(call.data.split(":")[1])
    o = orders.get(oid)
    if not o:
        return await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    o.status = "rejected"
    await call.message.edit_text(o.summary())
    await call.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå")
    with suppress(Exception):
        await bot.send_message(o.client_id, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{o.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–∞–Ω–∫–æ–º.")

@router.callback_query(F.data.startswith("order:"))
async def cb_order(call: CallbackQuery):
    if user_roles.get(call.from_user.id) != "bank":
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    oid = int(call.data.split(":")[1])
    o = orders.get(oid)
    if not o:
        return await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    o.status = "order"
    await call.message.edit_text(o.summary())
    await call.answer("–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ –æ—Ä–¥–µ—Ä üìå")
    with suppress(Exception):
        await bot.send_message(o.client_id, f"üìå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{o.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ –æ—Ä–¥–µ—Ä.")

# ---------------------- FastAPI + Webhook ----------------------
WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"

@app.on_event("startup")
async def on_startup():
    logger.info("Starting up application...")
    try:
        await redis_conn.ping()
        logger.info("Redis connected OK.")
    except Exception as e:
        logger.warning(f"Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

    base = os.getenv("WEBHOOK_URL")
    if not base:
        host = os.getenv("RENDER_EXTERNAL_HOSTNAME")
        if host:
            base = f"https://{host}"
    if base:
        url = f"{base}{WEBHOOK_PATH}"
        try:
            await bot.set_webhook(url, secret_token=WEBHOOK_SECRET, allowed_updates=["message", "callback_query"])
            logger.info(f"Webhook set to {url}")
        except Exception as e:
            logger.error(f"Failed to set webhook: {e}")
    else:
        logger.warning("WEBHOOK_URL/RENDER_EXTERNAL_HOSTNAME –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –≤–µ–±—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    logger.info("Startup complete.")

@app.on_event("shutdown")
async def on_shutdown():
    with suppress(Exception):
        await bot.delete_webhook()
    logger.info("Shutdown complete.")

@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    update = await request.json()
    await dp.feed_webhook_update(bot, update)
    return {"ok": True}

@app.get("/")
async def health():
    return {"status": "ok", "service": "FXBankBot"}

# ---------------------- –ó–∞–ø—É—Å–∫ ----------------------
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("app:app", host=HOST, port=PORT, reload=False)
