import os
import asyncio
import logging
from typing import Dict, Optional
from contextlib import suppress

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.client.default import DefaultBotProperties
import redis.asyncio as redis

# ===================== CONFIG =====================
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    # –ù–µ –ø–∞–¥–∞–µ–º, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º ‚Äî –Ω–∞ Render —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω
    logging.getLogger("fxbank_bot_boot").error("BOT_TOKEN env var is missing!")

WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "fxbank-secret").strip()
WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"

BANK_PASSWORD = os.getenv("BANK_PASSWORD", "bank123")
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")

HOST = "0.0.0.0"
PORT = int(os.getenv("PORT", "10000"))

# ===================== LOGGING =====================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
logger = logging.getLogger("fxbank_bot")

# ===================== FASTAPI =====================
app = FastAPI(title="FXBankBot", version="1.0")

# ===================== REDIS (FSM) =====================
try:
    redis_conn = redis.from_url(REDIS_URL)
    storage = RedisStorage(redis_conn)
except Exception as e:
    logger.error(f"Redis init failed: {e}")
    # –ù–∞ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã MemoryStorage, –Ω–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é ‚Äî Redis
    raise

# ===================== AIROGRAM CORE =====================
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# ===================== RUNTIME STORAGE =====================
# –ü—Ä–æ—Å—Ç–∞—è in-memory –º–æ–¥–µ–ª—å (–¥–µ–º–æ). –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Ç–µ—Ä—è–µ—Ç—Å—è ‚Äî –æ–∫ –¥–ª—è MVP.
user_roles: Dict[int, str] = {}  # user_id -> "client" | "bank"

class Order:
    counter = 0

    def __init__(
        self,
        client_id: int,
        client_telegram: str,
        client_name: str,
        operation: str,              # "–ø–æ–∫—É–ø–∫–∞" | "–ø—Ä–æ–¥–∞–∂–∞" | "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è"
        amount: float,
        currency_from: str,
        currency_to: Optional[str],  # –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∏–ª–∏ UAH –¥–ª—è buy/sell
        rate: float,                 # –∫—É—Ä—Å –∫–ª–∏–µ–Ω—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    ):
        Order.counter += 1
        self.id = Order.counter
        self.client_id = client_id
        self.client_telegram = client_telegram
        self.client_name = client_name
        self.operation = operation
        self.amount = amount
        self.currency_from = currency_from
        self.currency_to = currency_to
        self.rate = rate
        self.status = "new"          # new | accepted | rejected | order

    def summary(self) -> str:
        if self.operation == "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è":
            line = f"{self.amount} {self.currency_from} ‚Üí {self.currency_to}"
        else:
            line = f"{self.operation} {self.amount} {self.currency_from} (–ø—Ä–æ—Ç–∏–≤ UAH)"
        tg = f" (@{self.client_telegram})" if self.client_telegram else ""
        return (
            f"üìå <b>–ó–∞—è–≤–∫–∞ #{self.id}</b>\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {self.client_name}{tg}\n"
            f"üí± –û–ø–µ—Ä–∞—Ü–∏—è: {line}\n"
            f"üìä –ö—É—Ä—Å –∫–ª–∏–µ–Ω—Ç–∞: {self.rate}\n"
            f"üìç –°—Ç–∞—Ç—É—Å: {self.status}"
        )

orders: Dict[int, Order] = {}

# ===================== KEYBOARDS =====================
def kb_main_client() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")],
            [KeyboardButton(text="üí± –ö—É—Ä—Å—ã")],
        ],
        resize_keyboard=True,
    )

def kb_main_bank() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton(text="üí± –ö—É—Ä—Å—ã")],
        ],
        resize_keyboard=True,
    )

def ikb_role() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë§ –Ø –∫–ª–∏–µ–Ω—Ç", callback_data="role:client"),
            InlineKeyboardButton(text="üè¶ –Ø –±–∞–Ω–∫", callback_data="role:bank"),
        ]
    ])

def ikb_deal_type() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="deal:buy")],
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É", callback_data="deal:sell")],
        [InlineKeyboardButton(text="–ö–æ–Ω–≤–µ—Ä—Å–∏—è (–≤–∞–ª—é—Ç–∞‚Üí–≤–∞–ª—é—Ç–∞)", callback_data="deal:convert")],
    ])

def ikb_bank_order(order_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{order_id}"),
        ],
        [
            InlineKeyboardButton(text="üìå –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –æ—Ä–¥–µ—Ä", callback_data=f"order:{order_id}")
        ]
    ])

# ===================== RATES (STUB) =====================
def get_stub_rates() -> Dict[str, float]:
    # –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Bloomberg/LSEG)
    return {
        "USD/UAH": 41.25,
        "EUR/UAH": 45.10,
        "PLN/UAH": 10.60,
        "EUR/USD": 1.0920,
        "USD/PLN": 3.8760,   # –∏–Ω–≤–µ—Ä—Å–∏—è –æ—Ç 0.2580
        "EUR/PLN": 4.2326,   # EUR/USD * USD/PLN
    }

def format_rates_text() -> str:
    r = get_stub_rates()
    return "\n".join([f"{k} = {v}" for k, v in r.items()])

# ===================== HELPERS =====================
async def reply_safe(chat_id: int, text: str, **kwargs):
    try:
        await bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        logger.error(f"send_message error: {e}")

def user_role(user_id: int) -> str:
    return user_roles.get(user_id, "client")

# ===================== COMMANDS & COMMON =====================
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    try:
        await state.clear()
        # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–æ–ª—å ‚Äî –∫–ª–∏–µ–Ω—Ç
        user_roles[message.from_user.id] = user_roles.get(message.from_user.id, "client")
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FXBankBot!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:",
            reply_markup=ikb_role(),
        )
    except Exception as e:
        logger.error(f"/start failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ /start")

@router.message(Command("menu"))
async def cmd_menu(message: Message):
    try:
        role = user_role(message.from_user.id)
        if role == "bank":
            await message.answer("üè¶ –ú–µ–Ω—é –±–∞–Ω–∫–∞:", reply_markup=kb_main_bank())
        else:
            await message.answer("üë§ –ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=kb_main_client())
    except Exception as e:
        logger.error(f"/menu failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é.")

@router.message(Command("rate"))
@router.message(F.text == "üí± –ö—É—Ä—Å—ã")
async def cmd_rate(message: Message):
    try:
        await message.answer("üí± –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã (–∑–∞–≥–ª—É—à–∫–∞):\n" + format_rates_text())
    except Exception as e:
        logger.error(f"/rate failed: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã.")

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    try:
        await state.clear()
        role = user_role(message.from_user.id)
        kb = kb_main_bank() if role == "bank" else kb_main_client()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)
    except Exception as e:
        logger.error(f"/cancel failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã.")

@router.message(Command("bank"))
async def cmd_bank(message: Message):
    try:
        parts = (message.text or "").strip().split(maxsplit=1)
        if len(parts) < 2:
            return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å: /bank <–ø–∞—Ä–æ–ª—å>")
        if parts[1] == BANK_PASSWORD:
            user_roles[message.from_user.id] = "bank"
            await message.answer("üè¶ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –±–∞–Ω–∫.", reply_markup=kb_main_bank())
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    except Exception as e:
        logger.error(f"/bank failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –±–∞–Ω–∫–∞.")

@router.callback_query(F.data.startswith("role:"))
async def cq_role(callback: CallbackQuery):
    try:
        _, role = callback.data.split(":")
        if role not in ("client", "bank"):
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å", show_alert=True)
            return
        user_roles[callback.from_user.id] = role
        if role == "bank":
            await callback.message.edit_text("–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: üè¶ –ë–∞–Ω–∫", reply_markup=None)
            await callback.message.answer("–ú–µ–Ω—é –±–∞–Ω–∫–∞:", reply_markup=kb_main_bank())
        else:
            await callback.message.edit_text("–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: üë§ –ö–ª–∏–µ–Ω—Ç", reply_markup=None)
            await callback.message.answer("–ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=kb_main_client())
        await callback.answer()
    except Exception as e:
        logger.error(f"cq_role failed: {e}")
        with suppress(Exception):
            await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

# ===================== CLIENT FSM =====================
class ClientFSM(StatesGroup):
    entering_client_name = State()
    choosing_deal = State()
    entering_currency_from = State()
    entering_currency_to = State()
    entering_amount = State()
    entering_rate = State()
# ==========================
# Client FSM (client flow)
# ==========================
class ClientFSM(StatesGroup):
    waiting_for_client_name = State()
    waiting_for_operation = State()
    waiting_for_currency_from = State()
    waiting_for_currency_to = State()
    waiting_for_amount = State()
    waiting_for_rate = State()

# –ö–Ω–æ–ø–∫–∞ "‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
@router.message(F.text == "‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def new_order(message: Message, state: FSMContext):
    await state.set_state(ClientFSM.waiting_for_client_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:")

# –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
@router.message(ClientFSM.waiting_for_client_name)
async def process_client_name(message: Message, state: FSMContext):
    await state.update_data(client_name=message.text.strip())
    await state.set_state(ClientFSM.waiting_for_operation)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:", reply_markup=operation_keyboard())

# –í—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
@router.message(ClientFSM.waiting_for_operation, F.text.in_(["–ö—É–ø–∏—Ç—å", "–ü—Ä–æ–¥–∞—Ç—å", "–ö–æ–Ω–≤–µ—Ä—Å–∏—è"]))
async def process_operation(message: Message, state: FSMContext):
    operation = message.text
    await state.update_data(operation=operation)

    if operation == "–ö–æ–Ω–≤–µ—Ä—Å–∏—è":
        await state.set_state(ClientFSM.waiting_for_currency_from)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–æ–¥–∞—ë–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD):")
    else:
        await state.set_state(ClientFSM.waiting_for_currency_to)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD):")

# –í–∞–ª—é—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏ (–¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏)
@router.message(ClientFSM.waiting_for_currency_from)
async def process_currency_from(message: Message, state: FSMContext):
    await state.update_data(currency_from=message.text.strip().upper())
    await state.set_state(ClientFSM.waiting_for_currency_to)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ–∫—É–ø–∞–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, EUR):")

# –í–∞–ª—é—Ç–∞ –ø–æ–∫—É–ø–∫–∏ (–∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏)
@router.message(ClientFSM.waiting_for_currency_to)
async def process_currency_to(message: Message, state: FSMContext):
    await state.update_data(currency_to=message.text.strip().upper())
    await state.set_state(ClientFSM.waiting_for_amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")

# –°—É–º–º–∞
@router.message(ClientFSM.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    await state.update_data(amount=amount)
    await state.set_state(ClientFSM.waiting_for_rate)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å —Å–¥–µ–ª–∫–∏:")

# –ö—É—Ä—Å
@router.message(ClientFSM.waiting_for_rate)
async def process_rate(message: Message, state: FSMContext):
    try:
        rate = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    await state.update_data(rate=rate)
    data = await state.get_data()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∑–∞—è–≤–∫–∏
    import uuid
    order_id = str(uuid.uuid4())[:8]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ Redis
    order = {
        "id": order_id,
        "client_name": data["client_name"],
        "operation": data["operation"],
        "currency_from": data.get("currency_from"),
        "currency_to": data["currency_to"],
        "amount": data["amount"],
        "rate": data["rate"],
        "status": "pending",
    }
    await redis.hset("orders", order_id, str(order))

    await message.answer(
        f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:\n"
        f"–ö–ª–∏–µ–Ω—Ç: {order['client_name']}\n"
        f"–û–ø–µ—Ä–∞—Ü–∏—è: {order['operation']}\n"
        f"–ò–∑ –≤–∞–ª—é—Ç—ã: {order.get('currency_from', 'UAH')}\n"
        f"–í –≤–∞–ª—é—Ç—É: {order['currency_to']}\n"
        f"–°—É–º–º–∞: {order['amount']}\n"
        f"–ö—É—Ä—Å: {order['rate']}\n"
        f"ID: {order_id}"
    )
    await state.clear()
# ==========================
# Bank logic (approve/reject orders)
# ==========================
@router.message(F.text == "üìã –í—Å–µ –∑–∞—è–≤–∫–∏")
async def list_orders(message: Message):
    orders = await redis.hgetall("orders")
    if not orders:
        await message.answer("‚ùå –ó–∞—è–≤–æ–∫ –Ω–µ—Ç.")
        return

    for oid, odata in orders.items():
        order = eval(odata)  # —É–ø—Ä–æ—â—ë–Ω–Ω–æ, –ª—É—á—à–µ JSON
        text = (
            f"üìù –ó–∞—è–≤–∫–∞ {order['id']}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {order['client_name']}\n"
            f"–û–ø–µ—Ä–∞—Ü–∏—è: {order['operation']}\n"
            f"–ò–∑ –≤–∞–ª—é—Ç—ã: {order.get('currency_from', 'UAH')}\n"
            f"–í –≤–∞–ª—é—Ç—É: {order['currency_to']}\n"
            f"–°—É–º–º–∞: {order['amount']}\n"
            f"–ö—É—Ä—Å: {order['rate']}\n"
            f"–°—Ç–∞—Ç—É—Å: {order['status']}"
        )
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{order['id']}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{order['id']}"),
                ]
            ]
        )
        await message.answer(text, reply_markup=kb)


@router.callback_query(F.data.startswith("accept:"))
async def accept_order(callback: CallbackQuery):
    order_id = callback.data.split(":")[1]
    odata = await redis.hget("orders", order_id)
    if not odata:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    order = eval(odata)
    order["status"] = "accepted"
    await redis.hset("orders", order_id, str(order))

    await callback.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ {order_id} –ø—Ä–∏–Ω—è—Ç–∞.")
    await callback.answer("–ü—Ä–∏–Ω—è—Ç–æ")


@router.callback_query(F.data.startswith("reject:"))
async def reject_order(callback: CallbackQuery):
    order_id = callback.data.split(":")[1]
    odata = await redis.hget("orders", order_id)
    if not odata:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    order = eval(odata)
    order["status"] = "rejected"
    await redis.hset("orders", order_id, str(order))

    await callback.message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ {order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await callback.answer("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")


# ==========================
# Startup & Webhook
# ==========================
app = FastAPI()
WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = f"{WEBAPP_URL}{WEBHOOK_PATH}"


@app.on_event("startup")
async def on_startup():
    logger.info("Starting up application...")
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Redis
    global redis
    redis = aioredis.from_url(REDIS_URL, decode_responses=True)
    logger.info("Redis connected OK.")

    # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook set to {WEBHOOK_URL}")
    logger.info("Startup complete.")


@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()
    await redis.close()


@app.post(WEBHOOK_PATH)
async def webhook(update: dict):
    telegram_update = Update(**update)
    await dp.feed_update(bot, telegram_update)
    return {"ok": True}


@app.get("/")
async def root():
    return {"status": "ok", "bot": "FXBankBot"}


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(
        "app:app",
        host="0.0.0.0",
        port=int(os.getenv("PORT", 10000)),
        reload=False,
    )
