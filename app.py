import os
import asyncio
import logging
from typing import Dict, Optional
from contextlib import suppress

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.client.default import DefaultBotProperties
import redis.asyncio as redis

# ===================== CONFIG =====================
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    logging.getLogger("fxbank_bot_boot").error("BOT_TOKEN env var is missing!")

WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "fxbank-secret").strip()
WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"

BANK_PASSWORD = os.getenv("BANK_PASSWORD", "bank123")
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")

HOST = "0.0.0.0"
PORT = int(os.getenv("PORT", "10000"))

# ===================== LOGGING =====================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
logger = logging.getLogger("fxbank_bot")

# ===================== FASTAPI =====================
app = FastAPI(title="FXBankBot", version="1.2.0")

# ===================== REDIS (FSM) =====================
try:
    redis_conn = redis.from_url(REDIS_URL)
    storage = RedisStorage(redis_conn)
except Exception as e:
    logger.error(f"Redis init failed: {e}")
    raise

# ===================== AIROGRAM CORE =====================
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# ===================== RUNTIME STORAGE =====================
# –ü—Ä–æ—Å—Ç–∞—è in-memory –º–æ–¥–µ–ª—å (–¥–µ–º–æ). –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Ç–µ—Ä—è–µ—Ç—Å—è ‚Äî –æ–∫ –¥–ª—è MVP.
user_roles: Dict[int, str] = {}  # user_id -> "client" | "bank"

class Order:
    counter = 0

    def __init__(
        self,
        client_id: int,
        client_telegram: str,
        client_name: str,
        operation: str,              # "–ø–æ–∫—É–ø–∫–∞" | "–ø—Ä–æ–¥–∞–∂–∞" | "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è"
        amount: float,
        currency_from: str,
        currency_to: Optional[str],  # –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∏–ª–∏ UAH –¥–ª—è buy/sell
        rate: float,                 # –∫—É—Ä—Å –∫–ª–∏–µ–Ω—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    ):
        Order.counter += 1
        self.id = Order.counter
        self.client_id = client_id
        self.client_telegram = client_telegram
        self.client_name = client_name
        self.operation = operation
        self.amount = amount
        self.currency_from = currency_from
        self.currency_to = currency_to
        self.rate = rate
        self.status = "new"          # new | accepted | rejected | order

    def summary(self) -> str:
        if self.operation == "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è":
            line = f"{self.amount} {self.currency_from} ‚Üí {self.currency_to}"
        else:
            line = f"{self.operation} {self.amount} {self.currency_from} (–ø—Ä–æ—Ç–∏–≤ UAH)"
        tg = f" (@{self.client_telegram})" if self.client_telegram else ""
        return (
            f"üìå <b>–ó–∞—è–≤–∫–∞ #{self.id}</b>\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {self.client_name}{tg}\n"
            f"üí± –û–ø–µ—Ä–∞—Ü–∏—è: {line}\n"
            f"üìä –ö—É—Ä—Å –∫–ª–∏–µ–Ω—Ç–∞: {self.rate}\n"
            f"üìç –°—Ç–∞—Ç—É—Å: {self.status}"
        )

orders: Dict[int, Order] = {}

# ===================== KEYBOARDS =====================
def kb_main_client() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")],
            [KeyboardButton(text="üí± –ö—É—Ä—Å—ã")],
        ],
        resize_keyboard=True,
    )

def kb_main_bank() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton(text="üí± –ö—É—Ä—Å—ã")],
        ],
        resize_keyboard=True,
    )

def ikb_role() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë§ –Ø –∫–ª–∏–µ–Ω—Ç", callback_data="role:client"),
            InlineKeyboardButton(text="üè¶ –Ø –±–∞–Ω–∫", callback_data="role:bank"),
        ]
    ])

def ikb_deal_type() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="deal:buy")],
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É", callback_data="deal:sell")],
        [InlineKeyboardButton(text="–ö–æ–Ω–≤–µ—Ä—Å–∏—è (–≤–∞–ª—é—Ç–∞‚Üí–≤–∞–ª—é—Ç–∞)", callback_data="deal:convert")],
    ])

def ikb_bank_order(order_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{order_id}"),
        ],
        [
            InlineKeyboardButton(text="üìå –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –æ—Ä–¥–µ—Ä", callback_data=f"order:{order_id}")
        ]
    ])

# ===================== RATES (STUB) =====================
def get_stub_rates() -> Dict[str, float]:
    # –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Bloomberg/LSEG)
    return {
        "USD/UAH": 41.25,
        "EUR/UAH": 45.10,
        "PLN/UAH": 10.60,
        "EUR/USD": 1.0920,
        "USD/PLN": 3.8760,   # –∏–Ω–≤–µ—Ä—Å–∏—è –æ—Ç 0.2580
        "EUR/PLN": 4.2326,   # EUR/USD * USD/PLN
    }

def format_rates_text() -> str:
    r = get_stub_rates()
    return "\n".join([f"{k} = {v}" for k, v in r.items()])

# ===================== HELPERS =====================
async def reply_safe(chat_id: int, text: str, **kwargs):
    try:
        await bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        logger.error(f"send_message error: {e}")

def user_role(user_id: int) -> str:
    return user_roles.get(user_id, "client")

async def safe_answer(callback: CallbackQuery, text: Optional[str] = None, show_alert: bool = False):
    try:
        await callback.answer(text, show_alert=show_alert)
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º "query is too old" –∏ —Ç.–ø., –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.debug(f"callback.answer error: {e}")

# ===================== COMMANDS & COMMON =====================
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    try:
        await state.clear()
        # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–æ–ª—å ‚Äî –∫–ª–∏–µ–Ω—Ç
        user_roles[message.from_user.id] = user_roles.get(message.from_user.id, "client")
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FXBankBot!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:",
            reply_markup=ikb_role(),
        )
    except Exception as e:
        logger.error(f"/start failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ /start")

@router.message(Command("menu"))
async def cmd_menu(message: Message):
    try:
        role = user_role(message.from_user.id)
        if role == "bank":
            await message.answer("üè¶ –ú–µ–Ω—é –±–∞–Ω–∫–∞:", reply_markup=kb_main_bank())
        else:
            await message.answer("üë§ –ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=kb_main_client())
    except Exception as e:
        logger.error(f"/menu failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é.")

@router.message(Command("rate"))
@router.message(F.text == "üí± –ö—É—Ä—Å—ã")
async def cmd_rate(message: Message):
    try:
        await message.answer("üí± –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã (–∑–∞–≥–ª—É—à–∫–∞):\n" + format_rates_text())
    except Exception as e:
        logger.error(f"/rate failed: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã.")

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    try:
        await state.clear()
        role = user_role(message.from_user.id)
        kb = kb_main_bank() if role == "bank" else kb_main_client()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)
    except Exception as e:
        logger.error(f"/cancel failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã.")

@router.message(Command("bank"))
async def cmd_bank(message: Message):
    try:
        parts = (message.text or "").strip().split(maxsplit=1)
        if len(parts) < 2:
            return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å: /bank <–ø–∞—Ä–æ–ª—å>")
        if parts[1] == BANK_PASSWORD:
            user_roles[message.from_user.id] = "bank"
            await message.answer("üè¶ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –±–∞–Ω–∫.", reply_markup=kb_main_bank())
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    except Exception as e:
        logger.error(f"/bank failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –±–∞–Ω–∫–∞.")

@router.callback_query(F.data.startswith("role:"))
async def cq_role(callback: CallbackQuery):
    try:
        _, role = callback.data.split(":")
        if role not in ("client", "bank"):
            await safe_answer(callback, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å", show_alert=True)
            return
        user_roles[callback.from_user.id] = role
        if role == "bank":
            await callback.message.edit_text("–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: üè¶ –ë–∞–Ω–∫")
            await callback.message.answer("–ú–µ–Ω—é –±–∞–Ω–∫–∞:", reply_markup=kb_main_bank())
        else:
            await callback.message.edit_text("–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: üë§ –ö–ª–∏–µ–Ω—Ç")
            await callback.message.answer("–ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=kb_main_client())
        await safe_answer(callback)
    except Exception as e:
        logger.error(f"cq_role failed: {e}")
        await safe_answer(callback, "–û—à–∏–±–∫–∞", show_alert=True)

# ===================== CLIENT FSM =====================
class ClientFSM(StatesGroup):
    entering_client_name = State()
    choosing_deal = State()
    entering_currency_from = State()
    entering_currency_to = State()
    entering_amount = State()
    entering_rate = State()

@router.message(F.text == "‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def new_order(message: Message, state: FSMContext):
    try:
        # –¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏
        if user_role(message.from_user.id) != "client":
            return await message.answer("‚õî –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–æ–ª—å '–ö–ª–∏–µ–Ω—Ç'.", reply_markup=kb_main_client())
        await state.set_state(ClientFSM.entering_client_name)
        await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (–∫–æ–º–ø–∞–Ω–∏—è/–§–ò–û):", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        logger.error(f"new_order failed: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏.")

@router.message(ClientFSM.entering_client_name)
async def fsm_client_name(message: Message, state: FSMContext):
    try:
        client_name = (message.text or "").strip()
        if not client_name:
            return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞.")
        await state.update_data(client_name=client_name)
        await state.set_state(ClientFSM.choosing_deal)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:", reply_markup=ikb_deal_type())
    except Exception as e:
        logger.error(f"fsm_client_name failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@router.callback_query(ClientFSM.choosing_deal, F.data.in_(["deal:buy", "deal:sell", "deal:convert"]))
async def fsm_choose_deal(callback: CallbackQuery, state: FSMContext):
    try:
        deal = callback.data.split(":")[1]
        await state.update_data(deal=deal)
        await state.set_state(ClientFSM.entering_currency_from)
        if deal == "convert":
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –ü–†–û–î–ê–Å–ú (–ø—Ä–∏–º–µ—Ä: USD):")
        else:
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å–¥–µ–ª–∫–∏ (–ø—Ä–∏–º–µ—Ä: USD):")
        await safe_answer(callback)
    except Exception as e:
        logger.error(f"fsm_choose_deal failed: {e}")
        await safe_answer(callback, "–û—à–∏–±–∫–∞", show_alert=True)

@router.message(ClientFSM.entering_currency_from)
async def fsm_currency_from(message: Message, state: FSMContext):
    try:
        cur = (message.text or "").upper().strip()
        if not cur or len(cur) < 3:
            return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã, –ø—Ä–∏–º–µ—Ä: USD, EUR, UAH.")
        await state.update_data(currency_from=cur)
        data = await state.get_data()
        if data.get("deal") == "convert":
            await state.set_state(ClientFSM.entering_currency_to)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –ü–û–ö–£–ü–ê–ï–ú (–ø—Ä–∏–º–µ—Ä: EUR):")
        else:
            await state.update_data(currency_to="UAH")
            await state.set_state(ClientFSM.entering_amount)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—á–∏—Å–ª–æ):")
    except Exception as e:
        logger.error(f"fsm_currency_from failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@router.message(ClientFSM.entering_currency_to)
async def fsm_currency_to(message: Message, state: FSMContext):
    try:
        cur = (message.text or "").upper().strip()
        if not cur or len(cur) < 3:
            return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã, –ø—Ä–∏–º–µ—Ä: USD, EUR.")
        await state.update_data(currency_to=cur)
        await state.set_state(ClientFSM.entering_amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—á–∏—Å–ª–æ):")
    except Exception as e:
        logger.error(f"fsm_currency_to failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@router.message(ClientFSM.entering_amount)
async def fsm_amount(message: Message, state: FSMContext):
    try:
        val = float((message.text or "").replace(",", "."))
        if val <= 0:
            raise ValueError("amount<=0")
        await state.update_data(amount=val)
        await state.set_state(ClientFSM.entering_rate)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ö–£–†–° (–≤–∞—à –∂–µ–ª–∞–µ–º—ã–π). –ü–∞—Ä–∞ ‚Äî BASE/QUOTE.\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –ü–æ–∫—É–ø–∫–∞/–ü—Ä–æ–¥–∞–∂–∞ USD –ø—Ä–æ—Ç–∏–≤ UAH ‚Üí –∫—É—Ä—Å USD/UAH\n"
            "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è USD‚ÜíEUR ‚Üí –∫—É—Ä—Å USD/EUR"
        )
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 1000.50")
    except Exception as e:
        logger.error(f"fsm_amount failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
# ==============================
# FSM: Client - –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
# ==============================
@router.message(ClientFSM.rate)
async def fsm_rate(message: types.Message, state: FSMContext):
    try:
        rate = float(message.text)
    except ValueError:
        await message.answer("‚ùå –ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await state.update_data(rate=rate)
    data = await state.get_data()

    order = Order(
        client_name=data["client_name"],
        operation=data["operation"],
        base_currency=data["base_currency"],
        quote_currency=data.get("quote_currency", "UAH"),
        amount=float(data["amount"]),
        rate=rate,
    )

    await state.update_data(order=order)
    await state.set_state(ClientFSM.confirm)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_order"
                ),
            ]
        ]
    )
    await message.answer(
        f"üìã –í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n\n{order}", reply_markup=kb
    )


# ==============================
# FSM: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
# ==============================
@router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order: Order = data.get("order")

    if not order:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
    order_key = f"order:{callback.from_user.id}:{int(callback.message.date.timestamp())}"
    await redis.set(order_key, order.model_dump_json(), ex=3600)

    await callback.message.answer(
        "‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–∞–Ω–∫—É.\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞."
    )
    await state.clear()


@router.callback_query(F.data == "cancel_order")
async def cancel_order(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()


# ==============================
# FSM: Bank actions
# ==============================
@router.callback_query(F.data.startswith("accept:"))
async def cq_accept(callback: types.CallbackQuery):
    order_id = callback.data.split(":")[1]
    data = await redis.get(order_id)
    if not data:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    order = Order.model_validate_json(data)
    await callback.message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞:\n\n{order}")


@router.callback_query(F.data.startswith("reject:"))
async def cq_reject(callback: types.CallbackQuery):
    order_id = callback.data.split(":")[1]
    data = await redis.get(order_id)
    if not data:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    order = Order.model_validate_json(data)
    await callback.message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:\n\n{order}")


# ==============================
# FastAPI endpoints
# ==============================
@app.on_event("startup")
async def on_startup():
    global redis
    redis = aioredis.from_url(
        REDIS_URL, decode_responses=True, encoding="utf-8"
    )
    logger.info("Redis connected OK.")

    # Webhook
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook set to {WEBHOOK_URL}")


@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()
    await redis.close()
    logger.info("Shutdown complete.")


@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}


@app.get("/")
async def root():
    return {"status": "ok", "bot": "FXBankBot"}


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(
        "app:app",
        host="0.0.0.0",
        port=int(os.getenv("PORT", 10000)),
        reload=False,
    )
