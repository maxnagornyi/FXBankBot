import asyncio
import json
import logging
import os
import sys
from contextlib import suppress
from datetime import datetime, timezone
from typing import Optional, Dict, Any, List

from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse, PlainTextResponse

from aiogram import Bot, Dispatcher, F, Router
from aiogram.exceptions import TelegramBadRequest, TelegramRetryAfter
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.redis import RedisStorage, DefaultKeyBuilder
from aiogram.types import (
    Update,
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand,
    BotCommandScopeDefault,
)
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.markdown import hbold, hcode

# -------- Redis (async) ----------
try:
    # redis>=5
    from redis.asyncio import Redis
except Exception:  # pragma: no cover
    from aioredis import from_url as Redis  # type: ignore

# -----------------------------
# Logging setup (robust)
# -----------------------------
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=LOG_LEVEL,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    stream=sys.stdout,
)
logger = logging.getLogger("fxbank_bot")

# -----------------------------
# Environment & constants
# -----------------------------
BOT_TOKEN = (os.getenv("BOT_TOKEN") or "").strip()
if not BOT_TOKEN:
    logger.error("BOT_TOKEN is not set! Please add it to Render Environment.")

REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")
WEBHOOK_BASE_URL = (os.getenv("WEBHOOK_URL") or os.getenv("RENDER_EXTERNAL_URL") or "").rstrip("/")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "fxbank-secret")
STRICT_HEADER = os.getenv("STRICT_HEADER", "false").lower() == "true"
ASYNC_UPDATES = os.getenv("ASYNC_UPDATES", "true").lower() == "true"
ENABLE_WATCHDOG = os.getenv("ENABLE_WATCHDOG", "false").lower() == "true"
WATCHDOG_INTERVAL = int(os.getenv("WEBHOOK_WATCHDOG_INTERVAL", "120"))

BANK_PASSWORD = os.getenv("BANK_PASSWORD", "12345")

WEBHOOK_PATH = "/webhook/secret"  # —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ‚Äî —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å
HEALTHCHECK_PATH = "/"

SUPPORTED_CCY = ("USD", "EUR", "PLN")

# Redis keys/templates
ROLE_KEY = "role:{user_id}"                   # "client" | "bank"
ORDER_KEY = "order:{user_id}:{order_id}"      # JSON order
USER_ORDERS_SET = "orders_by_user:{user_id}"  # set(order_id)
PENDING_ORDERS_SET = "orders:pending"         # set(order_id)
RATES_HASH = "rates"                          # hash ccy->rate

# -----------------------------
# FastAPI & Aiogram init
# -----------------------------
app = FastAPI(title="FX Bank Bot", version="1.1.1")

# Redis connection (Upstash rediss:// ok)
try:
    redis: Redis = Redis.from_url(REDIS_URL, encoding="utf-8", decode_responses=True)  # type: ignore
except Exception as e:
    logger.exception("Redis.from_url failed: %s", e)
    raise

storage = RedisStorage(redis=redis, key_builder=DefaultKeyBuilder(prefix="fsm"))
bot = Bot(
    BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
) if BOT_TOKEN else None
dp = Dispatcher(storage=storage)

# Routers
common_router = Router(name="common")
client_router = Router(name="client")
bank_router = Router(name="bank")
dp.include_router(common_router)
dp.include_router(client_router)
dp.include_router(bank_router)

# -----------------------------
# FSM States
# -----------------------------
class ClientOrderSG(StatesGroup):
    enter_amount = State()
    choose_currency = State()
    confirm = State()


class BankSetRateSG(StatesGroup):
    choose_currency = State()
    enter_rate = State()
    confirm = State()


# -----------------------------
# Utilities
# -----------------------------
def now_iso() -> str:
    return datetime.now(timezone.utc).isoformat()


async def get_role(user_id: int) -> str:
    try:
        role = await redis.get(ROLE_KEY.format(user_id=user_id))
        return role or "client"
    except Exception as e:
        logger.error("get_role failed: %s", e)
        return "client"


async def set_role(user_id: int, role: str) -> None:
    try:
        await redis.set(ROLE_KEY.format(user_id=user_id), role)
    except Exception as e:
        logger.error("set_role failed: %s", e)


def make_role_keyboard() -> InlineKeyboardMarkup:
    kb = [
        [
            InlineKeyboardButton(text="üë§ –Ø –∫–ª–∏–µ–Ω—Ç", callback_data="role:client"),
            InlineKeyboardButton(text="üè¶ –Ø –±–∞–Ω–∫", callback_data="role:bank"),
        ],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="common:help")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


def make_client_menu() -> InlineKeyboardMarkup:
    kb = [
        [
            InlineKeyboardButton(text="üü¢ –ö—É–ø–∏—Ç—å", callback_data="client:buy"),
            InlineKeyboardButton(text="üîµ –ü—Ä–æ–¥–∞—Ç—å", callback_data="client:sell"),
        ],
        [
            InlineKeyboardButton(text="üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="client:orders"),
            InlineKeyboardButton(text="üìä –ö—É—Ä—Å—ã", callback_data="common:rates"),
        ],
        [InlineKeyboardButton(text="üîÅ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="role:choose")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


def make_bank_menu() -> InlineKeyboardMarkup:
    kb = [
        [
            InlineKeyboardButton(text="‚úèÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å", callback_data="bank:set_rate"),
            InlineKeyboardButton(text="üì• –ó–∞—è–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="bank:orders"),
        ],
        [
            InlineKeyboardButton(text="üìä –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã", callback_data="common:rates"),
            InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å pending", callback_data="bank:clear_orders"),
        ],
        [InlineKeyboardButton(text="üîÅ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="role:choose")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


def make_currency_keyboard() -> InlineKeyboardMarkup:
    row = [InlineKeyboardButton(text=ccy, callback_data=f"ccy:{ccy}") for ccy in SUPPORTED_CCY]
    return InlineKeyboardMarkup(inline_keyboard=[row, [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="common:back")]])


def make_confirm_keyboard(ok_cb: str, cancel_cb: str = "common:cancel") -> InlineKeyboardMarkup:
    kb = [[
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=ok_cb),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_cb),
    ]]
    return InlineKeyboardMarkup(inline_keyboard=kb)


async def set_commands() -> None:
    if not bot:
        return
    try:
        await bot.set_my_commands(
            commands=[
                BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ / –≤—ã–±–æ—Ä —Ä–æ–ª–∏"),
                BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
                BotCommand(command="menu", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
                BotCommand(command="role", description="–°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"),
                BotCommand(command="bank", description="–í—Ö–æ–¥ –±–∞–Ω–∫–∞: /bank <–ø–∞—Ä–æ–ª—å>"),
                BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"),
            ],
            scope=BotCommandScopeDefault(),
        )
        logger.info("Bot commands set.")
    except Exception as e:
        logger.error("set_my_commands failed: %s", e)


async def _desired_webhook_url() -> Optional[str]:
    if not WEBHOOK_BASE_URL:
        return None
    return f"{WEBHOOK_BASE_URL}{WEBHOOK_PATH}"


async def set_webhook(force: bool = False) -> None:
    """Configure Telegram webhook using WEBHOOK_URL/RENDER_EXTERNAL_URL and fixed path.
    Skips re-setting if current webhook URL is already correct, to avoid Flood control.
    """
    if not bot:
        logger.warning("Bot is None; skip set_webhook.")
        return
    desired = await _desired_webhook_url()
    if not desired:
        logger.warning("WEBHOOK_URL/RENDER_EXTERNAL_URL not set; skip webhook setup.")
        return

    try:
        info = await bot.get_webhook_info()
        current_url = (info.url or "").rstrip("/")
    except Exception as e:
        logger.warning("get_webhook_info failed: %s", e)
        current_url = ""

    if (current_url == desired.rstrip("/")) and not force:
        logger.info("Webhook already set to %s ‚Äî skip update.", desired)
        return

    try:
        used_updates: List[str] = dp.resolve_used_update_types()
        await bot.set_webhook(
            url=desired,
            secret_token=WEBHOOK_SECRET,
            drop_pending_updates=False,
            allowed_updates=used_updates,
        )
        logger.info("Webhook set to %s (allowed_updates=%s)", desired, used_updates)
    except TelegramRetryAfter as e:
        # Respect Telegram backoff to avoid flood-control
        wait_s = int(getattr(e, "retry_after", 1) or 1)
        logger.warning("Rate limited on set_webhook, sleep %ss then retry once...", wait_s)
        await asyncio.sleep(wait_s)
        with suppress(Exception):
            used_updates = dp.resolve_used_update_types()
            await bot.set_webhook(
                url=desired,
                secret_token=WEBHOOK_SECRET,
                drop_pending_updates=False,
                allowed_updates=used_updates,
            )
            logger.info("Webhook set after retry to %s", desired)
    except TelegramBadRequest as e:
        logger.error("TelegramBadRequest on set_webhook: %s", e)
    except Exception as e:
        logger.exception("Failed to set webhook: %s", e)


async def watchdog_task():
    """Optional watchdog: periodically ensure webhook is set (only if mismatch)."""
    if not ENABLE_WATCHDOG:
        return
    logger.info("Watchdog enabled (interval=%ss).", WATCHDOG_INTERVAL)
    while True:
        try:
            # only enforce if url mismatched
            desired = await _desired_webhook_url()
            if not desired:
                await asyncio.sleep(WATCHDOG_INTERVAL)
                continue
            info = None
            with suppress(Exception):
                info = await bot.get_webhook_info()
            current = (info.url if info else "") or ""
            if current.rstrip("/") != desired.rstrip("/"):
                logger.warning("Watchdog: webhook mismatch (current=%s, desired=%s). Fixing...", current, desired)
                await set_webhook(force=True)
            else:
                logger.debug("Watchdog: webhook OK.")
        except Exception as e:
            logger.warning("Watchdog error: %s", e)
        await asyncio.sleep(WATCHDOG_INTERVAL)

# -----------------------------
# Common handlers
# -----------------------------
@common_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.full_name)}!\n"
            f"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞–º –∏ –±–∞–Ω–∫–∞–º –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –∑–∞—è–≤–∫–∞–º–∏ –ø–æ –≤–∞–ª—é—Ç–Ω–æ–º—É —Ä—ã–Ω–∫—É.\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /bank <–ø–∞—Ä–æ–ª—å> –¥–ª—è –≤—Ö–æ–¥–∞ –±–∞–Ω–∫–∞:",
            reply_markup=make_role_keyboard(),
        )
    except Exception as e:
        logger.exception("cmd_start failed: %s", e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ /start.")


@common_router.message(Command("help"))
async def cmd_help(message: Message):
    try:
        txt = (
            "‚ÑπÔ∏è –ü–æ–º–æ—â—å\n\n"
            "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å\n"
            "/menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é\n"
            "/role ‚Äî —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å (–∫–ª–∏–µ–Ω—Ç/–±–∞–Ω–∫)\n"
            "/bank <–ø–∞—Ä–æ–ª—å> ‚Äî –≤—Ö–æ–¥ –¥–ª—è –±–∞–Ω–∫–∞\n"
            "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: " + ", ".join(SUPPORTED_CCY)
        )
        await message.answer(txt)
    except Exception as e:
        logger.exception("cmd_help failed: %s", e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–º–æ—â–∏.")


@common_router.message(Command("menu"))
async def cmd_menu(message: Message):
    try:
        role = await get_role(message.from_user.id)
        if role == "bank":
            await message.answer("üè¶ –ú–µ–Ω—é –±–∞–Ω–∫–∞:", reply_markup=make_bank_menu())
        else:
            await message.answer("üë§ –ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=make_client_menu())
    except Exception as e:
        logger.exception("cmd_menu failed: %s", e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é.")


@common_router.message(Command("role"))
async def cmd_role(message: Message):
    try:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=make_role_keyboard())
    except Exception as e:
        logger.exception("cmd_role failed: %s", e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–∏.")


@common_router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    try:
        await state.clear()
        role = await get_role(message.from_user.id)
        kb = make_bank_menu() if role == "bank" else make_client_menu()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb)
    except Exception as e:
        logger.exception("cmd_cancel failed: %s", e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.")


@common_router.callback_query(F.data == "common:help")
async def cq_help(callback: CallbackQuery):
    try:
        await callback.message.edit_text(
            "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n"
            "‚Äî –ö–ª–∏–µ–Ω—Ç: —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É/–ø—Ä–æ–¥–∞–∂—É –≤–∞–ª—é—Ç—ã.\n"
            "‚Äî –ë–∞–Ω–∫: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫—É—Ä—Å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∞–º–∏.\n"
            "–ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            reply_markup=make_role_keyboard(),
        )
        await callback.answer()
    except Exception as e:
        logger.exception("cq_help failed: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞.", show_alert=True)


@common_router.callback_query(F.data == "role:choose")
async def cq_role_choose(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=make_role_keyboard())
        await callback.answer()
    except Exception as e:
        logger.exception("cq_role_choose failed: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞.", show_alert=True)


@common_router.callback_query(F.data.startswith("role:"))
async def cq_role_set(callback: CallbackQuery):
    try:
        role = callback.data.split(":", 1)[1]
        if role not in ("client", "bank"):
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å.", show_alert=True)
            return
        # –î–ª—è —Ä–æ–ª–∏ –±–∞–Ω–∫ ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–æ /bank <–ø–∞—Ä–æ–ª—å>
        await set_role(callback.from_user.id, role if role == "client" else "bank")
        if role == "bank":
            await callback.message.edit_text(
                "–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: üè¶ –ë–∞–Ω–∫.\n"
                "–ï—Å–ª–∏ –µ—â—ë –Ω–µ –≤–≤–æ–¥–∏–ª–∏ –ø–∞—Ä–æ–ª—å, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /bank <–ø–∞—Ä–æ–ª—å>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=make_bank_menu(),
            )
        else:
            await callback.message.edit_text("–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: üë§ –ö–ª–∏–µ–Ω—Ç.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=make_client_menu())
        await callback.answer("–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.exception("cq_role_set failed: %s", e)
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å.", show_alert=True)


@common_router.callback_query(F.data == "common:rates")
async def cq_show_rates(callback: CallbackQuery):
    try:
        try:
            rates: Dict[str, str] = await redis.hgetall(RATES_HASH)  # type: ignore
        except Exception as re:
            logger.error("Redis hgetall rates failed: %s", re)
            rates = {}
        if not rates:
            txt = "–ü–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫—É—Ä—Å—ã. –ë–∞–Ω–∫–∏ –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å —á–µ—Ä–µ–∑ –º–µ–Ω—é."
        else:
            lines = [f"{ccy}: {hcode(rates[ccy])}" for ccy in sorted(rates.keys())]
            txt = "–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–Ω–∫):\n" + "\n".join(lines)
        await callback.message.edit_text(
            txt,
            reply_markup=(make_bank_menu() if await get_role(callback.from_user.id) == "bank" else make_client_menu()),
        )
        await callback.answer()
    except Exception as e:
        logger.exception("cq_show_rates failed: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤.", show_alert=True)


@common_router.callback_query(F.data == "common:cancel")
async def cq_common_cancel(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        role = await get_role(callback.from_user.id)
        kb = make_bank_menu() if role == "bank" else make_client_menu()
        await callback.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=kb)
        await callback.answer()
    except Exception as e:
        logger.exception("cq_common_cancel failed: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞.", show_alert=True)


@common_router.callback_query(F.data == "common:back")
async def cq_common_back(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        role = await get_role(callback.from_user.id)
        kb = make_bank_menu() if role == "bank" else make_client_menu()
        await callback.message.edit_text("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é.", reply_markup=kb)
        await callback.answer()
    except Exception as e:
        logger.exception("cq_common_back failed: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞.", show_alert=True)


# -----------------------------
# Commands: bank login
# -----------------------------
@common_router.message(Command("bank"))
async def cmd_bank(message: Message):
    try:
        parts = (message.text or "").strip().split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å: /bank <–ø–∞—Ä–æ–ª—å>")
            return
        if parts[1] == BANK_PASSWORD:
            await set_role(message.from_user.id, "bank")
            await message.answer("üè¶ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –±–∞–Ω–∫.", reply_markup=make_bank_menu())
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    except Exception as e:
        logger.exception("cmd_bank failed: %s", e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –±–∞–Ω–∫–∞.")
# -----------------------------
# Client handlers
# -----------------------------
from datetime import datetime

@client_router.callback_query(F.data == "client:buy")
async def cq_client_buy(callback: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(ClientOrderSG.enter_amount)
        await state.update_data(action="buy")
        await callback.message.edit_text(
            "üü¢ –ü–æ–∫—É–ø–∫–∞ –≤–∞–ª—é—Ç—ã.\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000.50):",
            reply_markup=make_confirm_keyboard(ok_cb="noop", cancel_cb="common:cancel"),
        )
        await callback.answer()
    except Exception as e:
        logger.exception("cq_client_buy failed: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞—è–≤–∫–∏.", show_alert=True)


@client_router.callback_query(F.data == "client:sell")
async def cq_client_sell(callback: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(ClientOrderSG.enter_amount)
        await state.update_data(action="sell")
        await callback.message.edit_text(
            "üîµ –ü—Ä–æ–¥–∞–∂–∞ –≤–∞–ª—é—Ç—ã.\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500):",
            reply_markup=make_confirm_keyboard(ok_cb="noop", cancel_cb="common:cancel"),
        )
        await callback.answer()
    except Exception as e:
        logger.exception("cq_client_sell failed: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞—è–≤–∫–∏.", show_alert=True)


@client_router.message(ClientOrderSG.enter_amount)
async def msg_client_enter_amount(message: Message, state: FSMContext):
    try:
        text = (message.text or "").replace(",", ".").strip()
        amount = float(text)
        if amount <= 0:
            raise ValueError("Amount must be positive")
        await state.update_data(amount=amount)
        await state.set_state(ClientOrderSG.choose_currency)
        await message.answer(
            f"–°—É–º–º–∞: {hcode(amount)}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
            reply_markup=make_currency_keyboard(),
        )
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 1200.75")
    except Exception as e:
        logger.exception("msg_client_enter_amount failed: %s", e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã. /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


@client_router.callback_query(ClientOrderSG.choose_currency, F.data.startswith("ccy:"))
async def cq_client_choose_currency(callback: CallbackQuery, state: FSMContext):
    try:
        ccy = callback.data.split(":", 1)[1]
        if ccy not in SUPPORTED_CCY:
            await callback.answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞.", show_alert=True)
            return
        data = await state.get_data()
        action = data.get("action", "buy")
        amount = data.get("amount", 0)
        await state.update_data(currency=ccy)
        await state.set_state(ClientOrderSG.confirm)

        rate_val = None
        try:
            rate_str = await redis.hget(RATES_HASH, ccy)  # type: ignore
            if rate_str is not None:
                rate_val = float(rate_str)
        except Exception as re:
            logger.error("Redis hget rate failed: %s", re)

        summary_lines = [
            f"–î–µ–π—Å—Ç–≤–∏–µ: {hbold('–ü–æ–∫—É–ø–∫–∞' if action == 'buy' else '–ü—Ä–æ–¥–∞–∂–∞')}",
            f"–°—É–º–º–∞: {hcode(amount)}",
            f"–í–∞–ª—é—Ç–∞: {hcode(ccy)}",
        ]
        if rate_val:
            summary_lines.append(f"–û—Ä–∏–µ–Ω—Ç–∏—Ä. –∫—É—Ä—Å: {hcode(rate_val)}")

        await callback.message.edit_text(
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É:\n" + "\n".join(summary_lines),
            reply_markup=make_confirm_keyboard(ok_cb="client:confirm", cancel_cb="common:cancel"),
        )
        await callback.answer()
    except Exception as e:
        logger.exception("cq_client_choose_currency failed: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞–ª—é—Ç—ã.", show_alert=True)


@client_router.callback_query(ClientOrderSG.confirm, F.data == "client:confirm")
async def cq_client_confirm(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        action = data.get("action")
        amount = data.get("amount")
        currency = data.get("currency")
        if not all([action, amount, currency]):
            await callback.answer("–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            await state.clear()
            return

        order_id = f"{callback.from_user.id}-{int(datetime.now().timestamp())}"
        order = {
            "order_id": order_id,
            "user_id": callback.from_user.id,
            "username": callback.from_user.username,
            "full_name": callback.from_user.full_name,
            "action": action,
            "amount": float(amount),
            "currency": currency,
            "status": "pending",
            "created_at": now_iso(),
        }

        # Save to Redis
        try:
            pipe = redis.pipeline()
            pipe.set(ORDER_KEY.format(user_id=callback.from_user.id, order_id=order_id), json.dumps(order))
            pipe.sadd(USER_ORDERS_SET.format(user_id=callback.from_user.id), order_id)
            pipe.sadd(PENDING_ORDERS_SET, order_id)
            await pipe.execute()
        except Exception as re:
            logger.exception("Failed to save order: %s", re)
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É (–æ—à–∏–±–∫–∞ –ë–î).", show_alert=True)
            return

        await state.clear()
        await callback.message.edit_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: {hcode(order_id)}\n"
            f"–î–µ–π—Å—Ç–≤–∏–µ: {hbold('–ü–æ–∫—É–ø–∫–∞' if action == 'buy' else '–ü—Ä–æ–¥–∞–∂–∞')}\n"
            f"–°—É–º–º–∞: {hcode(amount)} {hcode(currency)}\n"
            f"–°—Ç–∞—Ç—É—Å: {hcode('pending')}\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –±–∞–Ω–∫–∞.",
            reply_markup=make_client_menu(),
        )
        await callback.answer("–°–æ–∑–¥–∞–Ω–æ.")
    except Exception as e:
        logger.exception("cq_client_confirm failed: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.", show_alert=True)


@client_router.callback_query(F.data == "client:orders")
async def cq_client_orders(callback: CallbackQuery):
    try:
        try:
            order_ids = await redis.smembers(USER_ORDERS_SET.format(user_id=callback.from_user.id))  # type: ignore
        except Exception as re:
            logger.error("Redis smembers user orders failed: %s", re)
            order_ids = set()

        if not order_ids:
            await callback.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.", reply_markup=make_client_menu())
            await callback.answer()
            return

        orders: List[Dict[str, Any]] = []
        for oid in sorted(order_ids, reverse=True):
            try:
                raw = await redis.get(ORDER_KEY.format(user_id=callback.from_user.id, order_id=oid))  # type: ignore
                if raw:
                    orders.append(json.loads(raw))
            except Exception as re:
                logger.error("Get order failed: %s", re)

        orders = sorted(orders, key=lambda x: x.get("created_at", ""), reverse=True)[:10]
        lines = []
        for o in orders:
            lines.append(
                f"‚Ä¢ {hcode(o['order_id'])}: {o['action']} {o['amount']} {o['currency']} ‚Äî {hbold(o['status'])}"
            )
        await callback.message.edit_text("–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n" + "\n".join(lines), reply_markup=make_client_menu())
        await callback.answer()
    except Exception as e:
        logger.exception("cq_client_orders failed: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.", show_alert=True)


# -----------------------------
# Bank handlers
# -----------------------------
@bank_router.callback_query(F.data == "bank:set_rate")
async def cq_bank_set_rate(callback: CallbackQuery, state: FSMContext):
    try:
        if await get_role(callback.from_user.id) != "bank":
            await callback.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–æ–ª–∏ '–±–∞–Ω–∫'.", show_alert=True)
            return
        await state.set_state(BankSetRateSG.choose_currency)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É—Ä—Å–∞:", reply_markup=make_currency_keyboard())
        await callback.answer()
    except Exception as e:
        logger.exception("cq_bank_set_rate failed: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞.", show_alert=True)


@bank_router.callback_query(BankSetRateSG.choose_currency, F.data.startswith("ccy:"))
async def cq_bank_choose_currency(callback: CallbackQuery, state: FSMContext):
    try:
        ccy = callback.data.split(":", 1)[1]
        if ccy not in SUPPORTED_CCY:
            await callback.answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞.", show_alert=True)
            return
        await state.update_data(currency=ccy)
        await state.set_state(BankSetRateSG.enter_rate)
        await callback.message.edit_text(
            f"–í–∞–ª—é—Ç–∞: {hcode(ccy)}\n–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å (—á–∏—Å–ª–æ):",
            reply_markup=make_confirm_keyboard(ok_cb="noop", cancel_cb="common:cancel"),
        )
        await callback.answer()
    except Exception as e:
        logger.exception("cq_bank_choose_currency failed: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞.", show_alert=True)


@bank_router.message(BankSetRateSG.enter_rate)
async def msg_bank_enter_rate(message: Message, state: FSMContext):
    try:
        text = (message.text or "").replace(",", ".").strip()
        rate = float(text)
        if rate <= 0:
            raise ValueError("rate <= 0")
        await state.update_data(rate=rate)
        data = await state.get_data()
        ccy = data.get("currency")
        await state.set_state(BankSetRateSG.confirm)
        await message.answer(
            f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å {hcode(ccy)} = {hcode(rate)} ?",
            reply_markup=make_confirm_keyboard(ok_cb="bank:rate_confirm", cancel_cb="common:cancel"),
        )
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.exception("msg_bank_enter_rate failed: %s", e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫—É—Ä—Å–∞. /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


@bank_router.callback_query(BankSetRateSG.confirm, F.data == "bank:rate_confirm")
async def cq_bank_rate_confirm(callback: CallbackQuery, state: FSMContext):
    try:
        if await get_role(callback.from_user.id) != "bank":
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è –±–∞–Ω–∫–∞).", show_alert=True)
            return
        data = await state.get_data()
        ccy = data.get("currency")
        rate = data.get("rate")
        if not (ccy and rate):
            await callback.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ.", show_alert=True)
            return
        try:
            await redis.hset(RATES_HASH, ccy, str(rate))  # type: ignore
        except Exception as re:
            logger.exception("Failed to set rate in Redis: %s", re)
            await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞.", show_alert=True)
            return
        await state.clear()
        await callback.message.edit_text(
            f"‚úÖ –ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {hcode(ccy)} = {hcode(rate)}", reply_markup=make_bank_menu()
        )
        await callback.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    except Exception as e:
        logger.exception("cq_bank_rate_confirm failed: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞.", show_alert=True)


@bank_router.callback_query(F.data == "bank:orders")
async def cq_bank_orders(callback: CallbackQuery):
    try:
        if await get_role(callback.from_user.id) != "bank":
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è –±–∞–Ω–∫–∞).", show_alert=True)
            return
        try:
            order_ids = await redis.smembers(PENDING_ORDERS_SET)  # type: ignore
        except Exception as re:
            logger.error("Redis smembers pending orders failed: %s", re)
            order_ids = set()

        if not order_ids:
            await callback.message.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ pending.", reply_markup=make_bank_menu())
            await callback.answer()
            return

        orders: List[Dict[str, Any]] = []
        for oid in sorted(order_ids, reverse=True):
            try:
                user_id_str = oid.split("-", 1)[0]
                raw = await redis.get(ORDER_KEY.format(user_id=user_id_str, order_id=oid))  # type: ignore
                if raw:
                    orders.append(json.loads(raw))
            except Exception as re:
                logger.error("Redis get pending order failed: %s", re)

        if not orders:
            await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞—è–≤–∫–∏.", reply_markup=make_bank_menu())
            await callback.answer()
            return

        lines = []
        for o in sorted(orders, key=lambda x: x.get("created_at", ""), reverse=True)[:15]:
            uname = ("@" + o["username"]) if o.get("username") else o.get("full_name", o["user_id"])
            lines.append(
                f"‚Ä¢ {hcode(o['order_id'])} | {o['action']} {o['amount']} {o['currency']} | –æ—Ç {uname} | {hbold(o['status'])}"
            )

        kb_rows = []
        for o in orders[:5]:
            kb_rows.append(
                [
                    InlineKeyboardButton(text=f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å {o['order_id']}", callback_data=f"bank:accept:{o['order_id']}"),
                    InlineKeyboardButton(text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {o['order_id']}", callback_data=f"bank:reject:{o['order_id']}"),
                ]
            )
        kb_rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="role:choose")])
        kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)

        await callback.message.edit_text("–ó–∞—è–≤–∫–∏ pending:\n" + "\n".join(lines), reply_markup=kb)
        await callback.answer()
    except Exception as e:
        logger.exception("cq_bank_orders failed: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.", show_alert=True)


@bank_router.callback_query(F.data.startswith("bank:accept:"))
async def cq_bank_accept(callback: CallbackQuery):
    try:
        if await get_role(callback.from_user.id) != "bank":
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
            return
        order_id = callback.data.split(":", 2)[2]
        user_id_str = order_id.split("-", 1)[0]
        key = ORDER_KEY.format(user_id=user_id_str, order_id=order_id)
        raw = await redis.get(key)  # type: ignore
        if not raw:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        order = json.loads(raw)
        order["status"] = "accepted"
        order["updated_at"] = now_iso()

        pipe = redis.pipeline()
        pipe.set(key, json.dumps(order))
        pipe.srem(PENDING_ORDERS_SET, order_id)
        await pipe.execute()

        await callback.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.")
        try:
            if bot:
                text = (
                    f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ {hcode(order_id)} –ø—Ä–∏–Ω—è—Ç–∞ –±–∞–Ω–∫–æ–º.\n"
                    f"{order['action']} {order['amount']} {order['currency']}"
                )
                await bot.send_message(chat_id=int(user_id_str), text=text)
        except Exception as ne:
            logger.error("Notify client failed: %s", ne)

        await cq_bank_orders(callback)
    except Exception as e:
        logger.exception("cq_bank_accept failed: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏.", show_alert=True)


@bank_router.callback_query(F.data.startswith("bank:reject:"))
async def cq_bank_reject(callback: CallbackQuery):
    try:
        if await get_role(callback.from_user.id) != "bank":
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
            return
        order_id = callback.data.split(":", 2)[2]
        user_id_str = order_id.split("-", 1)[0]
        key = ORDER_KEY.format(user_id=user_id_str, order_id=order_id)
        raw = await redis.get(key)  # type: ignore
        if not raw:
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        order = json.loads(raw)
        order["status"] = "rejected"
        order["updated_at"] = now_iso()

        pipe = redis.pipeline()
        pipe.set(key, json.dumps(order))
        pipe.srem(PENDING_ORDERS_SET, order_id)
        await pipe.execute()

        await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        try:
            if bot:
                text = (
                    f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ {hcode(order_id)} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–∞–Ω–∫–æ–º.\n"
                    f"{order['action']} {order['amount']} {order['currency']}"
                )
                await bot.send_message(chat_id=int(user_id_str), text=text)
        except Exception as ne:
            logger.error("Notify client failed: %s", ne)

        await cq_bank_orders(callback)
    except Exception as e:
        logger.exception("cq_bank_reject failed: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.", show_alert=True)


@bank_router.callback_query(F.data == "bank:clear_orders")
async def cq_bank_clear_orders(callback: CallbackQuery):
    try:
        if await get_role(callback.from_user.id) != "bank":
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
            return
        try:
            pending = await redis.smembers(PENDING_ORDERS_SET)  # type: ignore
            if pending:
                await redis.delete(PENDING_ORDERS_SET)  # type: ignore
        except Exception as re:
            logger.error("Failed to clear pending set: %s", re)
        await callback.message.edit_text("–û—á–µ—Ä–µ–¥—å pending –æ—á–∏—â–µ–Ω–∞.", reply_markup=make_bank_menu())
        await callback.answer("–ì–æ—Ç–æ–≤–æ.")
    except Exception as e:
        logger.exception("cq_bank_clear_orders failed: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞.", show_alert=True)


# -----------------------------
# FastAPI endpoints (healthcheck & webhook)
# -----------------------------
@app.get(HEALTHCHECK_PATH)
async def healthcheck():
    try:
        redis_ok = True
        try:
            pong = await redis.ping()  # type: ignore
            redis_ok = bool(pong)
        except Exception as re:
            logger.warning("Redis ping failed on healthcheck: %s", re)
            redis_ok = False

        # Also show current webhook url for debugging
        current_url = None
        with suppress(Exception):
            info = await bot.get_webhook_info() if bot else None
            current_url = (info.url if info else None)

        return JSONResponse(
            {
                "status": "ok",
                "time": datetime.utcnow().isoformat() + "Z",
                "redis": "ok" if redis_ok else "error",
                "webhook_path": WEBHOOK_PATH,
                "current_webhook": current_url,
                "strict_header": STRICT_HEADER,
                "async_updates": ASYNC_UPDATES,
            }
        )
    except Exception as e:
        logger.exception("Healthcheck error: %s", e)
        return JSONResponse({"status": "error"}, status_code=500)


# HEAD / for uptime checkers (avoid 405)
@app.head(HEALTHCHECK_PATH)
async def health_head():
    return PlainTextResponse("OK", status_code=200)


@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    # Optional header validation
    try:
        if STRICT_HEADER:
            secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
            if WEBHOOK_SECRET and secret != WEBHOOK_SECRET:
                logger.warning("Invalid secret token header on webhook.")
                raise HTTPException(status_code=403, detail="Forbidden")
    except HTTPException:
        raise
    except Exception as e:
        logger.error("Secret token validation error: %s", e)
        raise HTTPException(status_code=400, detail="Bad Request")

    if not bot:
        logger.error("BOT_TOKEN is missing; webhook cannot process updates.")
        raise HTTPException(status_code=500, detail="Bot not configured")

    try:
        data = await request.json()
    except Exception as e:
        logger.error("Invalid JSON in webhook: %s", e)
        raise HTTPException(status_code=400, detail="Invalid JSON")

    try:
        update = Update.model_validate(data)
    except Exception as e:
        logger.error("Update validate failed: %s", e)
        raise HTTPException(status_code=400, detail="Invalid update payload")

    try:
        if ASYNC_UPDATES:
            asyncio.create_task(dp.feed_update(bot, update))
        else:
            await dp.feed_update(bot, update)
    except Exception as e:
        logger.exception("dp.feed_update failed: %s", e)
    return PlainTextResponse("OK")


# -----------------------------
# Startup / Shutdown hooks
# -----------------------------
@app.on_event("startup")
async def on_startup():
    try:
        logger.info("Starting up application...")
        await set_commands()
        await set_webhook()  # now idempotent
        if ENABLE_WATCHDOG:
            asyncio.create_task(watchdog_task())
        logger.info("Startup complete.")
    except Exception as e:
        logger.exception("Startup failed: %s", e)


@app.on_event("shutdown")
async def on_shutdown():
    try:
        logger.info("Shutting down...")
        if bot:
            with suppress(Exception):
                await bot.delete_webhook()
            with suppress(Exception):
                await bot.session.close()
        with suppress(Exception):
            await redis.close()  # type: ignore
        logger.info("Shutdown complete.")
    except Exception as e:
        logger.exception("Shutdown failed: %s", e)


# -----------------------------
# Local dev entrypoint
# -----------------------------
if __name__ == "__main__":
    import uvicorn

    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", "10000"))
    uvicorn.run("app:app", host=host, port=port, reload=bool(os.getenv("RELOAD", "0") == "1"))
