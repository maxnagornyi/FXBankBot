import os
import logging
from typing import Dict, Optional
from contextlib import suppress

import redis.asyncio as redis
from fastapi import FastAPI, Request

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.client.default import DefaultBotProperties

# ===================== CONFIG =====================
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    logging.getLogger("fxbank_bot_boot").error("BOT_TOKEN env var is missing!")

BANK_PASSWORD = os.getenv("BANK_PASSWORD", "bank123").strip()
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0").strip()

WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "fxbank-secret").strip()
WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"

HOST = "0.0.0.0"
PORT = int(os.getenv("PORT", "10000"))

# Render: –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –±—Ä–∞—Ç—å WEBHOOK_URL, –∏–Ω–∞—á–µ RENDER_EXTERNAL_HOSTNAME
WEBHOOK_BASE = os.getenv("WEBHOOK_URL") or (
    f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}"
    if os.getenv("RENDER_EXTERNAL_HOSTNAME")
    else ""
)

# ===================== LOGGING =====================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | fxbank_bot | %(message)s",
)
logger = logging.getLogger("fxbank_bot")

# ===================== FASTAPI =====================
app = FastAPI(title="FXBankBot", version="1.6.0")

# ===================== REDIS (FSM) =====================
try:
    redis_conn = redis.from_url(REDIS_URL)
    storage = RedisStorage(redis_conn)
    logger.info("RedisStorage initialized.")
except Exception as e:
    logger.error(f"Redis init failed: {e}")
    raise

# ===================== AIROGRAM CORE =====================
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# ===================== RUNTIME (in-memory demo) =====================
# –†–æ–ª–∏ –∏ –∑–∞—è–≤–∫–∏ –¥–µ—Ä–∂–∏–º –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ (MVP). Persist –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–Ω–µ—Å—Ç–∏ –≤ Redis/DB.
user_roles: Dict[int, str] = {}  # user_id -> "client" | "bank"

class Order:
    counter = 0

    def __init__(
        self,
        client_id: int,
        client_telegram: str,
        client_name: str,
        operation: str,              # "–ø–æ–∫—É–ø–∫–∞" | "–ø—Ä–æ–¥–∞–∂–∞" | "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è"
        amount: float,
        currency_from: str,
        currency_to: Optional[str],  # UAH –¥–ª—è buy/sell; –≤–∞–ª—é—Ç–∞ –¥–ª—è convert
        rate: float,                 # –∫—É—Ä—Å –∫–ª–∏–µ–Ω—Ç–∞ BASE/QUOTE
        amount_side: Optional[str] = None,  # —Ç–æ–ª—å–∫–æ –¥–ª—è convert: "sell"|"buy"
    ):
        Order.counter += 1
        self.id = Order.counter
        self.client_id = client_id
        self.client_telegram = client_telegram
        self.client_name = client_name
        self.operation = operation
        self.amount = amount
        self.currency_from = currency_from
        self.currency_to = currency_to
        self.rate = rate
        self.amount_side = amount_side
        self.status = "new"          # new | accepted | rejected | order

    def summary(self) -> str:
        if self.operation == "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è":
            side_txt = (
                " (—Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏)"
                if self.amount_side == "sell"
                else (" (—Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏)" if self.amount_side == "buy" else "")
            )
            line = f"{self.amount} {self.currency_from} ‚Üí {self.currency_to}{side_txt}"
        else:
            line = f"{self.operation} {self.amount} {self.currency_from} (–ø—Ä–æ—Ç–∏–≤ UAH)"
        tg = f" (@{self.client_telegram})" if self.client_telegram else ""
        return (
            f"üìå <b>–ó–∞—è–≤–∫–∞ #{self.id}</b>\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {self.client_name}{tg}\n"
            f"üí± –û–ø–µ—Ä–∞—Ü–∏—è: {line}\n"
            f"üìä –ö—É—Ä—Å –∫–ª–∏–µ–Ω—Ç–∞ (BASE/QUOTE): {self.rate}\n"
            f"üìç –°—Ç–∞—Ç—É—Å: {self.status}"
        )

orders: Dict[int, Order] = {}

# ===================== KEYBOARDS =====================
def kb_main_client() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")],
            [KeyboardButton(text="üí± –ö—É—Ä—Å—ã")],
        ],
        resize_keyboard=True,
    )

def kb_main_bank() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –í—Å–µ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton(text="üí± –ö—É—Ä—Å—ã")],
        ],
        resize_keyboard=True,
    )

def ikb_role() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë§ –Ø –∫–ª–∏–µ–Ω—Ç", callback_data="role:client"),
            InlineKeyboardButton(text="üè¶ –Ø –±–∞–Ω–∫", callback_data="role:bank"),
        ]
    ])

def ikb_deal_type() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="deal:buy")],
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É", callback_data="deal:sell")],
        [InlineKeyboardButton(text="–ö–æ–Ω–≤–µ—Ä—Å–∏—è (–≤–∞–ª—é—Ç–∞‚Üí–≤–∞–ª—é—Ç–∞)", callback_data="deal:convert")],
    ])

def ikb_amount_side() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–≤–æ–∂—É —Å—É–º–º—É –ü–†–û–î–ê–ñ–ò (BASE)", callback_data="as:sell")],
        [InlineKeyboardButton(text="–í–≤–æ–∂—É —Å—É–º–º—É –ü–û–ö–£–ü–ö–ò (QUOTE)", callback_data="as:buy")],
    ])

def ikb_bank_order(order_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{order_id}"),
        ],
        [
            InlineKeyboardButton(text="üìå –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –æ—Ä–¥–µ—Ä", callback_data=f"order:{order_id}")
        ]
    ])

# ===================== RATES (STUB) =====================
def get_stub_rates() -> Dict[str, float]:
    # –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä (–ø–æ–¥–º–µ–Ω–∏–º –Ω–∞ LSEG/Bloomberg –ø–æ–∑–∂–µ)
    return {
        "USD/UAH": 41.25,
        "EUR/UAH": 45.10,
        "PLN/UAH": 10.60,
        "EUR/USD": 1.0920,
        "USD/PLN": 3.8760,
        "EUR/PLN": 4.2326,
    }

def format_rates_text() -> str:
    r = get_stub_rates()
    return "\n".join([f"{k} = {v}" for k, v in r.items()])

# ===================== HELPERS =====================
def user_role(uid: int) -> str:
    return user_roles.get(uid, "client")

async def safe_cb_answer(cb: CallbackQuery, text: Optional[str] = None, show_alert: bool = False):
    with suppress(Exception):
        await cb.answer(text, show_alert=show_alert)

# ===================== COMMANDS & COMMON =====================
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    try:
        await state.clear()
        user_roles[message.from_user.id] = user_roles.get(message.from_user.id, "client")
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FXBankBot!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=ikb_role())
    except Exception as e:
        logger.error(f"/start failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ /start")

@router.message(Command("menu"))
async def cmd_menu(message: Message):
    try:
        role = user_role(message.from_user.id)
        kb = kb_main_bank() if role == "bank" else kb_main_client()
        await message.answer("üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)
    except Exception as e:
        logger.error(f"/menu failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é.")

@router.message(Command("rate"))
@router.message(F.text == "üí± –ö—É—Ä—Å—ã")
async def cmd_rate(message: Message):
    try:
        await message.answer("üí± –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã (–∑–∞–≥–ª—É—à–∫–∞):\n" + format_rates_text())
    except Exception as e:
        logger.error(f"/rate failed: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã.")

@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    try:
        cur = await state.get_state()
        await state.clear()
        role = user_role(message.from_user.id)
        kb = kb_main_bank() if role == "bank" else kb_main_client()
        if cur:
            await message.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)
        else:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)
    except Exception as e:
        logger.error(f"/cancel failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã.")

@router.message(Command("bank"))
async def cmd_bank(message: Message):
    try:
        parts = (message.text or "").strip().split(maxsplit=1)
        if len(parts) < 2:
            return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å: /bank <–ø–∞—Ä–æ–ª—å>")
        if parts[1] == BANK_PASSWORD:
            user_roles[message.from_user.id] = "bank"
            await message.answer("üè¶ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –±–∞–Ω–∫.", reply_markup=kb_main_bank())
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
    except Exception as e:
        logger.error(f"/bank failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –±–∞–Ω–∫–∞.")

@router.callback_query(F.data.startswith("role:"))
async def cq_role(callback: CallbackQuery):
    try:
        _, role = callback.data.split(":")
        if role not in ("client", "bank"):
            return await safe_cb_answer(callback, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å", show_alert=True)
        user_roles[callback.from_user.id] = role
        if role == "bank":
            await callback.message.edit_text("–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: üè¶ –ë–∞–Ω–∫")
            await callback.message.answer("–ú–µ–Ω—é –±–∞–Ω–∫–∞:", reply_markup=kb_main_bank())
        else:
            await callback.message.edit_text("–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: üë§ –ö–ª–∏–µ–Ω—Ç")
            await callback.message.answer("–ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=kb_main_client())
        await safe_cb_answer(callback)
    except Exception as e:
        logger.error(f"cq_role failed: {e}")
        await safe_cb_answer(callback, "–û—à–∏–±–∫–∞", show_alert=True)

# ===================== CLIENT FSM (states) =====================
class ClientFSM(StatesGroup):
    entering_client_name = State()
    choosing_deal = State()
    entering_currency_from = State()
    entering_currency_to = State()     # —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    choosing_amount_side = State()     # —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: sell/buy
    entering_amount = State()
    entering_rate = State()

# ===================== CLIENT FLOW =====================
@router.message(F.text == "‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def new_request(message: Message, state: FSMContext):
    try:
        await state.clear()
        await state.set_state(ClientFSM.entering_client_name)
        await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        logger.error(f"new_request failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")

@router.message(ClientFSM.entering_client_name)
async def fsm_client_name(message: Message, state: FSMContext):
    try:
        client_name = (message.text or "").strip()
        if not client_name:
            return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞.")
        await state.update_data(client_name=client_name)
        await state.set_state(ClientFSM.choosing_deal)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:", reply_markup=ikb_deal_type())
    except Exception as e:
        logger.error(f"fsm_client_name failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∏–º–µ–Ω–∏.")

@router.callback_query(F.data.startswith("deal:"))
async def cq_deal(callback: CallbackQuery, state: FSMContext):
    try:
        deal_type = callback.data.split(":")[1]
        if deal_type == "buy":
            await state.update_data(operation="–ø–æ–∫—É–ø–∫–∞", currency_to="UAH")
        elif deal_type == "sell":
            await state.update_data(operation="–ø—Ä–æ–¥–∞–∂–∞", currency_to="UAH")
        elif deal_type == "convert":
            await state.update_data(operation="–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è")
        else:
            return await safe_cb_answer(callback, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–¥–µ–ª–∫–∏", show_alert=True)

        await state.set_state(ClientFSM.entering_currency_from)
        if deal_type == "convert":
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ü–†–û–î–ê–¢–¨ (–ø—Ä–∏–º–µ—Ä: USD):")
        else:
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å–¥–µ–ª–∫–∏ (–ø—Ä–∏–º–µ—Ä: USD):")
        await safe_cb_answer(callback)
    except Exception as e:
        logger.error(f"cq_deal failed: {e}")
        await safe_cb_answer(callback, "‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)

@router.message(ClientFSM.entering_currency_from)
async def fsm_currency_from(message: Message, state: FSMContext):
    try:
        cfrom = (message.text or "").upper().strip()
        if not cfrom or len(cfrom) < 3:
            return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã, –ø—Ä–∏–º–µ—Ä: USD, EUR, UAH.")
        await state.update_data(currency_from=cfrom)
        data = await state.get_data()
        if data.get("operation") == "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è":
            await state.set_state(ClientFSM.entering_currency_to)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ü–û–õ–£–ß–ò–¢–¨ (–ø—Ä–∏–º–µ—Ä: EUR):")
        else:
            await state.update_data(currency_to="UAH")
            await state.set_state(ClientFSM.entering_amount)
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {cfrom}:")
    except Exception as e:
        logger.error(f"fsm_currency_from failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤–∞–ª—é—Ç—ã.")

@router.message(ClientFSM.entering_currency_to)
async def fsm_currency_to(message: Message, state: FSMContext):
    try:
        cto = (message.text or "").upper().strip()
        if not cto or len(cto) < 3:
            return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã, –ø—Ä–∏–º–µ—Ä: USD, EUR.")
        await state.update_data(currency_to=cto)
        await state.set_state(ClientFSM.choosing_amount_side)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫—É—é —Å—É–º–º—É –≤–≤–æ–¥–∏—Ç–µ:", reply_markup=ikb_amount_side())
    except Exception as e:
        logger.error(f"fsm_currency_to failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤—Ç–æ—Ä–æ–π –≤–∞–ª—é—Ç—ã.")

@router.callback_query(F.data.startswith("as:"))
async def cq_amount_side(callback: CallbackQuery, state: FSMContext):
    try:
        side = callback.data.split(":")[1]
        if side not in ("sell", "buy"):
            return await safe_cb_answer(callback, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
        await state.update_data(amount_side=side)
        await state.set_state(ClientFSM.entering_amount)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        await safe_cb_answer(callback)
    except Exception as e:
        logger.error(f"cq_amount_side failed: {e}")
        await safe_cb_answer(callback, "‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)

@router.message(ClientFSM.entering_amount)
async def fsm_amount(message: Message, state: FSMContext):
    try:
        try:
            amount = float((message.text or "").replace(",", "."))
        except ValueError:
            return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000.50")

        await state.update_data(amount=amount)
        await state.set_state(ClientFSM.entering_rate)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å (BASE/QUOTE).\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –ü–æ–∫—É–ø–∫–∞/–ü—Ä–æ–¥–∞–∂–∞ USD –ø—Ä–æ—Ç–∏–≤ UAH ‚Üí –∫—É—Ä—Å USD/UAH\n"
            "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è USD‚ÜíEUR ‚Üí –∫—É—Ä—Å USD/EUR"
        )
    except Exception as e:
        logger.error(f"fsm_amount failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—É–º–º—ã.")
# ======================
# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ app.py
# ======================

# --- –í–≤–æ–¥ –∫—É—Ä—Å–∞ –∫–ª–∏–µ–Ω—Ç–æ–º ---
@router.message(ClientFSM.rate)
async def client_set_rate(message: Message, state: FSMContext):
    try:
        rate = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å (—á–∏—Å–ª–æ).")
        return

    data = await state.get_data()
    app_id = str(uuid.uuid4())

    applications[app_id] = {
        "id": app_id,
        "client_name": data["client_name"],
        "operation": data["operation"],
        "currency": data["currency"],
        "amount": data["amount"],
        "rate": rate,
        "status": "new"
    }

    await message.answer(
        f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"–ö–ª–∏–µ–Ω—Ç: {data['client_name']}\n"
        f"–û–ø–µ—Ä–∞—Ü–∏—è: {data['operation']}\n"
        f"–í–∞–ª—é—Ç–∞: {data['currency']}\n"
        f"–°—É–º–º–∞: {data['amount']}\n"
        f"–ö—É—Ä—Å: {rate}",
        reply_markup=main_menu_client()
    )
    await state.clear()


# --- –ü–∞–Ω–µ–ª—å –±–∞–Ω–∫–∞ ---
@router.message(F.text == "üè¶ –ü–∞–Ω–µ–ª—å –±–∞–Ω–∫–∞")
async def bank_panel(message: Message):
    if not applications:
        await message.answer("üì≠ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    for app_id, app in applications.items():
        text = (
            f"üìå –ó–∞—è–≤–∫–∞ {app_id}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {app['client_name']}\n"
            f"–û–ø–µ—Ä–∞—Ü–∏—è: {app['operation']}\n"
            f"–í–∞–ª—é—Ç–∞: {app['currency']}\n"
            f"–°—É–º–º–∞: {app['amount']}\n"
            f"–ö—É—Ä—Å: {app['rate']}\n"
            f"–°—Ç–∞—Ç—É—Å: {app['status']}"
        )
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{app_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{app_id}")
                ]
            ]
        )
        await message.answer(text, reply_markup=kb)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –±–∞–Ω–∫–∞ ---
@router.callback_query(F.data.startswith("accept:"))
async def bank_accept(callback: CallbackQuery):
    app_id = callback.data.split(":")[1]
    if app_id in applications:
        applications[app_id]["status"] = "accepted"
        await callback.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ {app_id} –ø—Ä–∏–Ω—è—Ç–∞.")
    await callback.answer()


@router.callback_query(F.data.startswith("reject:"))
async def bank_reject(callback: CallbackQuery):
    app_id = callback.data.split(":")[1]
    if app_id in applications:
        applications[app_id]["status"] = "rejected"
        await callback.message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ {app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await callback.answer()


# ======================
# FastAPI + Webhook
# ======================

@app.on_event("startup")
async def on_startup():
    log.info("Starting up FXBankBot...")
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(WEBHOOK_URL, allowed_updates=["message", "callback_query"])
    log.info(f"Webhook set to {WEBHOOK_URL}")


@app.on_event("shutdown")
async def on_shutdown():
    log.info("Shutting down FXBankBot...")
    await bot.session.close()


@app.post(WEBHOOK_PATH)
async def webhook_handler(update: dict):
    telegram_update = Update.model_validate(update)
    await dp.feed_update(bot, telegram_update)
    return {"ok": True}


@app.get("/")
async def index():
    return {"status": "ok", "message": "FXBankBot is running!"}
